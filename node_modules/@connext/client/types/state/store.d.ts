import { Store } from 'redux';
import { ChannelState, ChannelStatus, CustodialBalanceRow, ExchangeRateState, Payment, SyncResult, ThreadHistoryItem, ThreadState, UpdateRequest, WithdrawalArgs } from '../types';
export declare const CUSTODIAL_BALANCE_ZERO_STATE: {
    balanceToken: string;
    balanceWei: string;
    sentWei: string;
    totalReceivedToken: string;
    totalReceivedWei: string;
    totalWithdrawnToken: string;
    totalWithdrawnWei: string;
    user: string;
};
export declare const CHANNEL_ZERO_STATE: {
    balanceTokenHub: string;
    balanceTokenUser: string;
    balanceWeiHub: string;
    balanceWeiUser: string;
    contractAddress: string;
    pendingDepositTokenHub: string;
    pendingDepositTokenUser: string;
    pendingDepositWeiHub: string;
    pendingDepositWeiUser: string;
    pendingWithdrawalTokenHub: string;
    pendingWithdrawalTokenUser: string;
    pendingWithdrawalWeiHub: string;
    pendingWithdrawalWeiUser: string;
    recipient: string;
    sigHub: string;
    sigUser: string;
    threadCount: number;
    threadRoot: string;
    timeout: number;
    txCountChain: number;
    txCountGlobal: number;
    user: string;
};
export declare class SyncControllerState {
    updatesToSync: SyncResult[];
}
export interface IOnchainMonitoring {
    transactionHash: string | undefined;
    submitted: boolean;
    detected: boolean;
}
export declare class RuntimeState {
    deposit: IOnchainMonitoring;
    withdrawal: IOnchainMonitoring;
    collateral: IOnchainMonitoring;
    exchangeRate: undefined | ExchangeRateState;
    syncResultsFromHub: SyncResult[];
    updateRequestTimeout: number;
    channelStatus: ChannelStatus;
}
export interface IPendingRequestedDeposit {
    amount: Payment;
    requestedOn: number;
    txCount: number | undefined;
}
export interface LatestPendingUpdate {
    withdrawal: WithdrawalArgs | undefined;
    txCount: number;
}
export declare class PersistentState {
    channel: ChannelState;
    channelUpdate: UpdateRequest;
    latestPending: LatestPendingUpdate;
    latestValidState: ChannelState;
    custodialBalance: CustodialBalanceRow;
    activeThreads: ThreadState[];
    activeInitialThreadStates: ThreadState[];
    threadHistory: ThreadHistoryItem[];
    lastThreadUpdateId: number;
    syncControllerState: SyncControllerState;
    hubAddress: string;
}
export declare class ConnextState {
    persistent: PersistentState;
    runtime: RuntimeState;
}
export declare type ConnextStore = Store<ConnextState>;
