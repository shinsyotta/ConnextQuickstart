"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const utils_1 = require("ethers/utils");
const constants_2 = require("../../../../../src/constants");
const models_1 = require("../../../../../src/models");
const random_signing_keys_1 = require("../../../integration/random-signing-keys");
const mocks_1 = require("../../../mocks");
describe("StateChannel::setupChannel", () => {
    const multisigAddress = utils_1.getAddress(utils_1.hexlify(utils_1.randomBytes(20)));
    const xpubs = random_signing_keys_1.getRandomExtendedPubKeys(2);
    let sc;
    const networkContext = mocks_1.generateRandomNetworkContext();
    beforeAll(() => {
        sc = models_1.StateChannel.setupChannel(networkContext.IdentityApp, networkContext.ProxyFactory, multisigAddress, xpubs);
    });
    it("should have empty map for proposed app instances", () => {
        expect(sc.proposedAppInstances).toEqual(new Map());
    });
    it("should have empty map for app instances", () => {
        expect(sc.appInstances).toEqual(new Map());
    });
    it("should not alter any of the base properties", () => {
        expect(sc.multisigAddress).toBe(multisigAddress);
        expect(sc.userNeuteredExtendedKeys).toBe(xpubs);
    });
    it("should have bumped the sequence number", () => {
        expect(sc.numProposedApps).toBe(1);
    });
    describe("the installed ETH Free Balance", () => {
        let fb;
        beforeAll(() => {
            fb = sc.freeBalance;
        });
        it("should exist", () => {
            expect(fb).not.toBe(undefined);
        });
        it("should not be a virtual app", () => {
            expect(fb.isVirtualApp).toBe(false);
        });
        it("should have versionNumber 0 to start", () => {
            expect(fb.versionNumber).toBe(0);
        });
        it("should have a default timeout defined by the hard-coded assumption", () => {
            expect(fb.timeout).toBe(172800);
        });
        it("should use the default timeout for the initial timeout", () => {
            expect(fb.timeout).toBe(fb.defaultTimeout);
        });
        it("should use the multisig owners as the participants", () => {
            expect(fb.participants).toEqual(sc.multisigOwners);
        });
        it("should use the FreeBalanceAppApp as the app target", () => {
            expect(fb.appInterface.addr).toBe(networkContext.IdentityApp);
            expect(fb.appInterface.actionEncoding).toBe(undefined);
        });
        it("should have seqNo of 0 (b/c it is the first ever app)", () => {
            expect(fb.appSeqNo).toBe(0);
        });
        it("should set the participants as the userNeuteredExtendedKeys", () => { });
        it("should have 0 balances for Alice and Bob", () => {
            for (const amount of Object.values(sc
                .getFreeBalanceClass()
                .withTokenAddress(constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS) || {})) {
                expect(amount).toEqual(constants_1.Zero);
            }
        });
    });
});
//# sourceMappingURL=setup-channel.spec.js.map