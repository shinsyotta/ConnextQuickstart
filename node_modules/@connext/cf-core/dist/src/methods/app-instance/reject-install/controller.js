"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_server_1 = require("rpc-server");
const request_handler_1 = require("../../../request-handler");
const types_1 = require("../../../types");
const controller_1 = require("../../controller");
class RejectInstallController extends controller_1.NodeController {
    async getRequiredLockNames(requestHandler, params) {
        const { appInstanceId } = params;
        return [appInstanceId];
    }
    async executeMethodImplementation(requestHandler, params) {
        const { store, messagingService, publicIdentifier } = requestHandler;
        const { appInstanceId } = params;
        const appInstanceProposal = await store.getAppInstanceProposal(appInstanceId);
        const stateChannel = await store.getChannelFromAppInstanceID(appInstanceId);
        await store.saveStateChannel(stateChannel.removeProposal(appInstanceId));
        const rejectProposalMsg = {
            from: publicIdentifier,
            type: "REJECT_INSTALL_EVENT",
            data: {
                appInstanceId
            }
        };
        const { proposedByIdentifier, proposedToIdentifier } = appInstanceProposal;
        const counterparty = publicIdentifier === proposedByIdentifier
            ? proposedToIdentifier
            : proposedByIdentifier;
        await messagingService.send(counterparty, rejectProposalMsg);
        return {};
    }
}
__decorate([
    rpc_server_1.jsonRpcMethod(types_1.CFCoreTypes.RpcMethodNames.chan_rejectInstall),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [request_handler_1.RequestHandler, Object]),
    __metadata("design:returntype", Promise)
], RejectInstallController.prototype, "executeMethodImplementation", null);
exports.default = RejectInstallController;
//# sourceMappingURL=controller.js.map