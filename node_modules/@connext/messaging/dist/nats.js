import * as nats from "ts-nats";
import { Logger } from "./logger";
export class NatsMessagingService {
    constructor(config, messagingServiceKey) {
        this.config = config;
        this.messagingServiceKey = messagingServiceKey;
        this.subscriptions = {};
        this.log = new Logger("NatsMessagingService", config.logLevel);
        this.log.debug(`Created with config: ${JSON.stringify(config, null, 2)}`);
    }
    async connect() {
        const messagingUrl = this.config.messagingUrl;
        const config = this.config;
        config.servers = typeof messagingUrl === "string" ? [messagingUrl] : messagingUrl;
        config.payload = nats.Payload.JSON;
        this.connection = await nats.connect(config);
        this.log.debug(`Connected!`);
    }
    async disconnect() {
        this.assertConnected();
        this.connection.close();
    }
    async onReceive(subject, callback) {
        this.assertConnected();
        this.subscriptions[subject] = await this.connection.subscribe(this.prependKey(`${subject}.>`), (err, msg) => {
            if (err || !msg || !msg.data) {
                this.log.error(`Encountered an error while handling callback for message ${msg}: ${err}`);
            }
            else {
                const data = typeof msg.data === "string" ? JSON.parse(msg).data : msg.data;
                this.log.debug(`Received message for ${subject}: ${JSON.stringify(data)}`);
                callback(data);
            }
        });
    }
    async send(to, msg) {
        this.assertConnected();
        this.log.debug(`Sending message to ${to}: ${JSON.stringify(msg)}`);
        this.connection.publish(this.prependKey(`${to}.${msg.from}`), msg);
    }
    async publish(subject, data) {
        this.assertConnected();
        this.log.debug(`Publishing ${subject}: ${JSON.stringify(data)}`);
        this.connection.publish(subject, data);
    }
    async request(subject, timeout, data = {}) {
        this.assertConnected();
        this.log.debug(`Requesting ${subject} with data: ${JSON.stringify(data)}`);
        const response = await this.connection.request(subject, timeout, data);
        this.log.debug(`Request for ${subject} returned: ${JSON.stringify(response)}`);
        return response;
    }
    async subscribe(subject, callback) {
        this.assertConnected();
        this.subscriptions[subject] = await this.connection.subscribe(subject, (err, msg) => {
            if (err || !msg || !msg.data) {
                this.log.error(`Encountered an error while handling callback for message ${msg}: ${err}`);
            }
            else {
                const data = typeof msg === "string" ? JSON.parse(msg) : msg;
                this.log.debug(`Subscription for ${subject}: ${JSON.stringify(data)}`);
                callback(data);
            }
        });
    }
    async unsubscribe(subject) {
        this.assertConnected();
        if (this.subscriptions[subject]) {
            this.subscriptions[subject].unsubscribe();
            this.log.debug(`Unsubscribed from ${subject}`);
        }
        else {
            this.log.warn(`Not subscribed to ${subject}, doing nothing`);
        }
    }
    async flush() {
        this.assertConnected();
        await this.connection.flush();
    }
    prependKey(subject) {
        return `${this.messagingServiceKey}.${subject}`;
    }
    assertConnected() {
        if (!this.connection) {
            throw new Error("No connection exists, NatsMessagingService is uninitialized.");
        }
    }
}
//# sourceMappingURL=nats.js.map