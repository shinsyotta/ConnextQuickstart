"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/utils");
const ethereum_1 = require("../../../../src/ethereum");
const app_identity_1 = require("../../../../src/ethereum/utils/app-identity");
const models_1 = require("../../../../src/models");
const contracts_1 = require("../../../contracts");
const random_signing_keys_1 = require("../../integration/random-signing-keys");
const mocks_1 = require("../../mocks");
describe("SetupCommitment", () => {
    let tx;
    const networkContext = mocks_1.generateRandomNetworkContext();
    const interaction = {
        sender: random_signing_keys_1.getRandomExtendedPubKey(),
        receiver: random_signing_keys_1.getRandomExtendedPubKey()
    };
    const stateChannel = models_1.StateChannel.setupChannel(networkContext.IdentityApp, networkContext.ProxyFactory, utils_1.getAddress(utils_1.hexlify(utils_1.randomBytes(20))), [interaction.sender, interaction.receiver]);
    const freeBalance = stateChannel.freeBalance;
    beforeAll(() => {
        tx = new ethereum_1.SetupCommitment(networkContext, stateChannel.multisigAddress, stateChannel.multisigOwners, freeBalance.identity).getTransactionDetails();
    });
    it("should be to ConditionalTransactionDelegateTarget", () => {
        expect(tx.to).toBe(networkContext.ConditionalTransactionDelegateTarget);
    });
    it("should have no value", () => {
        expect(tx.value).toBe(0);
    });
    describe("the calldata", () => {
        const iface = new utils_1.Interface(contracts_1.ConditionalTransactionDelegateTarget.abi);
        let desc;
        beforeAll(() => {
            const { data } = tx;
            desc = iface.parseTransaction({ data });
        });
        it("should be to the executeEffectOfFreeBalance method", () => {
            expect(desc.sighash).toBe(iface.functions.executeEffectOfFreeBalance.sighash);
        });
        it("should contain expected arguments", () => {
            const [appRegistry, appIdentityHash, interpreterAddress] = desc.args;
            expect(appRegistry).toBe(networkContext.ChallengeRegistry);
            expect(appIdentityHash).toBe(app_identity_1.appIdentityToHash(freeBalance.identity));
            expect(interpreterAddress).toBe(networkContext.MultiAssetMultiPartyCoinTransferInterpreter);
        });
    });
});
//# sourceMappingURL=setup-commitment.spec.js.map