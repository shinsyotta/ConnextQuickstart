/// <reference types="chai" />
import { ethers as eth } from 'ethers';
import { BN } from '../lib';
import { Address, ChannelState, ChannelStateUpdate, CreateCustodialWithdrawalOptions, CustodialBalanceRow, CustodialWithdrawalRow, DepositArgs, ExchangeArgs, ExchangeRates, PaymentArgs, PendingArgs, ThreadState, WithdrawalArgs } from '../types';
export { address, ethUrl, mnemonic, MockChannelManager, MockConnextInternal, MockHub, MockStore, patch, privateKey, } from './mocks';
export declare const assert: Chai.AssertStatic;
export declare const mkAddress: (prefix?: string) => string;
export declare const mkHash: (prefix?: string) => string;
export declare const generateExchangeRates: (daiRate: string) => ExchangeRates;
export interface SuccinctChannelState<T = string | number | BN> {
    contractAddress: Address;
    user: Address;
    recipient: Address;
    balanceWei: [T, T];
    balanceToken: [T, T];
    pendingDepositWei: [T, T];
    pendingDepositToken: [T, T];
    pendingWithdrawalWei: [T, T];
    pendingWithdrawalToken: [T, T];
    txCount: [number, number];
    sigs: [string, string];
    threadRoot: string;
    threadCount: number;
    timeout: number;
}
export interface SuccinctThreadState<T = string | number | BN> {
    contractAddress: Address;
    sender: Address;
    receiver: Address;
    threadId: number;
    balanceWei: [T, T];
    balanceToken: [T, T];
    txCount: number;
    sigA: string;
}
export declare type SignedOrSuccinctChannel = SuccinctChannelState | ChannelState;
export declare type SignedOrSuccinctThread = SuccinctThreadState | ThreadState;
export declare type PartialSignedOrSuccinctChannel = Partial<SuccinctChannelState & ChannelState<string | number | BN>>;
export declare type PartialSignedOrSuccinctThread = Partial<SuccinctThreadState & ThreadState<string | number | BN>>;
export interface SuccinctDepositArgs<T = string | number | BN> {
    depositWei: [T, T];
    depositToken: [T, T];
    timeout: number;
}
export declare type VerboseOrSuccinctDepositArgs = SuccinctDepositArgs | DepositArgs;
export declare type PartialVerboseOrSuccinctDepositArgs = Partial<SuccinctDepositArgs & DepositArgs<string | number | BN>>;
export interface SuccinctPendingArgs<T = string | number | BN> {
    depositWei: [T, T];
    depositToken: [T, T];
    withdrawalWei: [T, T];
    withdrawalToken: [T, T];
    recipient: Address;
    timeout: number;
}
export declare type VerboseOrSuccinctPendingArgs = SuccinctPendingArgs | PendingArgs;
export declare type PartialVerboseOrSuccinctPendingArgs = Partial<SuccinctPendingArgs & PendingArgs<string | number | BN>>;
export declare type SuccinctWithdrawalArgs<T = string | number | BN> = SuccinctDepositArgs<T> & {
    exchangeRate: string;
    tokensToSell: T;
    weiToSell: T;
    withdrawalWei: [T, T];
    withdrawalTokenHub: T;
    recipient: Address;
    additionalWeiHubToUser: T;
    additionalTokenHubToUser: T;
};
export declare type VerboseOrSuccinctWithdrawalArgs = SuccinctWithdrawalArgs | WithdrawalArgs;
export declare type PartialVerboseOrSuccinctWithdrawalArgs = Partial<SuccinctWithdrawalArgs & WithdrawalArgs<string | number | BN>>;
export interface SuccinctPaymentArgs<T = string | number | BN> {
    recipient: 'user' | 'hub';
    amount: [T, T];
}
export declare type VerboseOrSuccinctPaymentArgs = SuccinctPaymentArgs | PaymentArgs;
export declare type PartialVerboseOrSuccinctPaymentArgs = Partial<SuccinctPaymentArgs & PaymentArgs<string | number | BN>>;
export interface SuccinctExchangeArgs<T = string | number | BN> {
    exchangeRate: string;
    seller: 'user' | 'hub';
    toSell: [T, T];
}
export declare type VerboseOrSuccinctExchangeArgs = SuccinctExchangeArgs | ExchangeArgs;
export declare type PartialVerboseOrSuccinctExchangeArgs = Partial<SuccinctExchangeArgs & ExchangeArgs<string | number | BN>>;
export declare type PartialArgsType = PartialVerboseOrSuccinctDepositArgs | PartialVerboseOrSuccinctWithdrawalArgs | PartialVerboseOrSuccinctPaymentArgs | PartialVerboseOrSuccinctExchangeArgs | PartialVerboseOrSuccinctPendingArgs;
export interface SuccinctCustodialBalanceRow<T = string | number | BN> {
    totalReceived: [T, T];
    totalWithdrawn: [T, T];
    balance: [T, T];
    user: string;
    sentWei: T;
}
export declare type VerboseOrSuccinctCustodialBalanceRow = SuccinctCustodialBalanceRow | CustodialBalanceRow;
export declare type PartialVerboseOrSuccinctCustodialBalanceRow = Partial<SuccinctCustodialBalanceRow & CustodialBalanceRow<string | number | BN>>;
export declare type SuccinctCreateCustodialWithdrawalOptions<T = string | number | BN> = CreateCustodialWithdrawalOptions<T>;
export declare type VerboseOrSuccinctCreateCustodialWithdrawalOptions = SuccinctCreateCustodialWithdrawalOptions | CreateCustodialWithdrawalOptions;
export declare type PartialVerboseOrSuccinctCreateCustodialWithdrawalOptions = Partial<SuccinctCreateCustodialWithdrawalOptions & CreateCustodialWithdrawalOptions<string | number | BN>>;
export declare type SuccinctCustodialWithdrawalRow<T = string | number | BN> = CustodialWithdrawalRow<T>;
export declare type VerboseOrSuccinctCustodialWithdrawalRow = SuccinctCustodialWithdrawalRow | CustodialWithdrawalRow;
export declare type PartialVerboseOrSuccinctCustodialWithdrawalRow = Partial<SuccinctCustodialWithdrawalRow & CustodialWithdrawalRow<string | number | BN>>;
export interface ExpandSuccinctChannelOverloaded {
    (s: SignedOrSuccinctChannel): ChannelState<string>;
    (s: PartialSignedOrSuccinctChannel): Partial<ChannelState<string>>;
}
export declare const expandSuccinctChannel: ExpandSuccinctChannelOverloaded;
export interface ExpandSuccinctThreadOverloaded {
    (s: SignedOrSuccinctThread): ThreadState<string>;
    (s: PartialSignedOrSuccinctThread): Partial<ThreadState<string>>;
}
export declare const expandSuccinctThread: ExpandSuccinctThreadOverloaded;
export interface ExpandSuccinctDepositArgsOverloaded {
    (s: VerboseOrSuccinctDepositArgs): DepositArgs<string>;
    (s: PartialVerboseOrSuccinctDepositArgs): Partial<DepositArgs<string>>;
}
export declare const expandSuccinctDepositArgs: ExpandSuccinctDepositArgsOverloaded;
export interface ExpandSuccinctWithdrawalArgsOverloaded {
    (s: VerboseOrSuccinctWithdrawalArgs): WithdrawalArgs<string>;
    (s: PartialVerboseOrSuccinctWithdrawalArgs): Partial<WithdrawalArgs<string>>;
}
export declare const expandSuccinctWithdrawalArgs: ExpandSuccinctWithdrawalArgsOverloaded;
export interface ExpandSuccinctPaymentArgsOverloaded {
    (s: VerboseOrSuccinctPaymentArgs): PaymentArgs<string>;
    (s: PartialVerboseOrSuccinctPaymentArgs): Partial<PaymentArgs<string>>;
}
export declare const expandSuccinctPaymentArgs: ExpandSuccinctPaymentArgsOverloaded;
export interface ExpandSuccinctExchangeArgsOverloaded {
    (s: VerboseOrSuccinctExchangeArgs): ExchangeArgs<string>;
    (s: PartialVerboseOrSuccinctExchangeArgs): Partial<ExchangeArgs<string>>;
}
export declare const expandSuccinctExchangeArgs: ExpandSuccinctExchangeArgsOverloaded;
export interface ExpandSuccinctPendingArgsOverloaded {
    (s: VerboseOrSuccinctPendingArgs): PendingArgs<string>;
    (s: PartialVerboseOrSuccinctPendingArgs): Partial<PendingArgs<string>>;
}
export declare const expandSuccinctPendingArgs: ExpandSuccinctPendingArgsOverloaded;
export interface ExpandSuccinctCustodialBalanceRowOverloaded {
    (s: VerboseOrSuccinctCustodialBalanceRow): CustodialBalanceRow<string>;
    (s: PartialVerboseOrSuccinctCustodialBalanceRow): Partial<CustodialBalanceRow<string>>;
}
export declare const expandSuccinctCustodialBalanceRow: (s: SuccinctCustodialBalanceRow<string | number | eth.utils.BigNumber> | Partial<CustodialBalanceRow<string>> | Partial<SuccinctCustodialBalanceRow<string | number | eth.utils.BigNumber>>) => any;
export interface MakeSuccinctChannelOverloaded {
    (s: SignedOrSuccinctChannel): SuccinctChannelState<string>;
    (s: PartialSignedOrSuccinctChannel): Partial<SuccinctChannelState<string>>;
}
export declare const makeSuccinctChannel: MakeSuccinctChannelOverloaded;
export interface MakeSuccinctThreadOverloaded {
    (s: SignedOrSuccinctThread): SuccinctThreadState<string>;
    (s: PartialSignedOrSuccinctThread): Partial<SuccinctThreadState<string>>;
}
export declare const makeSuccinctThread: MakeSuccinctThreadOverloaded;
export interface MakeSuccinctPendingOverloaded {
    (s: VerboseOrSuccinctPendingArgs): SuccinctPendingArgs<string>;
    (s: PartialVerboseOrSuccinctPendingArgs): Partial<SuccinctPendingArgs<string>>;
}
export declare const makeSuccinctPending: MakeSuccinctPendingOverloaded;
export interface MakeSuccinctDepositOverloaded {
    (s: VerboseOrSuccinctDepositArgs): SuccinctDepositArgs<string>;
    (s: PartialVerboseOrSuccinctDepositArgs): Partial<SuccinctDepositArgs<string>>;
}
export declare const makeSuccinctDeposit: MakeSuccinctDepositOverloaded;
export interface MakeSuccinctWithdrawalOverloaded {
    (s: VerboseOrSuccinctWithdrawalArgs): SuccinctWithdrawalArgs<string>;
    (s: PartialVerboseOrSuccinctWithdrawalArgs): Partial<SuccinctWithdrawalArgs<string>>;
}
export declare const makeSuccinctWithdrawal: MakeSuccinctWithdrawalOverloaded;
export interface MakeSuccinctPaymentOverloaded {
    (s: VerboseOrSuccinctPaymentArgs): SuccinctPaymentArgs<string>;
    (s: PartialVerboseOrSuccinctPaymentArgs): Partial<SuccinctPaymentArgs<string>>;
}
export declare const makeSuccinctPayment: MakeSuccinctPaymentOverloaded;
export interface MakeSuccinctExchangeOverloaded {
    (s: VerboseOrSuccinctExchangeArgs): SuccinctExchangeArgs<string>;
    (s: PartialVerboseOrSuccinctExchangeArgs): Partial<SuccinctExchangeArgs<string>>;
}
export declare const makeSuccinctExchange: MakeSuccinctExchangeOverloaded;
export interface MakeSuccinctCustodialBalanceRowOverloaded {
    (s: VerboseOrSuccinctCustodialBalanceRow): SuccinctCustodialBalanceRow<string>;
    (s: PartialVerboseOrSuccinctCustodialBalanceRow): Partial<SuccinctCustodialBalanceRow<string>>;
}
export declare const makeSuccinctCustodialBalanceRow: MakeSuccinctCustodialBalanceRowOverloaded;
export interface UpdateObjOverloaded {
    (type: 'channel', s: SignedOrSuccinctChannel, ...rest: PartialSignedOrSuccinctChannel[]): ChannelState<string>;
    (type: 'thread', s: SignedOrSuccinctThread, ...rest: PartialSignedOrSuccinctThread[]): ThreadState<string>;
    (type: 'ProposePendingDeposit', s: VerboseOrSuccinctDepositArgs, ...rest: PartialVerboseOrSuccinctDepositArgs[]): DepositArgs<string>;
    (type: 'ProposePendingWithdrawal', s: VerboseOrSuccinctWithdrawalArgs, ...rest: PartialVerboseOrSuccinctWithdrawalArgs[]): WithdrawalArgs<string>;
    (type: 'Payment', s: VerboseOrSuccinctPaymentArgs, ...rest: PartialVerboseOrSuccinctPaymentArgs[]): PaymentArgs<string>;
    (type: 'Exchange', s: VerboseOrSuccinctExchangeArgs, ...rest: PartialVerboseOrSuccinctExchangeArgs[]): ExchangeArgs<string>;
    (type: 'Pending', s: VerboseOrSuccinctPendingArgs, ...rest: PartialVerboseOrSuccinctPendingArgs[]): PendingArgs<string>;
    (type: 'custodialBalance', s: VerboseOrSuccinctCustodialBalanceRow, ...rest: PartialVerboseOrSuccinctCustodialBalanceRow[]): CustodialBalanceRow<string>;
}
export declare const updateObj: UpdateObjOverloaded;
export declare const getChannelState: (type: "unsigned" | "empty" | "full", ...overrides: (Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
    sigUser: string;
    sigHub: string;
}> | Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
    sigUser?: string | undefined;
    sigHub: string;
}> | Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
    sigUser: string;
    sigHub?: string | undefined;
}>)[]) => ChannelState<string>;
export declare const getThreadState: (type: "unsigned" | "empty" | "full", ...overrides: Partial<SuccinctThreadState<string | number | eth.utils.BigNumber> & import("../types").UnsignedThreadState<string | number | eth.utils.BigNumber> & {
    sigA: string;
}>[]) => ThreadState<string>;
export declare const getChannelStateUpdate: (reason: "Payment" | "Exchange" | "ProposePendingDeposit" | "ProposePendingWithdrawal" | "ConfirmPending" | "Invalidation" | "EmptyChannel" | "OpenThread" | "CloseThread", ...overrides: {
    channel: Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
        sigUser: string;
        sigHub: string;
    }> | Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
        sigUser?: string | undefined;
        sigHub: string;
    }> | Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
        sigUser: string;
        sigHub?: string | undefined;
    }>;
    args: PartialArgsType;
}[]) => ChannelStateUpdate<string>;
export declare const getPendingArgs: (type: string | number, ...overrides: Partial<SuccinctPendingArgs<string | number | eth.utils.BigNumber> & PendingArgs<string | number | eth.utils.BigNumber>>[]) => PendingArgs<string>;
export declare const getDepositArgs: (type: string | number, ...overrides: Partial<SuccinctDepositArgs<string | number | eth.utils.BigNumber> & DepositArgs<string | number | eth.utils.BigNumber>>[]) => DepositArgs<string>;
export declare const getWithdrawalArgs: (type: string | number, ...overrides: Partial<SuccinctDepositArgs<string | number | eth.utils.BigNumber> & {
    exchangeRate: string;
    tokensToSell: string | number | eth.utils.BigNumber;
    weiToSell: string | number | eth.utils.BigNumber;
    withdrawalWei: [string | number | eth.utils.BigNumber, string | number | eth.utils.BigNumber];
    withdrawalTokenHub: string | number | eth.utils.BigNumber;
    recipient: string;
    additionalWeiHubToUser: string | number | eth.utils.BigNumber;
    additionalTokenHubToUser: string | number | eth.utils.BigNumber;
} & WithdrawalArgs<string | number | eth.utils.BigNumber>>[]) => WithdrawalArgs<string>;
export declare const getPaymentArgs: (type: string | number, ...overrides: Partial<SuccinctPaymentArgs<string | number | eth.utils.BigNumber> & PaymentArgs<string | number | eth.utils.BigNumber>>[]) => PaymentArgs<string>;
export declare const getExchangeArgs: (type: string | number, ...overrides: Partial<SuccinctExchangeArgs<string | number | eth.utils.BigNumber> & ExchangeArgs<string | number | eth.utils.BigNumber>>[]) => ExchangeArgs<string>;
export declare const getCustodialBalance: (type: string | number, ...overrides: Partial<SuccinctCustodialBalanceRow<string | number | eth.utils.BigNumber> & CustodialBalanceRow<string | number | eth.utils.BigNumber>>[]) => CustodialBalanceRow<string>;
export declare const assertChannelStateEqual: (actual: ChannelState<string>, expected: Partial<import("../types").UnsignedChannelState<string> & {
    sigUser: string;
    sigHub: string;
}> | Partial<import("../types").UnsignedChannelState<string> & {
    sigUser?: string | undefined;
    sigHub: string;
}> | Partial<import("../types").UnsignedChannelState<string> & {
    sigUser: string;
    sigHub?: string | undefined;
}> | Partial<SuccinctChannelState<string | number | eth.utils.BigNumber>>) => void;
export declare const assertThreadStateEqual: (actual: ThreadState<string>, expected: Partial<ThreadState<string>> | Partial<SuccinctThreadState<string | number | eth.utils.BigNumber>>) => void;
export declare const assertCustodialBalancesEqual: (actual: CustodialBalanceRow<string>, expected: Partial<CustodialBalanceRow<string>> | Partial<SuccinctCustodialBalanceRow<string | number | eth.utils.BigNumber>>) => void;
export declare const updateStateUpdate: (stateUpdate: ChannelStateUpdate<string>, ...rest: (Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
    sigUser: string;
    sigHub: string;
}> | Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
    sigUser?: string | undefined;
    sigHub: string;
}> | Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
    sigUser: string;
    sigHub?: string | undefined;
}>)[]) => ChannelStateUpdate<string>;
export interface TestParamType {
    update: ChannelStateUpdate;
    prev: ChannelState;
}
export declare const generateParams: (reason: "Payment" | "Exchange" | "ProposePendingDeposit" | "ProposePendingWithdrawal" | "ConfirmPending" | "Invalidation" | "EmptyChannel" | "OpenThread" | "CloseThread", ...overrides: Partial<{
    args: PartialArgsType;
    prev: Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
        sigUser: string;
        sigHub: string;
    }> | Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
        sigUser?: string | undefined;
        sigHub: string;
    }> | Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
        sigUser: string;
        sigHub?: string | undefined;
    }>;
    curr: Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
        sigUser: string;
        sigHub: string;
    }> | Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
        sigUser?: string | undefined;
        sigHub: string;
    }> | Partial<SuccinctChannelState<string | number | eth.utils.BigNumber> & import("../types").UnsignedChannelState<string | number | eth.utils.BigNumber> & {
        sigUser: string;
        sigHub?: string | undefined;
    }>;
}>[]) => TestParamType;
export declare const parameterizedTests: <TestInput>(inputs: (TestInput & {
    name: string;
})[], func: (input: TestInput) => any) => any;
