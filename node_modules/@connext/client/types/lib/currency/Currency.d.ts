import { BigNumber } from 'bignumber.js';
import { BigNumber as BN } from 'ethers/utils';
import { CurrencyType } from '../../types';
export interface CurrencyFormatOptions {
    decimals?: number;
    withSymbol?: boolean;
    showTrailingZeros?: boolean;
    takeFloor?: boolean;
}
export interface ICurrency<ThisType extends CurrencyType = any> {
    type: ThisType;
    amount: string;
}
export declare type CmpType = 'lt' | 'lte' | 'gt' | 'gte' | 'eq';
export default class Currency<ThisType extends CurrencyType = any> implements ICurrency<ThisType> {
    static typeToSymbol: {
        [key: string]: string;
    };
    static ETH: (amount: string | number | BigNumber | BN) => Currency<"ETH">;
    static USD: (amount: string | number | BigNumber | BN) => Currency<"USD">;
    static WEI: (amount: string | number | BigNumber | BN) => Currency<"WEI">;
    static FIN: (amount: string | number | BigNumber | BN) => Currency<"FINNEY">;
    static BOOTY: (amount: string | number | BigNumber | BN) => Currency<"BOOTY">;
    static BEI: (amount: string | number | BigNumber | BN) => Currency<"BEI">;
    static equals: (c1: ICurrency<any>, c2: ICurrency<any>) => boolean;
    private _type;
    private _amount;
    static _defaultOptions: {
        "USD": CurrencyFormatOptions;
        "ETH": CurrencyFormatOptions;
        "WEI": CurrencyFormatOptions;
        "FINNEY": CurrencyFormatOptions;
        "BOOTY": CurrencyFormatOptions;
        "BEI": CurrencyFormatOptions;
    };
    constructor(currency: ICurrency<ThisType>);
    constructor(type: ThisType, amount: BN | BigNumber | string | number);
    readonly type: ThisType;
    readonly symbol: string;
    readonly currency: ICurrency;
    readonly amount: string;
    readonly amountBigNumber: BigNumber;
    readonly amountBN: BN;
    toFixed(): string;
    getDecimalString: (decimals?: number | undefined) => string;
    format: (_options?: CurrencyFormatOptions | undefined) => string;
    floor: () => Currency<any>;
    toString(): string;
    compare(cmp: CmpType, b: Currency<ThisType> | string, bType?: CurrencyType): boolean;
}
