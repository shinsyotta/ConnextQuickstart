"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const enums_1 = require("../machine/enums");
const install_1 = require("./install");
exports.INSTALL_PROTOCOL = install_1.INSTALL_PROTOCOL;
const install_virtual_app_1 = require("./install-virtual-app");
exports.INSTALL_VIRTUAL_APP_PROTOCOL = install_virtual_app_1.INSTALL_VIRTUAL_APP_PROTOCOL;
const propose_1 = require("./propose");
exports.PROPOSE_PROTOCOL = propose_1.PROPOSE_PROTOCOL;
const setup_1 = require("./setup");
exports.SETUP_PROTOCOL = setup_1.SETUP_PROTOCOL;
const take_action_1 = require("./take-action");
exports.TAKE_ACTION_PROTOCOL = take_action_1.TAKE_ACTION_PROTOCOL;
const uninstall_1 = require("./uninstall");
exports.UNINSTALL_PROTOCOL = uninstall_1.UNINSTALL_PROTOCOL;
const uninstall_virtual_app_1 = require("./uninstall-virtual-app");
const update_1 = require("./update");
exports.UPDATE_PROTOCOL = update_1.UPDATE_PROTOCOL;
const withdraw_1 = require("./withdraw");
exports.WITHDRAW_PROTOCOL = withdraw_1.WITHDRAW_PROTOCOL;
const protocolsByName = {
    [enums_1.Protocol.Install]: install_1.INSTALL_PROTOCOL,
    [enums_1.Protocol.InstallVirtualApp]: install_virtual_app_1.INSTALL_VIRTUAL_APP_PROTOCOL,
    [enums_1.Protocol.Propose]: propose_1.PROPOSE_PROTOCOL,
    [enums_1.Protocol.Setup]: setup_1.SETUP_PROTOCOL,
    [enums_1.Protocol.TakeAction]: take_action_1.TAKE_ACTION_PROTOCOL,
    [enums_1.Protocol.Uninstall]: uninstall_1.UNINSTALL_PROTOCOL,
    [enums_1.Protocol.UninstallVirtualApp]: uninstall_virtual_app_1.UNINSTALL_VIRTUAL_APP_PROTOCOL,
    [enums_1.Protocol.Update]: update_1.UPDATE_PROTOCOL,
    [enums_1.Protocol.Withdraw]: withdraw_1.WITHDRAW_PROTOCOL
};
function getProtocolFromName(protocolName) {
    if (!(protocolName in protocolsByName)) {
        throw Error(`Received invalid protocol type ${protocolName}`);
    }
    return protocolsByName[protocolName];
}
exports.getProtocolFromName = getProtocolFromName;
//# sourceMappingURL=index.js.map