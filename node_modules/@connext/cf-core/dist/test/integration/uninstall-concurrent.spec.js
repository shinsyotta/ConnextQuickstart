"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const utils_1 = require("ethers/utils");
const constants_2 = require("../../src/constants");
const bignumber_jest_matcher_1 = require("../machine/integration/bignumber-jest-matcher");
const setup_1 = require("./setup");
const utils_2 = require("./utils");
expect.extend({ toBeLt: bignumber_jest_matcher_1.toBeLt });
jest.setTimeout(7500);
const { TicTacToeApp } = global["networkContext"];
describe("Node method follows spec - uninstall", () => {
    let multisigAddress;
    let nodeA;
    let nodeB;
    describe("Should be able to successfully uninstall apps concurrently", () => {
        beforeEach(async () => {
            const context = await setup_1.setup(global);
            nodeA = context["A"].node;
            nodeB = context["B"].node;
            multisigAddress = await utils_2.createChannel(nodeA, nodeB);
        });
        it("uninstall apps with ETH concurrently", async (done) => {
            const appIds = [];
            let uninstalledApps = 0;
            await utils_2.collateralizeChannel(multisigAddress, nodeA, nodeB, utils_1.parseEther("2"));
            nodeB.on("PROPOSE_INSTALL_EVENT", (msg) => {
                utils_2.makeInstallCall(nodeB, msg.data.appInstanceId);
            });
            nodeA.on("INSTALL_EVENT", (msg) => {
                appIds.push(msg.data.params.appInstanceId);
            });
            const proposeRpc = utils_2.makeProposeCall(nodeB, TicTacToeApp, undefined, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS);
            nodeA.rpcRouter.dispatch(proposeRpc);
            nodeA.rpcRouter.dispatch(proposeRpc);
            while (appIds.length !== 2) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            nodeA.rpcRouter.dispatch(utils_2.constructUninstallRpc(appIds[0]));
            nodeA.rpcRouter.dispatch(utils_2.constructUninstallRpc(appIds[1]));
            nodeB.on("UNINSTALL_EVENT", (msg) => {
                expect(appIds.includes(msg.data.appInstanceId)).toBe(true);
                uninstalledApps += 1;
                if (uninstalledApps === 2)
                    done();
            });
        });
    });
});
//# sourceMappingURL=uninstall-concurrent.spec.js.map