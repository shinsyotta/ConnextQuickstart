'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('ethers/utils');
var cfTypes = require('@connext/cf-types');
var constants = require('ethers/constants');

const SupportedApplications = {
    CoinBalanceRefundApp: "CoinBalanceRefundApp",
    SimpleLinkedTransferApp: "SimpleLinkedTransferApp",
    SimpleTransferApp: "SimpleTransferApp",
    SimpleTwoPartySwapApp: "SimpleTwoPartySwapApp",
};
const SupportedNetworks = {
    ganache: "ganache",
    goerli: "goerli",
    homestead: "homestead",
    kovan: "kovan",
    rinkeby: "rinkeby",
    ropsten: "ropsten",
};
(function (UnidirectionalTransferAppActionType) {
    UnidirectionalTransferAppActionType[UnidirectionalTransferAppActionType["SEND_MONEY"] = 0] = "SEND_MONEY";
    UnidirectionalTransferAppActionType[UnidirectionalTransferAppActionType["END_CHANNEL"] = 1] = "END_CHANNEL";
})(exports.UnidirectionalTransferAppActionType || (exports.UnidirectionalTransferAppActionType = {}));
(function (UnidirectionalTransferAppStage) {
    UnidirectionalTransferAppStage[UnidirectionalTransferAppStage["POST_FUND"] = 0] = "POST_FUND";
    UnidirectionalTransferAppStage[UnidirectionalTransferAppStage["MONEY_SENT"] = 1] = "MONEY_SENT";
    UnidirectionalTransferAppStage[UnidirectionalTransferAppStage["CHANNEL_CLOSED"] = 2] = "CHANNEL_CLOSED";
})(exports.UnidirectionalTransferAppStage || (exports.UnidirectionalTransferAppStage = {}));
(function (UnidirectionalLinkedTransferAppStage) {
    UnidirectionalLinkedTransferAppStage[UnidirectionalLinkedTransferAppStage["POST_FUND"] = 0] = "POST_FUND";
    UnidirectionalLinkedTransferAppStage[UnidirectionalLinkedTransferAppStage["PAYMENT_CLAIMED"] = 1] = "PAYMENT_CLAIMED";
    UnidirectionalLinkedTransferAppStage[UnidirectionalLinkedTransferAppStage["CHANNEL_CLOSED"] = 2] = "CHANNEL_CLOSED";
})(exports.UnidirectionalLinkedTransferAppStage || (exports.UnidirectionalLinkedTransferAppStage = {}));

const CF_PATH = "m/44'/60'/0'/25446";

const BigNumber = utils.BigNumber;
const ConnextEvents = Object.assign({}, cfTypes.Node.EventNames, { RECIEVE_TRANSFER_FAILED_EVENT: "RECIEVE_TRANSFER_FAILED_EVENT", RECIEVE_TRANSFER_FINISHED_EVENT: "RECIEVE_TRANSFER_FINISHED_EVENT", RECIEVE_TRANSFER_STARTED_EVENT: "RECIEVE_TRANSFER_STARTED_EVENT" });
const ConnextNodeStorePrefix = "INDRA_NODE_CF_CORE";
const ConnextClientStorePrefix = "INDRA_CLIENT_CF_CORE";

(function (RpcType) {
    RpcType["ChannelProvider"] = "ChannelProvider";
    RpcType["CounterfactualNode"] = "CounterfactualNode";
})(exports.RpcType || (exports.RpcType = {}));

const getType = (input) => {
    if (typeof input === "string")
        return "str";
    if (utils.BigNumber.isBigNumber(input))
        return "bignumber";
    if (typeof input === "number")
        return "number";
    throw new Error(`Unknown input type: ${typeof input}, value: ${JSON.stringify(input)}`);
};
const castFunctions = {
    "bignumber-str": (x) => x.toString(),
    "number-bignumber": (x) => new utils.BigNumber(x),
    "number-str": (x) => x.toString(),
    "str-bignumber": (x) => new utils.BigNumber(x),
};
const convertFields = (fromType, toType, fields, input) => {
    if (fromType === toType)
        return input;
    if (toType === "number") {
        throw new Error("Should not convert fields to numbers");
    }
    let key;
    if (fromType === "number" && toType === "str") {
        key = `bignumber-str`;
    }
    else if (fromType === "number") {
        key = `str-${toType}`;
    }
    const cast = castFunctions[key || [fromType, toType].join("-")];
    if (!cast)
        throw new Error(`No castFunc for ${fromType} -> ${toType}`);
    const res = Object.assign({}, input);
    for (const field of fields) {
        const name = field.split("?")[0];
        const isOptional = field.endsWith("?");
        if (isOptional && !(name in input))
            continue;
        res[name] = cast(input[name]);
    }
    return res;
};
function makeChecksum(address) {
    try {
        return utils.getAddress(address);
    }
    catch (e) {
        console.log(`Caught error converting address, returning original input value (${address}). Error: ${JSON.stringify(e, null, 2)}`);
        return address;
    }
}
function makeChecksumOrEthAddress(address) {
    if (!address) {
        return constants.AddressZero;
    }
    return makeChecksum(address);
}
function convertAmountField(to, obj) {
    const fromType = getType(obj.amount);
    return convertFields(fromType, to, ["amount"], obj);
}
function convertAssetAmount(to, obj) {
    return convertAmountField(to, obj);
}
function convertAssetAmountWithId(to, obj) {
    const asset = Object.assign({}, obj, { assetId: makeChecksumOrEthAddress(obj.assetId) });
    return convertAssetAmount(to, asset);
}
function convertPaymentProfile(to, obj) {
    const fromType = getType(obj.amountToCollateralize);
    return convertFields(fromType, to, ["amountToCollateralize", "minimumMaintainedCollateral"], obj);
}
function convertCoinBalanceRefund(to, obj) {
    const fromType = getType(obj.threshold);
    return convertFields(fromType, to, ["threshold"], obj);
}
function convertDepositParametersToAsset(to, obj) {
    return convertAssetAmountWithId(to, obj);
}
function convertSwapParameters(to, obj) {
    const asset = Object.assign({}, obj, { fromAssetId: makeChecksumOrEthAddress(obj.fromAssetId), toAssetId: makeChecksumOrEthAddress(obj.toAssetId) });
    return convertAmountField(to, asset);
}
function convertTransferParametersToAsset(to, obj) {
    return convertAssetAmountWithId(to, obj);
}
function convertLinkedTransferParametersToAsset(to, obj) {
    return convertAssetAmountWithId(to, obj);
}
function convertLinkedTransferToRecipientParametersToAsset(to, obj) {
    return convertAssetAmountWithId(to, obj);
}
function convertWithdrawParametersToAsset(to, obj) {
    return convertAssetAmountWithId(to, obj);
}
function convertAppState(to, obj) {
    return Object.assign({}, obj, { coinTransfers: [
            convertAmountField(to, obj.coinTransfers[0]),
            convertAmountField(to, obj.coinTransfers[1]),
        ] });
}
function convertLinkedTransferAppState(to, obj) {
    return Object.assign({}, convertAmountField(to, obj), { coinTransfers: [
            convertAmountField(to, obj.coinTransfers[0]),
            convertAmountField(to, obj.coinTransfers[1]),
        ] });
}
const convert = {
    AppState: convertAppState,
    Asset: convertAssetAmount,
    CoinBalanceRefundApp: convertCoinBalanceRefund,
    Deposit: convertDepositParametersToAsset,
    LinkedTransfer: convertLinkedTransferParametersToAsset,
    LinkedTransferAppState: convertLinkedTransferAppState,
    LinkedTransferToRecipient: convertLinkedTransferToRecipientParametersToAsset,
    PaymentProfile: convertPaymentProfile,
    ResolveLinkedTransfer: convertAssetAmountWithId,
    SimpleTransferAppState: convertAppState,
    SwapAppState: convertAppState,
    SwapParameters: convertSwapParameters,
    Transfer: convertAssetAmount,
    TransferParameters: convertTransferParametersToAsset,
    Withdraw: convertWithdrawParametersToAsset,
};

const TransferConditions = {
    LINKED_TRANSFER: "LINKED_TRANSFER",
    LINKED_TRANSFER_TO_RECIPIENT: "LINKED_TRANSFER_TO_RECIPIENT",
};

Object.defineProperty(exports, 'CFCoreTypes', {
  enumerable: true,
  get: function () {
    return cfTypes.Node;
  }
});
Object.defineProperty(exports, 'EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT', {
  enumerable: true,
  get: function () {
    return cfTypes.EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT;
  }
});
Object.defineProperty(exports, 'Node', {
  enumerable: true,
  get: function () {
    return cfTypes.Node;
  }
});
Object.defineProperty(exports, 'OutcomeType', {
  enumerable: true,
  get: function () {
    return cfTypes.OutcomeType;
  }
});
Object.defineProperty(exports, 'TwoPartyFixedOutcome', {
  enumerable: true,
  get: function () {
    return cfTypes.TwoPartyFixedOutcome;
  }
});
Object.defineProperty(exports, 'coinBalanceRefundStateEncoding', {
  enumerable: true,
  get: function () {
    return cfTypes.coinBalanceRefundStateEncoding;
  }
});
Object.defineProperty(exports, 'multiAssetMultiPartyCoinTransferEncoding', {
  enumerable: true,
  get: function () {
    return cfTypes.multiAssetMultiPartyCoinTransferEncoding;
  }
});
Object.defineProperty(exports, 'multiAssetMultiPartyCoinTransferInterpreterParamsEncoding', {
  enumerable: true,
  get: function () {
    return cfTypes.multiAssetMultiPartyCoinTransferInterpreterParamsEncoding;
  }
});
Object.defineProperty(exports, 'singleAssetTwoPartyCoinTransferInterpreterParamsEncoding', {
  enumerable: true,
  get: function () {
    return cfTypes.singleAssetTwoPartyCoinTransferInterpreterParamsEncoding;
  }
});
Object.defineProperty(exports, 'twoPartyFixedOutcomeInterpreterParamsEncoding', {
  enumerable: true,
  get: function () {
    return cfTypes.twoPartyFixedOutcomeInterpreterParamsEncoding;
  }
});
Object.defineProperty(exports, 'virtualAppAgreementEncoding', {
  enumerable: true,
  get: function () {
    return cfTypes.virtualAppAgreementEncoding;
  }
});
exports.BigNumber = BigNumber;
exports.CF_PATH = CF_PATH;
exports.ConnextClientStorePrefix = ConnextClientStorePrefix;
exports.ConnextEvents = ConnextEvents;
exports.ConnextNodeStorePrefix = ConnextNodeStorePrefix;
exports.SupportedApplications = SupportedApplications;
exports.SupportedNetworks = SupportedNetworks;
exports.TransferConditions = TransferConditions;
exports.convert = convert;
exports.convertAmountField = convertAmountField;
exports.convertAppState = convertAppState;
exports.convertAssetAmount = convertAssetAmount;
exports.convertAssetAmountWithId = convertAssetAmountWithId;
exports.convertCoinBalanceRefund = convertCoinBalanceRefund;
exports.convertDepositParametersToAsset = convertDepositParametersToAsset;
exports.convertFields = convertFields;
exports.convertLinkedTransferAppState = convertLinkedTransferAppState;
exports.convertLinkedTransferParametersToAsset = convertLinkedTransferParametersToAsset;
exports.convertLinkedTransferToRecipientParametersToAsset = convertLinkedTransferToRecipientParametersToAsset;
exports.convertPaymentProfile = convertPaymentProfile;
exports.convertSwapParameters = convertSwapParameters;
exports.convertTransferParametersToAsset = convertTransferParametersToAsset;
exports.convertWithdrawParametersToAsset = convertWithdrawParametersToAsset;
exports.makeChecksum = makeChecksum;
exports.makeChecksumOrEthAddress = makeChecksumOrEthAddress;
