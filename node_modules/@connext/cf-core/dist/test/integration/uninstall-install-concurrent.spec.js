"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const utils_1 = require("ethers/utils");
const constants_2 = require("../../src/constants");
const bignumber_jest_matcher_1 = require("../machine/integration/bignumber-jest-matcher");
const setup_1 = require("./setup");
const utils_2 = require("./utils");
expect.extend({ toBeLt: bignumber_jest_matcher_1.toBeLt });
jest.setTimeout(7500);
const { TicTacToeApp } = global["networkContext"];
describe("Node method follows spec when happening concurrently - install / uninstall", () => {
    let multisigAddress;
    let nodeA;
    let nodeB;
    let installedAppInstanceId;
    let installCall;
    describe("NodeA can uninstall and install an app with nodeB concurrently", () => {
        beforeEach(async () => {
            const context = await setup_1.setup(global);
            nodeA = context["A"].node;
            nodeB = context["B"].node;
            multisigAddress = await utils_2.createChannel(nodeA, nodeB);
            await utils_2.collateralizeChannel(multisigAddress, nodeA, nodeB, utils_1.parseEther("2"));
            installCall = utils_2.makeProposeCall(nodeB, TicTacToeApp, undefined, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS);
            installedAppInstanceId = await new Promise(async (resolve) => {
                nodeB.once("PROPOSE_INSTALL_EVENT", (msg) => {
                    utils_2.makeInstallCall(nodeB, msg.data.appInstanceId);
                });
                nodeA.once("INSTALL_EVENT", (msg) => {
                    resolve(msg.data.params.appInstanceId);
                });
                await nodeA.rpcRouter.dispatch(installCall);
            });
        });
        it("install app with ETH then uninstall and install apps simultaneously from the same node", async (done) => {
            let completedActions = 0;
            nodeB.once("PROPOSE_INSTALL_EVENT", (msg) => utils_2.makeInstallCall(nodeB, msg.data.appInstanceId));
            nodeA.once("INSTALL_EVENT", () => {
                completedActions += 1;
                if (completedActions === 2)
                    done();
            });
            nodeB.once("UNINSTALL_EVENT", () => {
                completedActions += 1;
                if (completedActions === 2)
                    done();
            });
            const installCall = utils_2.makeProposeCall(nodeB, TicTacToeApp, undefined, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS);
            nodeA.rpcRouter.dispatch(installCall);
            nodeA.rpcRouter.dispatch(utils_2.constructUninstallRpc(installedAppInstanceId));
        });
        it("install app with ETH then uninstall and install apps simultaneously from separate nodes", async (done) => {
            let completedActions = 0;
            nodeB.once("PROPOSE_INSTALL_EVENT", (msg) => utils_2.makeInstallCall(nodeB, msg.data.appInstanceId));
            nodeA.once("INSTALL_EVENT", () => {
                completedActions += 1;
                if (completedActions === 2)
                    done();
            });
            nodeA.once("UNINSTALL_EVENT", () => {
                completedActions += 1;
                if (completedActions === 2)
                    done();
            });
            const installCall = utils_2.makeProposeCall(nodeB, TicTacToeApp, undefined, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS);
            nodeA.rpcRouter.dispatch(installCall);
            nodeB.rpcRouter.dispatch(utils_2.constructUninstallRpc(installedAppInstanceId));
        });
    });
});
//# sourceMappingURL=uninstall-install-concurrent.spec.js.map