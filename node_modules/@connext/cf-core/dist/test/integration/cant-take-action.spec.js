"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src");
const setup_1 = require("./setup");
const utils_1 = require("./utils");
const { TicTacToeApp } = global["networkContext"];
describe("Node method follows spec - fails with improper action taken", () => {
    let nodeA;
    let nodeB;
    beforeAll(async () => {
        const context = await setup_1.setup(global);
        nodeA = context["A"].node;
        nodeB = context["B"].node;
    });
    describe("Node A and B install an AppInstance, Node A takes invalid action", () => {
        it("can't take invalid action", async () => {
            const validAction = {
                actionType: 1,
                playX: 0,
                playY: 0,
                winClaim: {
                    winClaimType: 0,
                    idx: 0
                }
            };
            await utils_1.createChannel(nodeA, nodeB);
            const [appInstanceId] = await utils_1.installApp(nodeA, nodeB, TicTacToeApp);
            const takeActionReq = utils_1.constructTakeActionRpc(appInstanceId, validAction);
            await expect(nodeA.rpcRouter.dispatch(takeActionReq)).rejects.toThrowError(src_1.INVALID_ACTION);
        });
    });
});
//# sourceMappingURL=cant-take-action.spec.js.map