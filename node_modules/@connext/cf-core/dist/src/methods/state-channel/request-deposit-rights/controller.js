"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const constants_1 = require("ethers/constants");
const rpc_server_1 = require("rpc-server");
const constants_2 = require("../../../constants");
const contracts_1 = require("../../../contracts");
const machine_1 = require("../../../machine");
const types_1 = require("../../../types");
const utils_1 = require("../../../utils");
const controller_1 = require("../../controller");
const errors_1 = require("../../errors");
const operation_1 = require("../deposit/operation");
class RequestDepositRightsController extends controller_1.NodeController {
    constructor() {
        super(...arguments);
        this.executeMethod = super.executeMethod;
    }
    async getRequiredLockNames(requestHandler, params) {
        return [params.multisigAddress];
    }
    async beforeExecution(requestHandler, params) {
        const { store, provider, networkContext } = requestHandler;
        const { multisigAddress } = params;
        const channel = await store.getStateChannel(multisigAddress);
        if (!channel.proxyFactoryAddress) {
            throw Error(errors_1.INVALID_FACTORY_ADDRESS(channel.proxyFactoryAddress));
        }
        const expectedMultisigAddress = await utils_1.getCreate2MultisigAddress(channel.userNeuteredExtendedKeys, channel.proxyFactoryAddress, networkContext.MinimumViableMultisig, provider);
        if (expectedMultisigAddress !== channel.multisigAddress) {
            throw Error(errors_1.INCORRECT_MULTISIG_ADDRESS);
        }
    }
    async executeMethodImplementation(requestHandler, params) {
        const { provider, store, networkContext, publicIdentifier } = requestHandler;
        const { multisigAddress, tokenAddress } = params;
        params.tokenAddress = tokenAddress || constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS;
        const freeBalanceAddress = machine_1.xkeyKthAddress(publicIdentifier, 0);
        const channel = await store.getStateChannel(multisigAddress);
        let multisigBalance;
        if (params.tokenAddress === constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS) {
            multisigBalance = await provider.getBalance(multisigAddress);
        }
        else {
            const erc20Contract = new ethers_1.Contract(tokenAddress, contracts_1.ERC20.abi, provider);
            multisigBalance = await erc20Contract.balanceOf(multisigAddress);
        }
        if (channel.hasBalanceRefundAppInstance(networkContext.CoinBalanceRefundApp, params.tokenAddress)) {
            const balanceRefundApp = channel.getBalanceRefundAppInstance(networkContext.CoinBalanceRefundApp, params.tokenAddress);
            const appIsCorrectlyInstalled = balanceRefundApp.latestState["recipient"] === freeBalanceAddress &&
                multisigBalance.eq(balanceRefundApp.latestState["threshold"]);
            if (appIsCorrectlyInstalled) {
                return {
                    freeBalance: channel
                        .getFreeBalanceClass()
                        .withTokenAddress(params.tokenAddress),
                    recipient: freeBalanceAddress,
                    tokenAddress: params.tokenAddress
                };
            }
            await operation_1.uninstallBalanceRefundApp(requestHandler, Object.assign({}, params, { amount: constants_1.Zero }));
        }
        await operation_1.installBalanceRefundApp(requestHandler, Object.assign({}, params, { amount: constants_1.Zero }));
        return {
            freeBalance: channel
                .getFreeBalanceClass()
                .withTokenAddress(params.tokenAddress),
            recipient: freeBalanceAddress,
            tokenAddress: params.tokenAddress
        };
    }
}
__decorate([
    rpc_server_1.jsonRpcMethod(types_1.CFCoreTypes.RpcMethodNames.chan_requestDepositRights),
    __metadata("design:type", Function)
], RequestDepositRightsController.prototype, "executeMethod", void 0);
exports.default = RequestDepositRightsController;
//# sourceMappingURL=controller.js.map