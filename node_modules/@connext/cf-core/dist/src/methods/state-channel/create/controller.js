"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_server_1 = require("rpc-server");
const types_1 = require("../../../types");
const controller_1 = require("../../controller");
const machine_1 = require("../../../machine");
class CreateChannelController extends controller_1.NodeController {
    constructor() {
        super(...arguments);
        this.executeMethod = super.executeMethod;
    }
    async getRequiredLockNames(requestHandler, params) {
        return [`${types_1.CFCoreTypes.RpcMethodNames.chan_create}:${params.owners.sort().toString()}`];
    }
    async executeMethodImplementation(requestHandler, params) {
        const { owners } = params;
        const { networkContext, store } = requestHandler;
        const multisigAddress = await store.getMultisigAddressWithCounterparty(owners, networkContext.ProxyFactory, networkContext.MinimumViableMultisig, networkContext.provider);
        if (!(await store.hasStateChannel(multisigAddress))) {
            await this.setupAndCreateChannel(multisigAddress, requestHandler, params);
        }
        return { multisigAddress };
    }
    async setupAndCreateChannel(multisigAddress, requestHandler, params) {
        const { owners } = params;
        const { publicIdentifier, protocolRunner, outgoing, store } = requestHandler;
        const [responderXpub] = owners.filter(x => x !== publicIdentifier);
        await protocolRunner.runSetupProtocol({
            multisigAddress,
            responderXpub,
            initiatorXpub: publicIdentifier
        });
        const addressOwners = machine_1.xkeysToSortedKthAddresses(owners, 0);
        const msg = {
            from: publicIdentifier,
            type: "CREATE_CHANNEL_EVENT",
            data: {
                multisigAddress,
                owners: addressOwners,
                counterpartyXpub: responderXpub
            }
        };
        outgoing.emit("CREATE_CHANNEL_EVENT", msg);
    }
}
__decorate([
    rpc_server_1.jsonRpcMethod(types_1.CFCoreTypes.RpcMethodNames.chan_create),
    __metadata("design:type", Object)
], CreateChannelController.prototype, "executeMethod", void 0);
exports.default = CreateChannelController;
//# sourceMappingURL=controller.js.map