export const multiAssetMultiPartyCoinTransferInterpreterParamsEncoding = `tuple(uint256[] limit, address[] tokenAddresses)`;
export const singleAssetTwoPartyCoinTransferInterpreterParamsEncoding = `tuple(uint256 limit, address tokenAddress)`;
export const twoPartyFixedOutcomeInterpreterParamsEncoding = `tuple(address[2] playerAddrs, uint256 amount)`;
export const virtualAppAgreementEncoding = `tuple(uint256 capitalProvided, address capitalProvider, address virtualAppUser, address tokenAddress)`;
export const multiAssetMultiPartyCoinTransferEncoding = `tuple(address to, uint256 amount)[][]`;
export const coinBalanceRefundStateEncoding = `tuple(address recipient, address multisig, uint256 threshold, address tokenAddress)`;
export var OutcomeType;
(function (OutcomeType) {
    OutcomeType["TWO_PARTY_FIXED_OUTCOME"] = "TWO_PARTY_FIXED_OUTCOME";
    OutcomeType["MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER"] = "MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER";
    OutcomeType["SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER"] = "SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER";
})(OutcomeType || (OutcomeType = {}));
export var TwoPartyFixedOutcome;
(function (TwoPartyFixedOutcome) {
    TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_ONE"] = 0] = "SEND_TO_ADDR_ONE";
    TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_TWO"] = 1] = "SEND_TO_ADDR_TWO";
    TwoPartyFixedOutcome[TwoPartyFixedOutcome["SPLIT_AND_SEND_TO_BOTH_ADDRS"] = 2] = "SPLIT_AND_SEND_TO_BOTH_ADDRS";
})(TwoPartyFixedOutcome || (TwoPartyFixedOutcome = {}));
//# sourceMappingURL=data-types.js.map