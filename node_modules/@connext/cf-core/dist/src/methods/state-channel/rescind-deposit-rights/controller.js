"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const rpc_server_1 = require("rpc-server");
const constants_2 = require("../../../constants");
const contracts_1 = require("../../../contracts");
const types_1 = require("../../../types");
const controller_1 = require("../../controller");
const operation_1 = require("../deposit/operation");
const ethers_1 = require("ethers");
class RescindDepositRightsController extends controller_1.NodeController {
    constructor() {
        super(...arguments);
        this.executeMethod = super.executeMethod;
    }
    async getRequiredLockNames(requestHandler, params) {
        return [params.multisigAddress];
    }
    async beforeExecution() { }
    async executeMethodImplementation(requestHandler, params) {
        const { provider, store, networkContext } = requestHandler;
        const { multisigAddress } = params;
        const tokenAddress = params.tokenAddress || constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS;
        let multisigBalance;
        if (tokenAddress === constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS) {
            multisigBalance = await provider.getBalance(multisigAddress);
        }
        else {
            const erc20Contract = new ethers_1.Contract(tokenAddress, contracts_1.ERC20.abi, provider);
            multisigBalance = await erc20Contract.balanceOf(multisigAddress);
        }
        const channel = await store.getStateChannel(multisigAddress);
        if (!channel.hasAppInstanceOfKind(networkContext.CoinBalanceRefundApp)) {
            return {
                multisigBalance,
                tokenAddress
            };
        }
        await operation_1.uninstallBalanceRefundApp(requestHandler, Object.assign({}, params, { tokenAddress, amount: constants_1.Zero }), await provider.getBlockNumber());
        return {
            multisigBalance,
            tokenAddress
        };
    }
}
__decorate([
    rpc_server_1.jsonRpcMethod(types_1.CFCoreTypes.RpcMethodNames.chan_rescindDepositRights),
    __metadata("design:type", Function)
], RescindDepositRightsController.prototype, "executeMethod", void 0);
exports.default = RescindDepositRightsController;
//# sourceMappingURL=controller.js.map