import { ChannelManagerChannelDetails, ChannelState, Interface, LogDescription, ThreadState, Transaction } from '../types';
import { Wallet } from '../Wallet';
export interface IChannelManager {
    abi: Interface;
    gasMultiple: number;
    rawAbi: any;
    challengeThread(state: ChannelState, threadState: ThreadState): Promise<Transaction>;
    emptyChannel(state: ChannelState): Promise<Transaction>;
    emptyChannelWithChallenge(state: ChannelState): Promise<Transaction>;
    emptyThread(state: ChannelState, threadState: ThreadState, proof: any): Promise<Transaction>;
    getChannelDetails(user: string): Promise<ChannelManagerChannelDetails>;
    getPastEvents(eventName: string, args: string[], fromBlock: number): Promise<LogDescription[]>;
    nukeThreads(state: ChannelState): Promise<Transaction>;
    startExit(state: ChannelState): Promise<Transaction>;
    startExitThread(state: ChannelState, threadState: ThreadState, proof: any): Promise<Transaction>;
    startExitThreadWithUpdate(state: ChannelState, threadInitialState: ThreadState, threadUpdateState: ThreadState, proof: any): Promise<Transaction>;
    startExitWithUpdate(state: ChannelState): Promise<Transaction>;
    userAuthorizedUpdate(state: ChannelState, overrides?: any): Promise<Transaction>;
}
export declare class ChannelManager implements IChannelManager {
    abi: Interface;
    address: string;
    gasMultiple: number;
    rawAbi: any;
    private cm;
    private defaultSendArgs;
    private provider;
    constructor(wallet: Wallet, address: string, gasMultiple?: number);
    getPastEvents(eventName: string, args: string[], fromBlock: number): Promise<any>;
    userAuthorizedUpdate(state: ChannelState, overrides?: any): Promise<any>;
    startExit(state: ChannelState): Promise<any>;
    startExitWithUpdate(state: ChannelState): Promise<any>;
    emptyChannelWithChallenge(state: ChannelState): Promise<any>;
    emptyChannel(state: ChannelState): Promise<any>;
    startExitThread(state: ChannelState, threadState: ThreadState, proof: any): Promise<any>;
    startExitThreadWithUpdate(state: ChannelState, threadInitialState: ThreadState, threadUpdateState: ThreadState, proof: any): Promise<any>;
    challengeThread(state: ChannelState, threadState: ThreadState): Promise<any>;
    emptyThread(state: ChannelState, threadState: ThreadState, proof: any): Promise<any>;
    nukeThreads(state: ChannelState): Promise<any>;
    getChannelDetails(user: string): Promise<ChannelManagerChannelDetails>;
    private _send;
}
