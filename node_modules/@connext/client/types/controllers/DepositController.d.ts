import { ChannelState, Payment, UpdateRequestTypes } from '../types';
import { AbstractController } from './AbstractController';
export interface SuggestedGasPrice {
    expiry: number;
    price: string;
}
export declare class DepositController extends AbstractController {
    private resolvePendingDepositPromise;
    private suggestedGasPrice?;
    requestUserDeposit(args: Partial<Payment>, overrides?: any): Promise<any>;
    /**
     * Given arguments for a user authorized deposit which we want to send
     * to chain, generate a state for that deposit, send that state to chain,
     * and return the state once it has been successfully added to the mempool.
     */
    sendUserAuthorizedDeposit(prev: ChannelState, update: UpdateRequestTypes['ProposePendingDeposit']): Promise<any>;
    private _sendUserAuthorizedDeposit;
}
