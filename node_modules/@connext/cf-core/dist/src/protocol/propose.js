"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/utils");
const constants_1 = require("../constants");
const ethereum_1 = require("../ethereum");
const machine_1 = require("../machine");
const enums_1 = require("../machine/enums");
const models_1 = require("../models");
const signature_forwarder_1 = require("./utils/signature-forwarder");
const signature_validator_1 = require("./utils/signature-validator");
const protocol = enums_1.Protocol.Propose;
const { OP_SIGN, IO_SEND, IO_SEND_AND_WAIT, PERSIST_STATE_CHANNEL } = enums_1.Opcode;
exports.PROPOSE_PROTOCOL = {
    0: function (context) {
        return __asyncGenerator(this, arguments, function* () {
            const { message, network, stateChannelsMap } = context;
            const { processID, params } = message;
            const { multisigAddress, initiatorXpub, responderXpub, appDefinition, abiEncodings, initiatorDeposit, initiatorDepositTokenAddress, responderDeposit, responderDepositTokenAddress, timeout, initialState, outcomeType } = params;
            const preProtocolStateChannel = stateChannelsMap.get(multisigAddress)
                ? stateChannelsMap.get(multisigAddress)
                : models_1.StateChannel.createEmptyChannel(multisigAddress, network.ProxyFactory, [
                    initiatorXpub,
                    responderXpub
                ]);
            const appInstanceProposal = {
                appDefinition,
                abiEncodings,
                initialState,
                outcomeType,
                initiatorDeposit: initiatorDeposit.toHexString(),
                responderDeposit: responderDeposit.toHexString(),
                timeout: timeout.toHexString(),
                identityHash: machine_1.appIdentityToHash({
                    appDefinition,
                    channelNonce: preProtocolStateChannel.numProposedApps + 1,
                    participants: preProtocolStateChannel.getSigningKeysFor(preProtocolStateChannel.numProposedApps + 1),
                    defaultTimeout: timeout.toNumber()
                }),
                proposedByIdentifier: initiatorXpub,
                proposedToIdentifier: responderXpub,
                appSeqNo: preProtocolStateChannel.numProposedApps + 1,
                initiatorDepositTokenAddress: initiatorDepositTokenAddress || constants_1.CONVENTION_FOR_ETH_TOKEN_ADDRESS,
                responderDepositTokenAddress: responderDepositTokenAddress || constants_1.CONVENTION_FOR_ETH_TOKEN_ADDRESS
            };
            const postProtocolStateChannel = preProtocolStateChannel.addProposal(appInstanceProposal);
            yield yield __await([PERSIST_STATE_CHANNEL, [postProtocolStateChannel]]);
            const setStateCommitment = new ethereum_1.SetStateCommitment(network, {
                appDefinition,
                channelNonce: preProtocolStateChannel.numProposedApps + 1,
                participants: preProtocolStateChannel.getSigningKeysFor(preProtocolStateChannel.numProposedApps + 1),
                defaultTimeout: timeout.toNumber()
            }, utils_1.keccak256(utils_1.defaultAbiCoder.encode([abiEncodings.stateEncoding], [initialState])), 0, timeout.toNumber());
            const initiatorSignatureOnInitialState = yield yield __await([
                OP_SIGN,
                setStateCommitment
            ]);
            const m1 = {
                protocol,
                processID,
                params,
                seq: 1,
                toXpub: responderXpub,
                customData: {
                    signature: initiatorSignatureOnInitialState
                }
            };
            const m2 = yield yield __await([IO_SEND_AND_WAIT, m1]);
            const { customData: { signature: responderSignatureOnInitialState } } = m2;
            const responderAddress = machine_1.xkeyKthAddress(responderXpub, 0);
            signature_validator_1.assertIsValidSignature(responderAddress, setStateCommitment, responderSignatureOnInitialState);
            context.stateChannelsMap.set(postProtocolStateChannel.multisigAddress, postProtocolStateChannel);
        });
    },
    1: function (context) {
        return __asyncGenerator(this, arguments, function* () {
            const { message, network, stateChannelsMap } = context;
            const { params, processID } = message;
            const { multisigAddress, initiatorXpub, responderXpub, appDefinition, abiEncodings, initiatorDeposit, initiatorDepositTokenAddress, responderDeposit, responderDepositTokenAddress, timeout, initialState, outcomeType } = params;
            const { customData: { signature: initiatorSignatureOnInitialState } } = message;
            const preProtocolStateChannel = stateChannelsMap.get(multisigAddress)
                ? stateChannelsMap.get(multisigAddress)
                : models_1.StateChannel.createEmptyChannel(multisigAddress, network.ProxyFactory, [
                    initiatorXpub,
                    responderXpub
                ]);
            const appInstanceProposal = {
                appDefinition,
                abiEncodings,
                initialState,
                outcomeType,
                identityHash: machine_1.appIdentityToHash({
                    appDefinition,
                    channelNonce: preProtocolStateChannel.numProposedApps + 1,
                    participants: preProtocolStateChannel.getSigningKeysFor(preProtocolStateChannel.numProposedApps + 1),
                    defaultTimeout: timeout.toNumber()
                }),
                timeout: timeout.toHexString(),
                initiatorDeposit: responderDeposit.toHexString(),
                responderDeposit: initiatorDeposit.toHexString(),
                proposedByIdentifier: initiatorXpub,
                proposedToIdentifier: responderXpub,
                appSeqNo: preProtocolStateChannel.numProposedApps + 1,
                initiatorDepositTokenAddress: responderDepositTokenAddress || constants_1.CONVENTION_FOR_ETH_TOKEN_ADDRESS,
                responderDepositTokenAddress: initiatorDepositTokenAddress || constants_1.CONVENTION_FOR_ETH_TOKEN_ADDRESS
            };
            const setStateCommitment = new ethereum_1.SetStateCommitment(network, {
                appDefinition,
                channelNonce: preProtocolStateChannel.numProposedApps + 1,
                participants: preProtocolStateChannel.getSigningKeysFor(preProtocolStateChannel.numProposedApps + 1),
                defaultTimeout: timeout.toNumber()
            }, utils_1.keccak256(utils_1.defaultAbiCoder.encode([abiEncodings.stateEncoding], [initialState])), 0, timeout.toNumber());
            const initiatorAddress = machine_1.xkeyKthAddress(initiatorXpub, 0);
            signature_validator_1.assertIsValidSignature(initiatorAddress, setStateCommitment, initiatorSignatureOnInitialState);
            const postProtocolStateChannel = preProtocolStateChannel.addProposal(appInstanceProposal);
            yield yield __await([PERSIST_STATE_CHANNEL, [postProtocolStateChannel]]);
            const responderSignatureOnInitialState = yield yield __await([
                OP_SIGN,
                setStateCommitment
            ]);
            yield yield __await([
                IO_SEND,
                {
                    protocol,
                    processID,
                    seq: signature_forwarder_1.UNASSIGNED_SEQ_NO,
                    toXpub: initiatorXpub,
                    customData: {
                        signature: responderSignatureOnInitialState
                    }
                }
            ]);
            context.stateChannelsMap.set(postProtocolStateChannel.multisigAddress, postProtocolStateChannel);
        });
    }
};
//# sourceMappingURL=propose.js.map