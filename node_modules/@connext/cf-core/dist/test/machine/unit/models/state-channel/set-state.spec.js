"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const utils_1 = require("ethers/utils");
const constants_2 = require("../../../../../src/constants");
const machine_1 = require("../../../../../src/machine");
const models_1 = require("../../../../../src/models");
const utils_2 = require("../../../../unit/utils");
const random_signing_keys_1 = require("../../../integration/random-signing-keys");
const mocks_1 = require("../../../mocks");
const APP_STATE = {
    foo: constants_1.AddressZero,
    bar: 42
};
describe("StateChannel::setState", () => {
    const networkContext = mocks_1.generateRandomNetworkContext();
    let sc1;
    let sc2;
    let testApp;
    beforeAll(() => {
        const multisigAddress = utils_1.getAddress(utils_1.hexlify(utils_1.randomBytes(20)));
        const xpubs = random_signing_keys_1.getRandomExtendedPubKeys(2);
        sc1 = models_1.StateChannel.setupChannel(networkContext.IdentityApp, networkContext.ProxyFactory, multisigAddress, xpubs);
        testApp = utils_2.createAppInstanceForTest(sc1);
        sc1 = sc1.installApp(testApp, {
            [constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS]: {
                [machine_1.xkeyKthAddress(xpubs[0], 0)]: constants_1.Zero,
                [machine_1.xkeyKthAddress(xpubs[1], 0)]: constants_1.Zero
            }
        });
        sc2 = sc1.setState(testApp.identityHash, APP_STATE);
    });
    it("should not alter any of the base properties", () => {
        expect(sc2.multisigAddress).toBe(sc1.multisigAddress);
        expect(sc2.userNeuteredExtendedKeys).toBe(sc1.userNeuteredExtendedKeys);
    });
    it("should not have bumped the sequence number", () => {
        expect(sc2.numProposedApps).toBe(sc1.numProposedApps);
    });
    describe("the updated app", () => {
        let app;
        beforeAll(() => {
            app = sc2.getAppInstance(testApp.identityHash);
        });
        it("should have the new state", () => {
            expect(app.state).toEqual(APP_STATE);
        });
        it("should have bumped the versionNumber", () => {
            expect(app.versionNumber).toBe(testApp.versionNumber + 1);
        });
        it("should have used the default timeout", () => {
            expect(app.timeout).toBe(app.timeout);
        });
    });
});
//# sourceMappingURL=set-state.spec.js.map