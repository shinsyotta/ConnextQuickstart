"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const setup_1 = require("./setup");
const utils_1 = require("./utils");
const { TicTacToeApp } = global["networkContext"];
describe("Node method follows spec - rejectInstallVirtual", () => {
    let nodeA;
    let nodeB;
    let nodeC;
    beforeAll(async () => {
        const context = await setup_1.setup(global, true);
        nodeA = context["A"].node;
        nodeB = context["B"].node;
        nodeC = context["C"].node;
    });
    describe("Node A makes a proposal through an intermediary Node B to install a " +
        "Virtual AppInstance with Node C. Node C rejects proposal. Node A confirms rejection", () => {
        it("sends proposal with non-null initial state", async (done) => {
            await utils_1.createChannel(nodeA, nodeB);
            await utils_1.createChannel(nodeB, nodeC);
            let appInstanceId;
            nodeA.on("REJECT_INSTALL_EVENT", async (msg) => {
                expect((await utils_1.getProposedAppInstances(nodeA)).length).toEqual(0);
                utils_1.assertNodeMessage(msg, {
                    from: nodeC.publicIdentifier,
                    data: {
                        appInstanceId
                    },
                    type: "REJECT_INSTALL_EVENT"
                });
                done();
            });
            nodeC.once("PROPOSE_INSTALL_EVENT", async ({ data: { params, appInstanceId } }) => {
                const [proposedAppInstanceC] = await utils_1.getProposedAppInstances(nodeC);
                appInstanceId = proposedAppInstanceC.identityHash;
                utils_1.confirmProposedAppInstance(params, proposedAppInstanceC);
                expect(proposedAppInstanceC.proposedByIdentifier).toEqual(nodeA.publicIdentifier);
                const rejectReq = utils_1.constructRejectInstallRpc(appInstanceId);
                await nodeC.rpcRouter.dispatch(rejectReq);
                expect((await utils_1.getProposedAppInstances(nodeC)).length).toEqual(0);
            });
            const { params } = await utils_1.makeVirtualProposeCall(nodeA, nodeC, TicTacToeApp);
            const [proposedAppInstanceA] = await utils_1.getProposedAppInstances(nodeA);
            utils_1.confirmProposedAppInstance(params, proposedAppInstanceA);
        });
    });
});
//# sourceMappingURL=reject-install-virtual.spec.js.map