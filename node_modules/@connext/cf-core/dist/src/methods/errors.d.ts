import { BigNumber } from "ethers/utils";
export declare const APP_ALREADY_UNINSTALLED: (id: string) => string;
export declare const CANNOT_DEPOSIT = "Cannot deposit while another deposit is occurring in the channel.";
export declare const COIN_BALANCE_NOT_PROPOSED = "No coin balance refund app proposed in channel.";
export declare const BALANCE_REFUND_APP_ALREADY_INSTALLED = "Balance refund app is installed, please uninstall first.";
export declare const BALANCE_REFUND_APP_NOT_INSTALLED = "Balance refund app is not installed.";
export declare const CANNOT_UNINSTALL_FREE_BALANCE: (multisigAddress: string) => string;
export declare const CANNOT_WITHDRAW = "Cannot withdraw while another deposit / withdraw app is active in the channel.";
export declare const CHANNEL_CREATION_FAILED = "Failed to create channel. Multisignature wallet cannot be deployed properly";
export declare const DEPOSIT_FAILED = "Failed to send funds to the multisig contract";
export declare const ETH_BALANCE_REFUND_NOT_UNINSTALLED = "The ETH balance refund AppInstance is still installed when it's not supposed to be";
export declare const FAILED_TO_GET_ERC20_BALANCE: (tokenAddress: string, address: string) => string;
export declare const IMPROPERLY_FORMATTED_STRUCT = "Improperly formatted ABIEncoderV2 struct";
export declare const INCORRECT_MULTISIG_ADDRESS = "Channel multisig address does not match expected";
export declare const INVALID_FACTORY_ADDRESS: (address: string) => string;
export declare const NO_NETWORK_PROVIDER_CREATE2 = "`getCreate2MultisigAddress` needs access to an eth provider within the network context";
export declare const INSUFFICIENT_ERC20_FUNDS_TO_DEPOSIT: (address: string, tokenAddress: string, amount: BigNumber, balance: BigNumber) => string;
export declare const INSUFFICIENT_FUNDS_TO_WITHDRAW: (address: string, amount: BigNumber, balance: BigNumber) => string;
export declare const INSUFFICIENT_FUNDS_IN_FREE_BALANCE_FOR_ASSET: (publicIdentifier: string, multisigAddress: string, tokenAddress: string, balance: BigNumber, allocationAmount: BigNumber) => string;
export declare const INSUFFICIENT_FUNDS = "Node's default signer does not have enough funds for this action";
export declare const INVALID_ACTION = "Invalid action taken";
export declare const INVALID_NETWORK_NAME = "Invalid network name provided for initializing Node";
export declare const NO_ACTION_ENCODING_FOR_APP_INSTANCE = "The AppInstance does not have an Action encoding defined";
export declare const NO_APP_CONTRACT_ADDR = "The App Contract address is empty";
export declare const NO_APP_INSTANCE_FOR_GIVEN_ID = "No AppInstance exists for the given ID";
export declare const NO_APP_INSTANCE_FOR_TAKE_ACTION = "No AppInstanceId specified to takeAction on";
export declare const NO_APP_INSTANCE_ID_FOR_GET_STATE = "No string specified to get state for";
export declare const NO_APP_INSTANCE_ID_TO_GET_DETAILS = "No string specified to get details for";
export declare const NO_APP_INSTANCE_ID_TO_INSTALL = "No AppInstanceId specified to install";
export declare const NO_APP_INSTANCE_ID_TO_UNINSTALL = "No AppInstanceId specified to uninstall";
export declare const NO_MULTISIG_FOR_APP_INSTANCE_ID = "No multisig address exists for the given appInstanceId";
export declare const NO_PROPOSED_APP_INSTANCE_FOR_APP_INSTANCE_ID: (id: string) => string;
export declare const NO_STATE_CHANNEL_FOR_MULTISIG_ADDR: (multisigAddress: string) => string;
export declare const NO_TRANSACTION_HASH_FOR_MULTISIG_DEPLOYMENT = "The multisig deployment transaction does not have a hash";
export declare const NULL_INITIAL_STATE_FOR_PROPOSAL = "A proposed AppInstance cannot have an empty initial state";
export declare const STATE_OBJECT_NOT_ENCODABLE = "The state object is not encodable by the AppInstance's state encoding";
export declare const TWO_PARTY_OUTCOME_DIFFERENT_ASSETS: (assetA: string, assetB: string) => string;
export declare const VIRTUAL_APP_INSTALLATION_FAIL = "Failed to install the virtual App Instance";
export declare const WITHDRAWAL_FAILED = "Failed to withdraw funds out of the multisig contract";
export declare const NO_MULTISIG_FOR_COUNTERPARTIES: (owners: string[]) => string;
//# sourceMappingURL=errors.d.ts.map