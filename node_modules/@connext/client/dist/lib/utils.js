"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/utils");
const util_1 = require("util");
exports.stringify = (obj, abrv = false) => JSON.stringify(obj, (key, value) => value && value._hex
    ? utils_1.bigNumberify(value).toString()
    : abrv && value && typeof value === "string" && value.startsWith("xpub")
        ? `${value.substring(0, 8)}..${value.substring(value.length - 4)}`
        : abrv && value && typeof value === "string" && value.startsWith("0x")
            ? `${value.substring(0, 6)}..${value.substring(value.length - 4)}`
            : value, 2);
exports.capitalize = (str) => str.substring(0, 1).toUpperCase() + str.substring(1);
exports.objMap = (obj, func) => {
    const res = {};
    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            res[key] = func(key, obj[key]);
        }
    }
    return res;
};
exports.objMapPromise = (obj, func) => __awaiter(this, void 0, void 0, function* () {
    const res = {};
    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            res[key] = yield func(key, obj[key]);
        }
    }
    return res;
});
exports.insertDefault = (val, obj, keys) => {
    const adjusted = {};
    keys.concat(Object.keys(obj)).map((k) => {
        adjusted[k] = util_1.isNullOrUndefined(obj[k])
            ? val
            : obj[k];
    });
    return adjusted;
};
exports.delay = (ms) => new Promise((res) => setTimeout(res, ms));
exports.delayAndThrow = (ms, msg = "") => new Promise((res, rej) => setTimeout(() => rej(msg), ms));
exports.createLinkedHash = (amount, assetId, paymentId, preImage) => {
    return utils_1.solidityKeccak256(["uint256", "address", "bytes32", "bytes32"], [amount, assetId, paymentId, preImage]);
};
exports.withdrawalKey = (xpub) => {
    return `${xpub}/latestNodeSubmittedWithdrawal`;
};
exports.createRandom32ByteHexString = () => {
    return utils_1.hexlify(utils_1.randomBytes(32));
};
exports.createPaymentId = exports.createRandom32ByteHexString;
exports.createPreImage = exports.createRandom32ByteHexString;
//# sourceMappingURL=utils.js.map