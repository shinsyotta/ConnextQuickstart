"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("ethers/errors");
const rpc_server_1 = require("rpc-server");
const machine_1 = require("../../../machine");
const types_1 = require("../../../types");
const utils_1 = require("../../../utils");
const controller_1 = require("../../controller");
const errors_2 = require("../../errors");
class UpdateStateController extends controller_1.NodeController {
    constructor() {
        super(...arguments);
        this.executeMethod = super.executeMethod;
    }
    async getRequiredLockNames(requestHandler, params) {
        return [params.appInstanceId];
    }
    async beforeExecution(requestHandler, params) {
        const { store } = requestHandler;
        const { appInstanceId, newState } = params;
        if (!appInstanceId) {
            throw Error(errors_2.NO_APP_INSTANCE_FOR_TAKE_ACTION);
        }
        const appInstance = await store.getAppInstance(appInstanceId);
        try {
            appInstance.encodeState(newState);
        }
        catch (e) {
            if (e.code === errors_1.INVALID_ARGUMENT) {
                throw Error(`${errors_2.IMPROPERLY_FORMATTED_STRUCT}: ${e.message}`);
            }
            throw Error(errors_2.STATE_OBJECT_NOT_ENCODABLE);
        }
    }
    async executeMethodImplementation(requestHandler, params) {
        const { store, publicIdentifier, protocolRunner } = requestHandler;
        const { appInstanceId, newState } = params;
        const sc = await store.getChannelFromAppInstanceID(appInstanceId);
        const responderXpub = utils_1.getFirstElementInListNotEqualTo(publicIdentifier, sc.userNeuteredExtendedKeys);
        await runUpdateStateProtocol(appInstanceId, store, protocolRunner, publicIdentifier, responderXpub, newState);
        return { newState };
    }
}
__decorate([
    rpc_server_1.jsonRpcMethod(types_1.CFCoreTypes.RpcMethodNames.chan_updateState),
    __metadata("design:type", Object)
], UpdateStateController.prototype, "executeMethod", void 0);
exports.default = UpdateStateController;
async function runUpdateStateProtocol(appIdentityHash, store, protocolRunner, initiatorXpub, responderXpub, newState) {
    const stateChannel = await store.getChannelFromAppInstanceID(appIdentityHash);
    const stateChannelsMap = await protocolRunner.initiateProtocol(machine_1.Protocol.Update, new Map([
        [stateChannel.multisigAddress, stateChannel]
    ]), {
        initiatorXpub,
        responderXpub,
        appIdentityHash,
        newState,
        multisigAddress: stateChannel.multisigAddress
    });
}
//# sourceMappingURL=controller.js.map