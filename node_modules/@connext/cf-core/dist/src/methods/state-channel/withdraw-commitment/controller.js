"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_server_1 = require("rpc-server");
const machine_1 = require("../../../machine");
const types_1 = require("../../../types");
const controller_1 = require("../../controller");
const controller_2 = __importDefault(require("../withdraw/controller"));
const operation_1 = require("../withdraw/operation");
const utils_1 = require("../../../utils");
const errors_1 = require("../../errors");
const constants_1 = require("ethers/constants");
class WithdrawCommitmentController extends controller_1.NodeController {
    constructor() {
        super(...arguments);
        this.executeMethod = super.executeMethod;
    }
    async getRequiredLockNames(requestHandler, params) {
        return controller_2.default.getRequiredLockNames(requestHandler, params);
    }
    async beforeExecution(requestHandler, params) {
        const { store, provider, networkContext } = requestHandler;
        const { multisigAddress, tokenAddress } = params;
        const channel = await store.getStateChannel(multisigAddress);
        if (!channel.proxyFactoryAddress) {
            throw Error(errors_1.INVALID_FACTORY_ADDRESS(channel.proxyFactoryAddress));
        }
        if (channel.hasBalanceRefundAppInstance(networkContext.CoinBalanceRefundApp, tokenAddress || constants_1.AddressZero)) {
            throw Error(errors_1.CANNOT_WITHDRAW);
        }
        const expectedMultisigAddress = await utils_1.getCreate2MultisigAddress(channel.userNeuteredExtendedKeys, channel.proxyFactoryAddress, networkContext.MinimumViableMultisig, provider);
        if (expectedMultisigAddress !== channel.multisigAddress) {
            throw Error(errors_1.INCORRECT_MULTISIG_ADDRESS);
        }
    }
    async executeMethodImplementation(requestHandler, params) {
        const { store, publicIdentifier } = requestHandler;
        const { multisigAddress, recipient } = params;
        params.recipient = recipient || machine_1.xkeyKthAddress(publicIdentifier, 0);
        await operation_1.runWithdrawProtocol(requestHandler, params);
        const commitment = await store.getWithdrawalCommitment(multisigAddress);
        if (!commitment) {
            throw Error("No withdrawal commitment found");
        }
        return {
            transaction: commitment
        };
    }
}
__decorate([
    rpc_server_1.jsonRpcMethod(types_1.CFCoreTypes.RpcMethodNames.chan_withdrawCommitment),
    __metadata("design:type", Object)
], WithdrawCommitmentController.prototype, "executeMethod", void 0);
exports.default = WithdrawCommitmentController;
//# sourceMappingURL=controller.js.map