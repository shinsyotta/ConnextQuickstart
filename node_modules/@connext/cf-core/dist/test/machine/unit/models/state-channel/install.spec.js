"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const utils_1 = require("ethers/utils");
const constants_2 = require("../../../../../src/constants");
const machine_1 = require("../../../../../src/machine");
const models_1 = require("../../../../../src/models");
const free_balance_1 = require("../../../../../src/models/free-balance");
const utils_2 = require("../../../../unit/utils");
const random_signing_keys_1 = require("../../../integration/random-signing-keys");
const mocks_1 = require("../../../mocks");
describe("StateChannel::uninstallApp", () => {
    const networkContext = mocks_1.generateRandomNetworkContext();
    let sc1;
    let sc2;
    let appIdentityHash;
    beforeAll(() => {
        const multisigAddress = utils_1.getAddress(utils_1.hexlify(utils_1.randomBytes(20)));
        const xpubs = random_signing_keys_1.getRandomExtendedPubKeys(2);
        sc1 = models_1.StateChannel.setupChannel(networkContext.IdentityApp, networkContext.ProxyFactory, multisigAddress, xpubs);
        const appInstance = utils_2.createAppInstanceForTest(sc1);
        appIdentityHash = appInstance.identityHash;
        sc1 = sc1.setFreeBalance(free_balance_1.FreeBalanceClass.createWithFundedTokenAmounts([machine_1.xkeyKthAddress(xpubs[0], 0), machine_1.xkeyKthAddress(xpubs[1], 0)], constants_1.WeiPerEther, [constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS]));
        sc2 = sc1.installApp(appInstance, {
            [constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS]: {
                [machine_1.xkeyKthAddress(xpubs[0], 0)]: constants_1.WeiPerEther,
                [machine_1.xkeyKthAddress(xpubs[1], 0)]: constants_1.WeiPerEther
            }
        });
    });
    it("should not alter any of the base properties", () => {
        expect(sc2.multisigAddress).toBe(sc1.multisigAddress);
        expect(sc2.userNeuteredExtendedKeys).toBe(sc1.userNeuteredExtendedKeys);
    });
    it("should have added something at the id of thew new app", () => {
        expect(sc2.getAppInstance(appIdentityHash)).not.toBe(undefined);
    });
    describe("the updated ETH Free Balance", () => {
        let fb;
        beforeAll(() => {
            fb = sc2.getFreeBalanceClass();
        });
        it("should have updated balances for Alice and Bob", () => {
            for (const amount of Object.values(fb.withTokenAddress(constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS) || {})) {
                expect(amount).toEqual(constants_1.Zero);
            }
        });
    });
    describe("the newly installed app", () => {
        let app;
        beforeAll(() => {
            app = sc2.getAppInstance(appIdentityHash);
        });
        it("should not be a virtual app", () => {
            expect(app.isVirtualApp).toBe(false);
        });
    });
});
//# sourceMappingURL=install.spec.js.map