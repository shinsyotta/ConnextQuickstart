/// <reference types="node" />
import { EventEmitter } from "events";
import { ChannelProvider } from "./channelProvider";
import { ConnextClient } from "./connext";
export declare class ConnextListener extends EventEmitter {
    private log;
    private channelProvider;
    private connext;
    private defaultCallbacks;
    constructor(channelProvider: ChannelProvider, connext: ConnextClient);
    register: () => Promise<void>;
    registerCfListener: (event: "CREATE_CHANNEL_EVENT" | "DEPOSIT_CONFIRMED_EVENT" | "DEPOSIT_FAILED_EVENT" | "DEPOSIT_STARTED_EVENT" | "INSTALL_EVENT" | "INSTALL_VIRTUAL_EVENT" | "REJECT_INSTALL_EVENT" | "UNINSTALL_EVENT" | "UNINSTALL_VIRTUAL_EVENT" | "UPDATE_STATE_EVENT" | "WITHDRAWAL_CONFIRMED_EVENT" | "WITHDRAWAL_FAILED_EVENT" | "WITHDRAWAL_STARTED_EVENT" | "PROPOSE_INSTALL_EVENT" | "PROTOCOL_MESSAGE_EVENT", cb: Function) => void;
    removeCfListener: (event: "CREATE_CHANNEL_EVENT" | "DEPOSIT_CONFIRMED_EVENT" | "DEPOSIT_FAILED_EVENT" | "DEPOSIT_STARTED_EVENT" | "INSTALL_EVENT" | "INSTALL_VIRTUAL_EVENT" | "REJECT_INSTALL_EVENT" | "UNINSTALL_EVENT" | "UNINSTALL_VIRTUAL_EVENT" | "UPDATE_STATE_EVENT" | "WITHDRAWAL_CONFIRMED_EVENT" | "WITHDRAWAL_FAILED_EVENT" | "WITHDRAWAL_STARTED_EVENT" | "PROPOSE_INSTALL_EVENT" | "PROTOCOL_MESSAGE_EVENT", cb: Function) => boolean;
    registerDefaultListeners: () => void;
    private emitAndLog;
    private matchAppInstance;
    private verifyAndInstallKnownApp;
    private registerAvailabilitySubscription;
    private registerLinkedTransferSubscription;
}
//# sourceMappingURL=listener.d.ts.map