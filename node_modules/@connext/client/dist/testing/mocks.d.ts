import { IMessagingService } from "@connext/messaging";
import { providers } from "ethers";
import { Logger } from "../lib";
import { INodeApiClient } from "../node";
import { AppRegistry, CFCoreTypes, ChannelAppSequences, CreateChannelResponse, GetChannelResponse, GetConfigResponse, NodeInitializationParameters, PaymentProfile, RequestCollateralResponse, ResolveLinkedTransferResponse, SupportedApplication, SupportedNetwork, Transfer } from "../types";
declare type TransactionResponse = providers.TransactionResponse;
export declare const address: string;
export declare const mnemonic: string;
export declare const privateKey: string;
export declare const ethUrl: string;
export declare const nodeUrl: string;
export declare class MockMessagingService implements IMessagingService {
    private returnVals;
    private log;
    constructor(opts?: any);
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    onReceive(subject: string, callback: (msg: any) => void): Promise<void>;
    request(subject: string, timeout: number, body?: any): any;
    send(to: string, msg: any): Promise<void>;
    publish(to: string, msg: any): Promise<void>;
    subscribe(subject: string, callback: (msg: any) => void): Promise<void>;
    unsubscribe(subject: string): Promise<void>;
    flush(): Promise<void>;
    patch(subject: string, returnValue: any): any;
}
export declare class MockNodeClientApi implements INodeApiClient {
    log: Logger;
    private nodeUrl;
    private messaging;
    private nonce;
    private signature;
    constructor(opts?: Partial<NodeInitializationParameters>);
    acquireLock(lockName: string, callback: (...args: any[]) => any, timeout: number): Promise<any>;
    static returnValues: any;
    appRegistry(appDetails?: {
        name: SupportedApplication;
        network: SupportedNetwork;
    }): Promise<AppRegistry>;
    config(): Promise<GetConfigResponse>;
    getChannel(): Promise<GetChannelResponse>;
    getLatestSwapRate(from: string, to: string): Promise<string>;
    getTransferHistory(): Promise<Transfer[]>;
    createChannel(): Promise<CreateChannelResponse>;
    recipientOnline(recipientPublicIdentifier: string): Promise<boolean>;
    subscribeToSwapRates(from: string, to: string, store: CFCoreTypes.IStoreService): Promise<void>;
    unsubscribeFromSwapRates(from: string, to: string): Promise<void>;
    requestCollateral(): Promise<RequestCollateralResponse | void>;
    withdraw(): Promise<TransactionResponse>;
    fetchLinkedTransfer(paymentId: string): Promise<any>;
    resolveLinkedTransfer(): Promise<ResolveLinkedTransferResponse>;
    restoreState(publicIdentifier: string): Promise<any>;
    addPaymentProfile(): Promise<any>;
    getPaymentProfile(): Promise<PaymentProfile | undefined>;
    verifyAppSequenceNumber(): Promise<ChannelAppSequences>;
}
export {};
//# sourceMappingURL=mocks.d.ts.map