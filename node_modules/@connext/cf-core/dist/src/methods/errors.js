"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const utils_1 = require("../utils");
exports.APP_ALREADY_UNINSTALLED = (id) => `Cannot uninstall app ${id}, it has already been uninstalled`;
exports.CANNOT_DEPOSIT = "Cannot deposit while another deposit is occurring in the channel.";
exports.COIN_BALANCE_NOT_PROPOSED = "No coin balance refund app proposed in channel.";
exports.BALANCE_REFUND_APP_ALREADY_INSTALLED = "Balance refund app is installed, please uninstall first.";
exports.BALANCE_REFUND_APP_NOT_INSTALLED = "Balance refund app is not installed.";
exports.CANNOT_UNINSTALL_FREE_BALANCE = (multisigAddress) => `Cannot uninstall the FreeBalance of channel: ${multisigAddress}`;
exports.CANNOT_WITHDRAW = "Cannot withdraw while another deposit / withdraw app is active in the channel.";
exports.CHANNEL_CREATION_FAILED = "Failed to create channel. Multisignature wallet cannot be deployed properly";
exports.DEPOSIT_FAILED = "Failed to send funds to the multisig contract";
exports.ETH_BALANCE_REFUND_NOT_UNINSTALLED = "The ETH balance refund AppInstance is still installed when it's not supposed to be";
exports.FAILED_TO_GET_ERC20_BALANCE = (tokenAddress, address) => `Failed to get the balance of address: ${address} for ERC20 token: ${tokenAddress}`;
exports.IMPROPERLY_FORMATTED_STRUCT = "Improperly formatted ABIEncoderV2 struct";
exports.INCORRECT_MULTISIG_ADDRESS = "Channel multisig address does not match expected";
exports.INVALID_FACTORY_ADDRESS = (address) => `Channel factory address is invalid: ${address}`;
exports.NO_NETWORK_PROVIDER_CREATE2 = "`getCreate2MultisigAddress` needs access to an eth provider within the network context";
exports.INSUFFICIENT_ERC20_FUNDS_TO_DEPOSIT = (address, tokenAddress, amount, balance) => `Node's default signer ${address} has ${balance} and needs ${amount} of the specified ERC20 token ${tokenAddress} to deposit`;
exports.INSUFFICIENT_FUNDS_TO_WITHDRAW = (address, amount, balance) => {
    if (address === constants_1.CONVENTION_FOR_ETH_TOKEN_ADDRESS) {
        return `Node has ${balance} and needs ${amount} ETH to withdraw`;
    }
    return `Node has ${balance} and needs ${amount} of token ${address} to withdraw`;
};
exports.INSUFFICIENT_FUNDS_IN_FREE_BALANCE_FOR_ASSET = (publicIdentifier, multisigAddress, tokenAddress, balance, allocationAmount) => `Node with public identifier ${publicIdentifier} has insufficient funds in channel ${multisigAddress}
  for token ${tokenAddress} to allocate towards an AppInstance. Current free balance for token is ${balance},
  attempted allocation amount: ${allocationAmount} `;
exports.INSUFFICIENT_FUNDS = "Node's default signer does not have enough funds for this action";
exports.INVALID_ACTION = "Invalid action taken";
exports.INVALID_NETWORK_NAME = "Invalid network name provided for initializing Node";
exports.NO_ACTION_ENCODING_FOR_APP_INSTANCE = "The AppInstance does not have an Action encoding defined";
exports.NO_APP_CONTRACT_ADDR = "The App Contract address is empty";
exports.NO_APP_INSTANCE_FOR_GIVEN_ID = "No AppInstance exists for the given ID";
exports.NO_APP_INSTANCE_FOR_TAKE_ACTION = "No AppInstanceId specified to takeAction on";
exports.NO_APP_INSTANCE_ID_FOR_GET_STATE = "No string specified to get state for";
exports.NO_APP_INSTANCE_ID_TO_GET_DETAILS = "No string specified to get details for";
exports.NO_APP_INSTANCE_ID_TO_INSTALL = "No AppInstanceId specified to install";
exports.NO_APP_INSTANCE_ID_TO_UNINSTALL = "No AppInstanceId specified to uninstall";
exports.NO_MULTISIG_FOR_APP_INSTANCE_ID = "No multisig address exists for the given appInstanceId";
exports.NO_PROPOSED_APP_INSTANCE_FOR_APP_INSTANCE_ID = (id) => `No proposed AppInstance exists for the given appInstanceId: ${id}`;
exports.NO_STATE_CHANNEL_FOR_MULTISIG_ADDR = (multisigAddress) => `Call to getStateChannel failed when searching for multisig address: ${multisigAddress}. This probably means that the StateChannel does not exist yet.`;
exports.NO_TRANSACTION_HASH_FOR_MULTISIG_DEPLOYMENT = "The multisig deployment transaction does not have a hash";
exports.NULL_INITIAL_STATE_FOR_PROPOSAL = "A proposed AppInstance cannot have an empty initial state";
exports.STATE_OBJECT_NOT_ENCODABLE = "The state object is not encodable by the AppInstance's state encoding";
exports.TWO_PARTY_OUTCOME_DIFFERENT_ASSETS = (assetA, assetB) => `For a TWO_PARTY_FIXED_OUTCOME there cannot be two kinds of tokens deposited: ${assetA} and ${assetB}`;
exports.VIRTUAL_APP_INSTALLATION_FAIL = "Failed to install the virtual App Instance";
exports.WITHDRAWAL_FAILED = "Failed to withdraw funds out of the multisig contract";
exports.NO_MULTISIG_FOR_COUNTERPARTIES = (owners) => `Could not find multisig address between counterparties ${utils_1.prettyPrintObject(owners)}`;
//# sourceMappingURL=errors.js.map