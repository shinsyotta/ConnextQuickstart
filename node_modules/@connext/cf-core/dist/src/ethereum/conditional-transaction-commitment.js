"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/utils");
const contracts_1 = require("../contracts");
const multisig_commitment_1 = require("./multisig-commitment");
const types_1 = require("./types");
const iface = new utils_1.Interface(contracts_1.ConditionalTransactionDelegateTarget.abi);
class ConditionalTransaction extends multisig_commitment_1.MultisigCommitment {
    constructor(networkContext, multisig, multisigOwners, appIdentityHash, freeBalanceAppIdentityHash, interpreterAddr, interpreterParams) {
        super(multisig, multisigOwners);
        this.networkContext = networkContext;
        this.multisig = multisig;
        this.multisigOwners = multisigOwners;
        this.appIdentityHash = appIdentityHash;
        this.freeBalanceAppIdentityHash = freeBalanceAppIdentityHash;
        this.interpreterAddr = interpreterAddr;
        this.interpreterParams = interpreterParams;
    }
    getTransactionDetails() {
        return {
            to: this.networkContext.ConditionalTransactionDelegateTarget,
            value: 0,
            data: iface.functions.executeEffectOfInterpretedAppOutcome.encode([
                this.networkContext.ChallengeRegistry,
                this.freeBalanceAppIdentityHash,
                this.appIdentityHash,
                this.interpreterAddr,
                this.interpreterParams
            ]),
            operation: types_1.MultisigOperation.DelegateCall
        };
    }
}
exports.ConditionalTransaction = ConditionalTransaction;
//# sourceMappingURL=conditional-transaction-commitment.js.map