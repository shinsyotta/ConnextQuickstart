"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const setup_1 = require("./setup");
const utils_1 = require("./utils");
jest.setTimeout(10000);
const { TicTacToeApp } = global["networkContext"];
describe("Node method follows spec - uninstall virtual", () => {
    let nodeA;
    let nodeB;
    let nodeC;
    beforeAll(async () => {
        const context = await setup_1.setup(global, true);
        nodeA = context["A"].node;
        nodeB = context["B"].node;
        nodeC = context["C"].node;
    });
    describe("Node A and C install a Virtual AppInstance through an intermediary Node B," +
        "then Node A uninstalls the installed AppInstance", () => {
        it("sends uninstall ", async (done) => {
            const initialState = {
                versionNumber: 0,
                winner: 1,
                board: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
            };
            const multisigAddressAB = await utils_1.createChannel(nodeA, nodeB);
            const multisigAddressBC = await utils_1.createChannel(nodeB, nodeC);
            await utils_1.collateralizeChannel(multisigAddressAB, nodeA, nodeB);
            await utils_1.collateralizeChannel(multisigAddressBC, nodeB, nodeC);
            const appInstanceId = await utils_1.installVirtualApp(nodeA, nodeB, nodeC, TicTacToeApp, initialState);
            nodeC.once("UNINSTALL_VIRTUAL_EVENT", async (msg) => {
                utils_1.assertNodeMessage(msg, {
                    from: nodeA.publicIdentifier,
                    type: "UNINSTALL_VIRTUAL_EVENT",
                    data: {
                        intermediaryIdentifier: nodeB.publicIdentifier,
                        appInstanceId,
                    }
                });
                expect(await utils_1.getInstalledAppInstances(nodeC)).toEqual([]);
                done();
            });
            await nodeA.rpcRouter.dispatch(utils_1.constructUninstallVirtualRpc(appInstanceId, nodeB.publicIdentifier));
            expect(await utils_1.getInstalledAppInstances(nodeA)).toEqual([]);
        });
    });
});
//# sourceMappingURL=uninstall-virtual.spec.js.map