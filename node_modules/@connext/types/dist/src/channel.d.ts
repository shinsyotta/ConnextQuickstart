import { TransactionResponse } from "ethers/providers";
import { BigNumber } from "ethers/utils";
import { Address, AppInstanceJson, CFCoreTypes } from "./cf";
export declare type ChannelAppSequences = {
    userSequenceNumber: number;
    nodeSequenceNumber: number;
};
export declare type PaymentProfile<T = string> = {
    assetId: string;
    minimumMaintainedCollateral: T;
    amountToCollateralize: T;
};
export declare type PaymentProfileBigNumber = PaymentProfile<BigNumber>;
export declare type AssetAmount<T = string> = {
    amount: T;
    assetId: Address;
};
export declare type AssetAmountBigNumber = AssetAmount<BigNumber>;
export declare type CFCoreChannel = {
    id: number;
    nodePublicIdentifier: string;
    userPublicIdentifier: string;
    multisigAddress: string;
    available: boolean;
    collateralizationInFlight: boolean;
};
export declare type ChannelState<T = string> = {
    apps: AppInstanceJson[];
    freeBalance: CFCoreTypes.GetFreeBalanceStateResult;
};
export declare type ChannelStateBigNumber = ChannelState<BigNumber>;
export declare type TransferAction = {
    finalize: boolean;
    transferAmount: BigNumber;
};
export declare type WithdrawalResponse = ChannelState & {
    transaction: TransactionResponse;
};
//# sourceMappingURL=channel.d.ts.map