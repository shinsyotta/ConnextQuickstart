import { AppABIEncodings, AppInstanceJson, AppInstanceProposal, ContractABI, CFCoreTypes, OutcomeType, SolidityValueType } from "@connext/types";
import { BigNumber } from "ethers/utils";
import { InstallMessage, JsonRpcResponse, Node, ProposeMessage, Rpc } from "../../src";
import { EventEmittedMessage } from "../../src/types";
import { ProposeInstallProtocolParams } from "../../src/machine/types";
interface AppContext {
    appDefinition: string;
    abiEncodings: AppABIEncodings;
    initialState: SolidityValueType;
    outcomeType: OutcomeType;
}
export declare function requestDepositRights(node: Node, multisigAddress: string, tokenAddress?: string): Promise<JsonRpcResponse>;
export declare function constructRequestDepositRightsRpcCall(multisigAddress: string, tokenAddress?: string): {
    id: number;
    methodName: string;
    parameters: {
        multisigAddress: string;
        tokenAddress: string;
    };
};
export declare function rescindDepositRights(node: Node, multisigAddress: string, tokenAddress?: string): Promise<JsonRpcResponse>;
export declare function constructRescindDepositRightsRpcCall(multisigAddress: string, tokenAddress?: string): {
    id: number;
    methodName: string;
    parameters: {
        multisigAddress: string;
        tokenAddress: string;
    };
};
export declare function assertNodeMessage(msg: EventEmittedMessage, expected: any, shouldExist?: string[]): void;
export declare function assertProposeMessage(senderId: string, msg: ProposeMessage, params: ProposeInstallProtocolParams): void;
export declare function assertInstallMessage(senderId: string, msg: InstallMessage, appInstanceId: string): void;
export declare function getMultisigCreationAddress(node: Node, xpubs: string[]): Promise<string>;
export declare function constructChannelCreationRpc(owners: string[]): {
    id: number;
    methodName: string;
    parameters: {
        owners: string[];
    };
};
export declare function getChannelAddresses(node: Node): Promise<Set<string>>;
export declare function getAppInstance(node: Node, appInstanceId: string): Promise<AppInstanceJson>;
export declare function getAppInstanceProposal(node: Node, appInstanceId: string): Promise<AppInstanceProposal>;
export declare function getFreeBalanceState(node: Node, multisigAddress: string, tokenAddress?: string): Promise<CFCoreTypes.GetFreeBalanceStateResult>;
export declare function getTokenIndexedFreeBalanceStates(node: Node, multisigAddress: string): Promise<CFCoreTypes.GetTokenIndexedFreeBalanceStatesResult>;
export declare function getInstalledAppInstances(node: Node): Promise<AppInstanceJson[]>;
export declare function getProposedAppInstances(node: Node): Promise<AppInstanceProposal[]>;
export declare function getProposeCoinBalanceRefundAppParams(multisigAddress: string, balanceRefundRecipientIdentifer: string, proposedToIdentifier: string, tokenAddress?: string): Promise<CFCoreTypes.ProposeInstallParams>;
export declare function deposit(node: Node, multisigAddress: string, amount: BigNumber | undefined, proposedToNode: Node, tokenAddress?: string): Promise<unknown>;
export declare function deployStateDepositHolder(node: Node, multisigAddress: string): Promise<string>;
export declare function constructDepositRpc(multisigAddress: string, amount: BigNumber, tokenAddress?: string): Rpc;
export declare function constructWithdrawCommitmentRpc(multisigAddress: string, amount: BigNumber, tokenAddress?: string, recipient?: string): Rpc;
export declare function constructWithdrawRpc(multisigAddress: string, amount: BigNumber, tokenAddress?: string, recipient?: string): Rpc;
export declare function constructInstallRpc(appInstanceId: string): Rpc;
export declare function constructRejectInstallRpc(appInstanceId: string): Rpc;
export declare function constructAppProposalRpc(proposedToIdentifier: string, appDefinition: string, abiEncodings: AppABIEncodings, initialState: SolidityValueType, initiatorDeposit?: BigNumber, initiatorDepositTokenAddress?: string, responderDeposit?: BigNumber, responderDepositTokenAddress?: string): Rpc;
export declare function constructInstallVirtualRpc(appInstanceId: string, intermediaryIdentifier: string): Rpc;
export declare function constructVirtualProposalRpc(proposedToIdentifier: string, appDefinition: string, abiEncodings: AppABIEncodings, initialState?: SolidityValueType, initiatorDeposit?: BigNumber, initiatorDepositTokenAddress?: string, responderDeposit?: BigNumber, responderDepositTokenAddress?: string): Rpc;
export declare function confirmProposedAppInstance(methodParams: CFCoreTypes.MethodParams, appInstanceProposal: AppInstanceProposal, nonInitiatingNode?: boolean): void;
export declare function constructGetStateRpc(appInstanceId: string): Rpc;
export declare function constructTakeActionRpc(appInstanceId: string, action: any): Rpc;
export declare function constructGetAppsRpc(): Rpc;
export declare function constructUninstallRpc(appInstanceId: string): Rpc;
export declare function constructUninstallVirtualRpc(appInstanceId: string, intermediaryIdentifier: string): Rpc;
export declare function collateralizeChannel(multisigAddress: string, node1: Node, node2: Node, amount?: BigNumber, tokenAddress?: string, collateralizeNode2?: boolean): Promise<void>;
export declare function createChannel(nodeA: Node, nodeB: Node): Promise<string>;
export declare function installApp(nodeA: Node, nodeB: Node, appDefinition: string, initialState?: SolidityValueType, initiatorDeposit?: BigNumber, initiatorDepositTokenAddress?: string, responderDeposit?: BigNumber, responderDepositTokenAddress?: string): Promise<[string, ProposeInstallProtocolParams]>;
export declare function installVirtualApp(nodeA: Node, nodeB: Node, nodeC: Node, appDefinition: string, initialState?: SolidityValueType, assetId?: string, initiatorDeposit?: BigNumber, responderDeposit?: BigNumber): Promise<string>;
export declare function confirmChannelCreation(nodeA: Node, nodeB: Node, ownersFreeBalanceAddress: string[], data: CFCoreTypes.CreateChannelResult): Promise<void>;
export declare function confirmAppInstanceInstallation(proposedParams: ProposeInstallProtocolParams, appInstance: AppInstanceJson): Promise<void>;
export declare function getState(nodeA: Node, appInstanceId: string): Promise<SolidityValueType>;
export declare function makeVirtualProposal(nodeA: Node, nodeC: Node, appDefinition: string, initialState?: SolidityValueType, assetId?: string, initiatorDeposit?: BigNumber, responderDeposit?: BigNumber): Promise<{
    appInstanceId: string;
    params: ProposeInstallProtocolParams;
}>;
export declare function installTTTVirtual(node: Node, appInstanceId: string, intermediaryIdentifier: string): Promise<JsonRpcResponse>;
export declare function makeInstallCall(node: Node, appInstanceId: string): Promise<JsonRpcResponse>;
export declare function makeVirtualProposeCall(nodeA: Node, nodeC: Node, appDefinition: string, initialState?: SolidityValueType): Promise<{
    appInstanceId: string;
    params: CFCoreTypes.ProposeInstallVirtualParams;
}>;
export declare function makeProposeCall(nodeB: Node, appDefinition: string, initialState?: SolidityValueType, initiatorDeposit?: BigNumber, initiatorDepositTokenAddress?: string, responderDeposit?: BigNumber, responderDepositTokenAddress?: string): Rpc;
export declare function makeAndSendProposeCall(nodeA: Node, nodeB: Node, appDefinition: string, initialState?: SolidityValueType, initiatorDeposit?: BigNumber, initiatorDepositTokenAddress?: string, responderDeposit?: BigNumber, responderDepositTokenAddress?: string): Promise<{
    appInstanceId: string;
    params: ProposeInstallProtocolParams;
}>;
export declare function transferERC20Tokens(toAddress: string, tokenAddress?: string, contractABI?: ContractABI, amount?: BigNumber): Promise<BigNumber>;
export declare function getAppContext(appDefinition: string, initialState?: SolidityValueType, senderAddress?: string, receiverAddress?: string): AppContext;
export declare function uninstallVirtualApp(node: Node, counterparty: Node, intermediaryPubId: string, appId: string): Promise<string>;
export declare function takeAppAction(node: Node, appId: string, action: any): Promise<any>;
export declare function uninstallApp(node: Node, counterparty: Node, appId: string): Promise<string>;
export declare function getApps(node: Node): Promise<AppInstanceJson[]>;
export declare function getBalances(nodeA: Node, nodeB: Node, multisigAddress: string, tokenAddress: string): Promise<[BigNumber, BigNumber]>;
export {};
//# sourceMappingURL=utils.d.ts.map