import AppWithAction from "@connext/cf-adjudicator-contracts/build/AppWithAction.json";
import ChallengeRegistry from "@connext/cf-adjudicator-contracts/build/ChallengeRegistry.json";
import CounterfactualApp from "@connext/cf-adjudicator-contracts/build/CounterfactualApp.json";
import ConditionalTransactionDelegateTarget from "@connext/cf-funding-protocol-contracts/build/ConditionalTransactionDelegateTarget.json";
import DolphinCoin from "@connext/cf-funding-protocol-contracts/build/DolphinCoin.json";
import ERC20 from "@connext/cf-funding-protocol-contracts/build/ERC20.json";
import IdentityApp from "@connext/cf-funding-protocol-contracts/build/IdentityApp.json";
import MinimumViableMultisig from "@connext/cf-funding-protocol-contracts/build/MinimumViableMultisig.json";
import Proxy from "@connext/cf-funding-protocol-contracts/build/Proxy.json";
import ProxyFactory from "@connext/cf-funding-protocol-contracts/build/ProxyFactory.json";
import TwoPartyFixedOutcomeApp from "@connext/cf-funding-protocol-contracts/build/TwoPartyFixedOutcomeApp.json";
import { NetworkContext } from "@connext/types";
import { Wallet } from "ethers";
export declare type NetworkContextForTestSuite = NetworkContext & {
    TicTacToeApp: string;
    DolphinCoin: string;
    UnidirectionalTransferApp: string;
    UnidirectionalLinkedTransferApp: string;
    SimpleTransferApp: string;
};
export declare const deployTestArtifactsToChain: (wallet: Wallet) => Promise<any>;
export { AppWithAction, ChallengeRegistry, ConditionalTransactionDelegateTarget, CounterfactualApp, DolphinCoin, ERC20, IdentityApp, MinimumViableMultisig, Proxy, ProxyFactory, TwoPartyFixedOutcomeApp, };
//# sourceMappingURL=contracts.d.ts.map