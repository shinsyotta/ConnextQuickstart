import { AddressZero } from "ethers/constants";
import { BigNumber, getAddress } from "ethers/utils";
const getType = (input) => {
    if (typeof input === "string")
        return "str";
    if (BigNumber.isBigNumber(input))
        return "bignumber";
    if (typeof input === "number")
        return "number";
    throw new Error(`Unknown input type: ${typeof input}, value: ${JSON.stringify(input)}`);
};
const castFunctions = {
    "bignumber-str": (x) => x.toString(),
    "number-bignumber": (x) => new BigNumber(x),
    "number-str": (x) => x.toString(),
    "str-bignumber": (x) => new BigNumber(x),
};
export const convertFields = (fromType, toType, fields, input) => {
    if (fromType === toType)
        return input;
    if (toType === "number") {
        throw new Error("Should not convert fields to numbers");
    }
    let key;
    if (fromType === "number" && toType === "str") {
        key = `bignumber-str`;
    }
    else if (fromType === "number") {
        key = `str-${toType}`;
    }
    const cast = castFunctions[key || [fromType, toType].join("-")];
    if (!cast)
        throw new Error(`No castFunc for ${fromType} -> ${toType}`);
    const res = Object.assign({}, input);
    for (const field of fields) {
        const name = field.split("?")[0];
        const isOptional = field.endsWith("?");
        if (isOptional && !(name in input))
            continue;
        res[name] = cast(input[name]);
    }
    return res;
};
export function makeChecksum(address) {
    try {
        return getAddress(address);
    }
    catch (e) {
        console.log(`Caught error converting address, returning original input value (${address}). Error: ${JSON.stringify(e, null, 2)}`);
        return address;
    }
}
export function makeChecksumOrEthAddress(address) {
    if (!address) {
        return AddressZero;
    }
    return makeChecksum(address);
}
export function convertAmountField(to, obj) {
    const fromType = getType(obj.amount);
    return convertFields(fromType, to, ["amount"], obj);
}
export function convertAssetAmount(to, obj) {
    return convertAmountField(to, obj);
}
export function convertAssetAmountWithId(to, obj) {
    const asset = Object.assign({}, obj, { assetId: makeChecksumOrEthAddress(obj.assetId) });
    return convertAssetAmount(to, asset);
}
export function convertPaymentProfile(to, obj) {
    const fromType = getType(obj.amountToCollateralize);
    return convertFields(fromType, to, ["amountToCollateralize", "minimumMaintainedCollateral"], obj);
}
export function convertCoinBalanceRefund(to, obj) {
    const fromType = getType(obj.threshold);
    return convertFields(fromType, to, ["threshold"], obj);
}
export function convertDepositParametersToAsset(to, obj) {
    return convertAssetAmountWithId(to, obj);
}
export function convertSwapParameters(to, obj) {
    const asset = Object.assign({}, obj, { fromAssetId: makeChecksumOrEthAddress(obj.fromAssetId), toAssetId: makeChecksumOrEthAddress(obj.toAssetId) });
    return convertAmountField(to, asset);
}
export function convertTransferParametersToAsset(to, obj) {
    return convertAssetAmountWithId(to, obj);
}
export function convertLinkedTransferParametersToAsset(to, obj) {
    return convertAssetAmountWithId(to, obj);
}
export function convertLinkedTransferToRecipientParametersToAsset(to, obj) {
    return convertAssetAmountWithId(to, obj);
}
export function convertWithdrawParametersToAsset(to, obj) {
    return convertAssetAmountWithId(to, obj);
}
export function convertAppState(to, obj) {
    return Object.assign({}, obj, { coinTransfers: [
            convertAmountField(to, obj.coinTransfers[0]),
            convertAmountField(to, obj.coinTransfers[1]),
        ] });
}
export function convertLinkedTransferAppState(to, obj) {
    return Object.assign({}, convertAmountField(to, obj), { coinTransfers: [
            convertAmountField(to, obj.coinTransfers[0]),
            convertAmountField(to, obj.coinTransfers[1]),
        ] });
}
export const convert = {
    AppState: convertAppState,
    Asset: convertAssetAmount,
    CoinBalanceRefundApp: convertCoinBalanceRefund,
    Deposit: convertDepositParametersToAsset,
    LinkedTransfer: convertLinkedTransferParametersToAsset,
    LinkedTransferAppState: convertLinkedTransferAppState,
    LinkedTransferToRecipient: convertLinkedTransferToRecipientParametersToAsset,
    PaymentProfile: convertPaymentProfile,
    ResolveLinkedTransfer: convertAssetAmountWithId,
    SimpleTransferAppState: convertAppState,
    SwapAppState: convertAppState,
    SwapParameters: convertSwapParameters,
    Transfer: convertAssetAmount,
    TransferParameters: convertTransferParametersToAsset,
    Withdraw: convertWithdrawParametersToAsset,
};
//# sourceMappingURL=convert.js.map