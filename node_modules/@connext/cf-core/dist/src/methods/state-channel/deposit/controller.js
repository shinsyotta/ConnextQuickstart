"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const rpc_server_1 = require("rpc-server");
const constants_1 = require("../../../constants");
const contracts_1 = require("../../../contracts");
const models_1 = require("../../../models");
const types_1 = require("../../../types");
const controller_1 = require("../../controller");
const errors_1 = require("../../errors");
const operation_1 = require("./operation");
const utils_1 = require("../../../utils");
class DepositController extends controller_1.NodeController {
    constructor() {
        super(...arguments);
        this.executeMethod = super.executeMethod;
    }
    async getRequiredLockNames(requestHandler, params) {
        return [params.multisigAddress];
    }
    async beforeExecution(requestHandler, params) {
        const { store, provider, networkContext } = requestHandler;
        const { multisigAddress, amount, tokenAddress: tokenAddressParam } = params;
        const tokenAddress = tokenAddressParam || constants_1.CONVENTION_FOR_ETH_TOKEN_ADDRESS;
        const channel = await store.getStateChannel(multisigAddress);
        if (!channel.proxyFactoryAddress) {
            throw Error(errors_1.INVALID_FACTORY_ADDRESS(channel.proxyFactoryAddress));
        }
        const expectedMultisigAddress = await utils_1.getCreate2MultisigAddress(channel.userNeuteredExtendedKeys, channel.proxyFactoryAddress, networkContext.MinimumViableMultisig, provider);
        if (expectedMultisigAddress !== channel.multisigAddress) {
            throw Error(errors_1.INCORRECT_MULTISIG_ADDRESS);
        }
        if (channel.hasBalanceRefundAppInstance(networkContext.CoinBalanceRefundApp, tokenAddress)) {
            throw Error(errors_1.CANNOT_DEPOSIT);
        }
        if (!channel.hasProposedBalanceRefundAppInstance(networkContext.CoinBalanceRefundApp, tokenAddress)) {
            throw Error(errors_1.COIN_BALANCE_NOT_PROPOSED);
        }
        const address = await requestHandler.getSignerAddress();
        if (tokenAddress !== constants_1.CONVENTION_FOR_ETH_TOKEN_ADDRESS) {
            const contract = new ethers_1.Contract(tokenAddress, contracts_1.ERC20.abi, provider);
            let balance;
            try {
                balance = await contract.functions.balanceOf(address);
            }
            catch (e) {
                throw Error(errors_1.FAILED_TO_GET_ERC20_BALANCE(tokenAddress, address));
            }
            if (balance.lt(amount)) {
                throw Error(errors_1.INSUFFICIENT_ERC20_FUNDS_TO_DEPOSIT(address, tokenAddress, amount, balance));
            }
        }
        else {
            const balanceOfSigner = await provider.getBalance(address);
            if (balanceOfSigner.lt(amount)) {
                throw Error(`${errors_1.INSUFFICIENT_FUNDS}: ${address}`);
            }
        }
    }
    async executeMethodImplementation(requestHandler, params) {
        const { outgoing, provider } = requestHandler;
        const { multisigAddress, tokenAddress } = params;
        params.tokenAddress = tokenAddress || constants_1.CONVENTION_FOR_ETH_TOKEN_ADDRESS;
        await operation_1.installBalanceRefundApp(requestHandler, params);
        await operation_1.makeDeposit(requestHandler, params);
        await operation_1.uninstallBalanceRefundApp(requestHandler, params);
        const { messagingService, publicIdentifier, store } = requestHandler;
        const [counterpartyAddress] = await models_1.StateChannel.getPeersAddressFromChannel(publicIdentifier, store, multisigAddress);
        const payload = {
            from: publicIdentifier,
            type: "DEPOSIT_CONFIRMED_EVENT",
            data: params
        };
        await messagingService.send(counterpartyAddress, payload);
        outgoing.emit("DEPOSIT_CONFIRMED_EVENT", payload);
        const multisigBalance = params.tokenAddress === constants_1.CONVENTION_FOR_ETH_TOKEN_ADDRESS
            ? await provider.getBalance(multisigAddress)
            : await new ethers_1.Contract(tokenAddress, contracts_1.ERC20.abi, provider).functions.balanceOf(multisigAddress);
        return {
            multisigBalance,
            tokenAddress: params.tokenAddress
        };
    }
}
__decorate([
    rpc_server_1.jsonRpcMethod(types_1.CFCoreTypes.RpcMethodNames.chan_deposit),
    __metadata("design:type", Function)
], DepositController.prototype, "executeMethod", void 0);
exports.default = DepositController;
//# sourceMappingURL=controller.js.map