"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/utils");
const contracts_1 = require("../contracts");
const multisig_commitment_1 = require("./multisig-commitment");
const types_1 = require("./types");
const app_identity_1 = require("./utils/app-identity");
const iface = new utils_1.Interface(contracts_1.ConditionalTransactionDelegateTarget.abi);
class SetupCommitment extends multisig_commitment_1.MultisigCommitment {
    constructor(networkContext, multisigAddress, multisigOwners, freeBalanceAppIdentity) {
        super(multisigAddress, multisigOwners);
        this.networkContext = networkContext;
        this.multisigAddress = multisigAddress;
        this.multisigOwners = multisigOwners;
        this.freeBalanceAppIdentity = freeBalanceAppIdentity;
    }
    getTransactionDetails() {
        return {
            data: iface.functions.executeEffectOfFreeBalance.encode([
                this.networkContext.ChallengeRegistry,
                app_identity_1.appIdentityToHash(this.freeBalanceAppIdentity),
                this.networkContext.MultiAssetMultiPartyCoinTransferInterpreter,
            ]),
            operation: types_1.MultisigOperation.DelegateCall,
            to: this.networkContext.ConditionalTransactionDelegateTarget,
            value: 0,
        };
    }
}
exports.SetupCommitment = SetupCommitment;
//# sourceMappingURL=setup-commitment.js.map