import { BaseProvider } from "ethers/providers";
import { StateChannel } from "../models";
import { NetworkContext } from "../types";
import { Opcode, Protocol } from "./enums";
import { MiddlewareContainer } from "./middleware";
import { InstallProtocolParams, InstallVirtualAppProtocolParams, Middleware, ProposeInstallProtocolParams, ProtocolMessage, SetupProtocolParams, TakeActionProtocolParams, UninstallProtocolParams, UninstallVirtualAppProtocolParams, UpdateProtocolParams, WithdrawProtocolParams } from "./types";
declare type ParamTypeOf<T extends Protocol> = T extends Protocol.Install ? InstallProtocolParams : T extends Protocol.Update ? UpdateProtocolParams : T extends Protocol.Uninstall ? UninstallProtocolParams : T extends Protocol.InstallVirtualApp ? InstallVirtualAppProtocolParams : T extends Protocol.UninstallVirtualApp ? UninstallVirtualAppProtocolParams : T extends Protocol.TakeAction ? TakeActionProtocolParams : T extends Protocol.Withdraw ? WithdrawProtocolParams : T extends Protocol.Propose ? ProposeInstallProtocolParams : never;
export declare class ProtocolRunner {
    readonly network: NetworkContext;
    readonly provider: BaseProvider;
    middlewares: MiddlewareContainer;
    constructor(network: NetworkContext, provider: BaseProvider);
    register(scope: Opcode, method: Middleware): void;
    runProtocolWithMessage(msg: ProtocolMessage, sc: Map<string, StateChannel>): Promise<Map<string, StateChannel>>;
    initiateProtocol<T extends Protocol>(protocolName: T, sc: Map<string, StateChannel>, params: ParamTypeOf<T>): Promise<Map<string, StateChannel>>;
    runSetupProtocol(params: SetupProtocolParams): Promise<Map<string, StateChannel>>;
    private runProtocol;
}
export {};
//# sourceMappingURL=protocol-runner.d.ts.map