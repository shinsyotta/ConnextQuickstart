"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const lib_1 = require("../lib");
exports.falsy = (x) => !!x;
function notBigNumber(value) {
    return ethers_1.utils.BigNumber.isBigNumber(value)
        ? undefined
        : `Value "${lib_1.stringify(value)}" is not a bignumber`;
}
exports.notBigNumber = notBigNumber;
function notBigNumberish(value) {
    try {
        ethers_1.utils.bigNumberify(value);
    }
    catch (e) {
        return `Value ${lib_1.stringify(value)} is not bignumberish: ${e.message}`;
    }
    return undefined;
}
exports.notBigNumberish = notBigNumberish;
function notGreaterThan(value, ceil) {
    if (notBigNumberish(value)) {
        return notBigNumberish(value);
    }
    return ethers_1.utils.bigNumberify(value).gt(ethers_1.utils.bigNumberify(ceil))
        ? undefined
        : `Value (${value.toString()}) is not greater than ${ceil.toString()}`;
}
exports.notGreaterThan = notGreaterThan;
function notGreaterThanOrEqualTo(value, ceil) {
    if (notBigNumberish(value)) {
        return notBigNumberish(value);
    }
    return ethers_1.utils.bigNumberify(value).gte(ceil)
        ? undefined
        : `Value (${value.toString()}) is not greater than or equal to ${ceil.toString()}`;
}
exports.notGreaterThanOrEqualTo = notGreaterThanOrEqualTo;
function notLessThan(value, floor) {
    if (notBigNumberish(value)) {
        return notBigNumberish(value);
    }
    return ethers_1.utils.bigNumberify(value).lt(floor)
        ? undefined
        : `Value (${value.toString()}) is not less than ${floor.toString()}`;
}
exports.notLessThan = notLessThan;
function notLessThanOrEqualTo(value, floor) {
    if (notBigNumberish(value)) {
        return notBigNumberish(value);
    }
    return ethers_1.utils.bigNumberify(value).lte(floor)
        ? undefined
        : `Value (${value.toString()}) is not less than or equal to ${floor.toString()}`;
}
exports.notLessThanOrEqualTo = notLessThanOrEqualTo;
function notPositive(value) {
    return notGreaterThanOrEqualTo(value, 0);
}
exports.notPositive = notPositive;
function notNegative(value) {
    return notLessThan(0, value);
}
exports.notNegative = notNegative;
//# sourceMappingURL=bn.js.map