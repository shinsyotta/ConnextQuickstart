"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1_json_1 = __importDefault(require("@counterfactual/cf-adjudicator-contracts/networks/1.json"));
const _3_json_1 = __importDefault(require("@counterfactual/cf-adjudicator-contracts/networks/3.json"));
const _4_json_1 = __importDefault(require("@counterfactual/cf-adjudicator-contracts/networks/4.json"));
const _42_json_1 = __importDefault(require("@counterfactual/cf-adjudicator-contracts/networks/42.json"));
const _1_json_2 = __importDefault(require("@counterfactual/cf-funding-protocol-contracts/networks/1.json"));
const _3_json_2 = __importDefault(require("@counterfactual/cf-funding-protocol-contracts/networks/3.json"));
const _4_json_2 = __importDefault(require("@counterfactual/cf-funding-protocol-contracts/networks/4.json"));
const _42_json_2 = __importDefault(require("@counterfactual/cf-funding-protocol-contracts/networks/42.json"));
const loglevel_1 = __importDefault(require("loglevel"));
const errors_1 = require("./methods/errors");
const types_1 = require("./types");
const utils_1 = require("./utils");
var EthereumNetworkName;
(function (EthereumNetworkName) {
    EthereumNetworkName["Main"] = "mainnet";
    EthereumNetworkName["Ropsten"] = "ropsten";
    EthereumNetworkName["Rinkeby"] = "rinkeby";
    EthereumNetworkName["Kovan"] = "kovan";
})(EthereumNetworkName = exports.EthereumNetworkName || (exports.EthereumNetworkName = {}));
exports.SUPPORTED_NETWORKS = new Set([
    EthereumNetworkName.Main,
    EthereumNetworkName.Ropsten,
    EthereumNetworkName.Rinkeby,
    EthereumNetworkName.Kovan,
]);
function getNetworkEnum(network) {
    switch (network.toLocaleLowerCase()) {
        case "mainnet":
            return EthereumNetworkName.Main;
        case "ropsten":
            return EthereumNetworkName.Ropsten;
        case "rinkeby":
            return EthereumNetworkName.Rinkeby;
        case "kovan":
            return EthereumNetworkName.Kovan;
        default:
            throw Error(`Network ${network} not supported. Supported networks are ${exports.SUPPORTED_NETWORKS.values()}`);
    }
}
exports.getNetworkEnum = getNetworkEnum;
function getNetworkContextForNetworkName(networkName) {
    loglevel_1.default.info(`Configuring Node to use contracts on networkName: ${networkName}`);
    switch (networkName) {
        case EthereumNetworkName.Main:
            return getNetworkContextFromNetworksFile([
                ..._1_json_2.default,
                ..._1_json_1.default
            ]);
        case EthereumNetworkName.Ropsten:
            return getNetworkContextFromNetworksFile([
                ..._3_json_2.default,
                ..._3_json_1.default
            ]);
        case EthereumNetworkName.Rinkeby:
            return getNetworkContextFromNetworksFile([
                ..._4_json_2.default,
                ..._4_json_1.default
            ]);
        case EthereumNetworkName.Kovan:
            return getNetworkContextFromNetworksFile([
                ..._42_json_2.default,
                ..._42_json_1.default
            ]);
        default:
            throw Error(`${errors_1.INVALID_NETWORK_NAME}: ${networkName}. \n
         The following networks are supported:
         ${utils_1.prettyPrintObject(Array.from(exports.SUPPORTED_NETWORKS.values()))}`);
    }
}
exports.getNetworkContextForNetworkName = getNetworkContextForNetworkName;
function getNetworkContextFromNetworksFile(listOfDeployedContractsFromNetworkFile) {
    return types_1.EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT.reduce((acc, contractName) => (Object.assign({}, acc, { [contractName]: getContractAddressFromNetworksFile(listOfDeployedContractsFromNetworkFile, contractName) })), {});
}
function getContractAddressFromNetworksFile(listOfDeployedContractsFromNetworkFile, contractName) {
    const matched = listOfDeployedContractsFromNetworkFile.filter(networkFileEntry => networkFileEntry.contractName === contractName);
    if (!matched.length) {
        throw Error(`Could not find any deployed contract address for ${contractName}`);
    }
    return matched[0].address;
}
//# sourceMappingURL=network-configuration.js.map