"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
exports.address = "0x627306090abab3a6e1400e9345bc60c78a8bef57";
exports.mnemonic = "candy maple cake sugar pudding cream honey rich smooth crumble sweet treat";
exports.privateKey = "0x8339a8d4aa2aa5771f0230f50c725a4d6e6b7bc87bbf8b63b0c260285346eff6";
exports.ethUrl = process.env.ETH_RPC_URL || "http://localhost:8545";
exports.nodeUrl = process.env.NODE_URL || "nats://morecoolstuffs";
class MockMessagingService {
    constructor(opts) {
        this.returnVals = MockNodeClientApi.returnValues;
        this.log = new lib_1.Logger("MockMessagingService", opts ? opts.logLevel : 3);
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            this.log.info(`Connect`);
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            this.log.info(`Disconnect`);
        });
    }
    onReceive(subject, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.log.info(`Registered callback for subject ${subject}`);
        });
    }
    request(subject, timeout, body) {
        this.log.info(`Sending request to ${subject}`);
        return this.returnVals[subject];
    }
    send(to, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            this.log.info(`Sending message to ${to}: ${JSON.stringify(msg)}`);
        });
    }
    publish(to, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            this.log.info(`Publishing message to ${to}: ${JSON.stringify(msg)}`);
        });
    }
    subscribe(subject, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.log.info(`Registered subscription for subject ${subject}`);
        });
    }
    unsubscribe(subject) {
        return __awaiter(this, void 0, void 0, function* () {
            this.log.info(`Unsubscribing from ${subject}`);
        });
    }
    flush() {
        return __awaiter(this, void 0, void 0, function* () {
            this.log.info(`Flushing messaging connection`);
        });
    }
    patch(subject, returnValue) {
        this.returnVals[subject] = returnValue;
    }
}
exports.MockMessagingService = MockMessagingService;
class MockNodeClientApi {
    constructor(opts = {}) {
        this.log = new lib_1.Logger("MockNodeClientApi", opts.logLevel);
        this.messaging = opts.messaging || new MockMessagingService(opts);
        this.nonce = undefined;
        this.signature = undefined;
    }
    acquireLock(lockName, callback, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            this.log.info(`acquireLock`);
        });
    }
    appRegistry(appDetails) {
        return __awaiter(this, void 0, void 0, function* () {
            return MockNodeClientApi.returnValues.appRegistry;
        });
    }
    config() {
        return __awaiter(this, void 0, void 0, function* () {
            return MockNodeClientApi.returnValues.config;
        });
    }
    getChannel() {
        return __awaiter(this, void 0, void 0, function* () {
            return MockNodeClientApi.returnValues.getChannel;
        });
    }
    getLatestSwapRate(from, to) {
        return __awaiter(this, void 0, void 0, function* () {
            return "100";
        });
    }
    getTransferHistory() {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    createChannel() {
        return __awaiter(this, void 0, void 0, function* () {
            return MockNodeClientApi.returnValues.createChannel;
        });
    }
    recipientOnline(recipientPublicIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    subscribeToSwapRates(from, to, store) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    unsubscribeFromSwapRates(from, to) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    requestCollateral() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    withdraw() {
        return __awaiter(this, void 0, void 0, function* () {
            return MockNodeClientApi.returnValues.withdraw;
        });
    }
    fetchLinkedTransfer(paymentId) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    resolveLinkedTransfer() {
        return __awaiter(this, void 0, void 0, function* () {
            return MockNodeClientApi.returnValues.resolveLinkedTransfer;
        });
    }
    restoreState(publicIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                multisigAddress: exports.address,
            };
        });
    }
    addPaymentProfile() {
        return __awaiter(this, void 0, void 0, function* () {
            return MockNodeClientApi.returnValues.addPaymentProfile;
        });
    }
    getPaymentProfile() {
        return __awaiter(this, void 0, void 0, function* () {
            return undefined;
        });
    }
    verifyAppSequenceNumber() {
        return __awaiter(this, void 0, void 0, function* () {
            return MockNodeClientApi.returnValues.verifyAppSequenceNumber;
        });
    }
}
MockNodeClientApi.returnValues = {
    addPaymentProfile: {},
    appRegistry: {},
    config: {
        chainId: "mocks",
        nodePublicIdentifier: "x-pubcooolstuffs",
        nodeUrl: exports.nodeUrl,
    },
    createChannel: {},
    getChannel: {},
    resolveLinkedTransfer: {},
    verifyAppSequenceNumber: {},
    withdraw: {},
};
exports.MockNodeClientApi = MockNodeClientApi;
//# sourceMappingURL=mocks.js.map