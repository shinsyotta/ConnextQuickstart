import { BigNumber } from "ethers/utils";
import { AppState, CoinBalanceRefundAppState, CoinTransfer, SimpleLinkedTransferAppState } from "./app";
import { AssetAmount, PaymentProfile } from "./channel";
import { DepositParameters, LinkedTransferParameters, LinkedTransferToRecipientParameters, SwapParameters, TransferParameters, WithdrawParameters } from "./inputs";
export interface NumericTypes {
    str: string;
    bignumber: BigNumber;
    number: number;
    any: any;
}
export declare type NumericTypeName = keyof NumericTypes;
export declare const convertFields: (fromType: "number" | "str" | "bignumber" | "any", toType: "number" | "str" | "bignumber" | "any", fields: string[], input: any) => any;
export declare function makeChecksum(address: string): string;
export declare function makeChecksumOrEthAddress(address: string | undefined): string;
declare type GenericAmountObject<T> = any & {
    amount: T;
};
export declare function convertAmountField<To extends NumericTypeName>(to: To, obj: GenericAmountObject<any>): GenericAmountObject<NumericTypes[To]>;
export declare function convertAssetAmount<To extends NumericTypeName>(to: To, obj: AssetAmount<any>): AssetAmount<NumericTypes[To]>;
export declare function convertAssetAmount<To extends NumericTypeName>(to: To, obj: CoinTransfer<any>): CoinTransfer<NumericTypes[To]>;
export declare function convertAssetAmountWithId<To extends NumericTypeName>(to: To, obj: GenericAmountObject<any> & {
    assetId?: string;
}): any;
export declare function convertPaymentProfile<To extends NumericTypeName>(to: To, obj: PaymentProfile<any>): PaymentProfile<NumericTypes[To]>;
export declare function convertCoinBalanceRefund<To extends NumericTypeName>(to: To, obj: CoinBalanceRefundAppState<any>): CoinBalanceRefundAppState<NumericTypes[To]>;
export declare function convertDepositParametersToAsset<To extends NumericTypeName>(to: To, obj: DepositParameters<any>): AssetAmount<NumericTypes[To]>;
export declare function convertSwapParameters<To extends NumericTypeName>(to: To, obj: SwapParameters<any>): SwapParameters<NumericTypes[To]>;
export declare function convertTransferParametersToAsset<To extends NumericTypeName>(to: To, obj: TransferParameters<any>): TransferParameters<NumericTypes[To]>;
export declare function convertLinkedTransferParametersToAsset<To extends NumericTypeName>(to: To, obj: LinkedTransferParameters<any>): LinkedTransferParameters<NumericTypes[To]>;
export declare function convertLinkedTransferToRecipientParametersToAsset<To extends NumericTypeName>(to: To, obj: LinkedTransferToRecipientParameters<any>): LinkedTransferToRecipientParameters<NumericTypes[To]>;
export declare function convertWithdrawParametersToAsset<To extends NumericTypeName>(to: To, obj: WithdrawParameters<any>): WithdrawParameters<NumericTypes[To]>;
export declare function convertAppState<To extends NumericTypeName>(to: To, obj: AppState<any>): AppState<NumericTypes[To]>;
export declare function convertLinkedTransferAppState<To extends NumericTypeName>(to: To, obj: AppState<any>): SimpleLinkedTransferAppState<NumericTypes[To]>;
export declare const convert: {
    AppState: typeof convertAppState;
    Asset: typeof convertAssetAmount;
    CoinBalanceRefundApp: typeof convertCoinBalanceRefund;
    Deposit: typeof convertDepositParametersToAsset;
    LinkedTransfer: typeof convertLinkedTransferParametersToAsset;
    LinkedTransferAppState: typeof convertLinkedTransferAppState;
    LinkedTransferToRecipient: typeof convertLinkedTransferToRecipientParametersToAsset;
    PaymentProfile: typeof convertPaymentProfile;
    ResolveLinkedTransfer: typeof convertAssetAmountWithId;
    SimpleTransferAppState: typeof convertAppState;
    SwapAppState: typeof convertAppState;
    SwapParameters: typeof convertSwapParameters;
    Transfer: typeof convertAssetAmount;
    TransferParameters: typeof convertTransferParametersToAsset;
    Withdraw: typeof convertWithdrawParametersToAsset;
};
export {};
//# sourceMappingURL=convert.d.ts.map