{"version":3,"file":"index.js","sources":["../src/logger.ts","../src/nats.ts","../src/ws.ts","../src/factory.ts"],"sourcesContent":["export class Logger {\n  private levels: { [key: string]: number } = { debug: 4, info: 3, warn: 2, error: 1 };\n  private logLevel: number = 3;\n  private name: string = \"Logger\";\n\n  public constructor(name?: string, logLevel?: number) {\n    this.name = typeof name !== \"undefined\" ? name : this.name;\n    this.logLevel =\n      typeof logLevel !== \"undefined\" ? parseInt(logLevel.toString(), 10) : this.logLevel;\n  }\n\n  public error(msg: string): void {\n    this.log(\"error\", msg);\n  }\n\n  public warn(msg: string): void {\n    this.log(\"warn\", msg);\n  }\n\n  public info(msg: string): void {\n    this.log(\"info\", msg);\n  }\n\n  public debug(msg: string): void {\n    this.log(\"debug\", msg);\n  }\n\n  private log(level: string, msg: string): void {\n    if (this.levels[level] > this.logLevel) return;\n    return (console as any)[level](`${level}: [${this.name}] ${msg}`);\n  }\n}\n","import { CFCoreTypes } from \"@connext/types\";\nimport * as nats from \"ts-nats\";\n\nimport { Logger } from \"./logger\";\nimport { IMessagingService, MessagingConfig } from \"./types\";\n\nexport class NatsMessagingService implements IMessagingService {\n  private connection: nats.Client | undefined;\n  private log: Logger;\n  private subscriptions: { [key: string]: nats.Subscription } = {};\n\n  constructor(\n    private readonly config: MessagingConfig,\n    private readonly messagingServiceKey: string,\n  ) {\n    this.log = new Logger(\"NatsMessagingService\", config.logLevel);\n    this.log.debug(`Created with config: ${JSON.stringify(config, null, 2)}`);\n  }\n\n  async connect(): Promise<void> {\n    const messagingUrl = this.config.messagingUrl;\n    const config = this.config as nats.NatsConnectionOptions;\n    config.servers = typeof messagingUrl === \"string\" ? [messagingUrl] : messagingUrl;\n    config.payload = nats.Payload.JSON;\n    this.connection = await nats.connect(config);\n    this.log.debug(`Connected!`);\n  }\n\n  async disconnect(): Promise<void> {\n    this.assertConnected();\n    this.connection!.close();\n  }\n\n  ////////////////////////////////////////\n  // CFCoreTypes.IMessagingService Methods\n\n  async onReceive(subject: string, callback: (msg: CFCoreTypes.NodeMessage) => void): Promise<void> {\n    this.assertConnected();\n    this.subscriptions[subject] = await this.connection!.subscribe(\n      this.prependKey(`${subject}.>`),\n      (err: any, msg: any): void => {\n        if (err || !msg || !msg.data) {\n          this.log.error(`Encountered an error while handling callback for message ${msg}: ${err}`);\n        } else {\n          const data = typeof msg.data === \"string\" ? JSON.parse(msg).data : msg.data;\n          this.log.debug(`Received message for ${subject}: ${JSON.stringify(data)}`);\n          callback(data as CFCoreTypes.NodeMessage);\n        }\n      },\n    );\n  }\n\n  async send(to: string, msg: CFCoreTypes.NodeMessage): Promise<void> {\n    this.assertConnected();\n    this.log.debug(`Sending message to ${to}: ${JSON.stringify(msg)}`);\n    this.connection!.publish(this.prependKey(`${to}.${msg.from}`), msg);\n  }\n\n  ////////////////////////////////////////\n  // More generic methods\n\n  async publish(subject: string, data: any): Promise<void> {\n    this.assertConnected();\n    this.log.debug(`Publishing ${subject}: ${JSON.stringify(data)}`);\n    this.connection!.publish(subject, data);\n  }\n\n  async request(subject: string, timeout: number, data: object = {}): Promise<nats.Msg | void> {\n    this.assertConnected();\n    this.log.debug(`Requesting ${subject} with data: ${JSON.stringify(data)}`);\n    const response = await this.connection!.request(subject, timeout, data);\n    this.log.debug(`Request for ${subject} returned: ${JSON.stringify(response)}`);\n    return response;\n  }\n\n  async subscribe(subject: string, callback: (msg: CFCoreTypes.NodeMessage) => void): Promise<void> {\n    this.assertConnected();\n    this.subscriptions[subject] = await this.connection!.subscribe(\n      subject,\n      (err: any, msg: any): void => {\n        if (err || !msg || !msg.data) {\n          this.log.error(`Encountered an error while handling callback for message ${msg}: ${err}`);\n        } else {\n          const data = typeof msg === \"string\" ? JSON.parse(msg) : msg;\n          this.log.debug(`Subscription for ${subject}: ${JSON.stringify(data)}`);\n          callback(data as CFCoreTypes.NodeMessage);\n        }\n      },\n    );\n  }\n\n  async unsubscribe(subject: string): Promise<void> {\n    this.assertConnected();\n    if (this.subscriptions[subject]) {\n      this.subscriptions[subject].unsubscribe();\n      this.log.debug(`Unsubscribed from ${subject}`);\n    } else {\n      this.log.warn(`Not subscribed to ${subject}, doing nothing`);\n    }\n  }\n\n  async flush(): Promise<void> {\n    this.assertConnected();\n    await this.connection!.flush();\n  }\n\n  ////////////////////////////////////////\n  // Private Methods\n\n  private prependKey(subject: string): string {\n    return `${this.messagingServiceKey}.${subject}`;\n  }\n\n  private assertConnected(): void {\n    if (!this.connection) {\n      throw new Error(\"No connection exists, NatsMessagingService is uninitialized.\");\n    }\n  }\n}\n","import { CFCoreTypes } from \"@connext/types\";\nimport * as wsNats from \"websocket-nats\";\n\nimport { Logger } from \"./logger\";\nimport { IMessagingService, MessagingConfig } from \"./types\";\n\nexport class WsMessagingService implements IMessagingService {\n  private connection: any;\n  private log: Logger;\n  private subscriptions: { [key: string]: number } = {};\n\n  constructor(\n    private readonly config: MessagingConfig,\n    private readonly messagingServiceKey: string,\n  ) {\n    this.log = new Logger(\"WsMessagingService\", config.logLevel);\n    this.log.debug(`Created with config: ${JSON.stringify(config, null, 2)}`);\n  }\n\n  async connect(): Promise<void> {\n    this.connection = await wsNats.connect(this.config.messagingUrl);\n  }\n\n  async disconnect(): Promise<void> {\n    this.assertConnected();\n    this.connection.close();\n  }\n\n  ////////////////////////////////////////\n  // CFCoreTypes.IMessagingService Methods\n\n  async onReceive(subject: string, callback: (msg: CFCoreTypes.NodeMessage) => void): Promise<void> {\n    this.assertConnected();\n    this.subscriptions[subject] = this.connection.subscribe(\n      this.prependKey(`${subject}.>`),\n      (msg: any): void => {\n        const data = typeof msg === \"string\" ? JSON.parse(msg) : msg;\n        this.log.debug(`Received message for ${subject}: ${JSON.stringify(data)}`);\n        callback(data as CFCoreTypes.NodeMessage);\n      },\n    );\n  }\n\n  async send(to: string, msg: CFCoreTypes.NodeMessage): Promise<void> {\n    this.assertConnected();\n    this.log.debug(`Sending message to ${to}: ${JSON.stringify(msg)}`);\n    await this.connection.publish(this.prependKey(`${to}.${msg.from}`), JSON.stringify(msg));\n  }\n\n  ////////////////////////////////////////\n  // More generic methods\n\n  async publish(subject: string, data: any): Promise<void> {\n    this.assertConnected();\n    this.log.debug(`Publishing ${subject}: ${JSON.stringify(data)}`);\n    await this.connection!.publish(subject, data);\n  }\n\n  async request(subject: string, timeout: number, data: object = {}): Promise<any> {\n    this.assertConnected();\n    this.log.debug(`Requesting ${subject} with data: ${JSON.stringify(data)}`);\n    return new Promise((resolve: any, reject: any): any => {\n      this.connection.request(\n        subject,\n        JSON.stringify(data),\n        { max: 1, timeout },\n        (response: any): any => {\n          this.log.debug(`Request for ${subject} returned: ${response}`);\n          resolve({ data: JSON.parse(response) });\n        },\n      );\n    });\n  }\n\n  async subscribe(subject: string, callback: (msg: CFCoreTypes.NodeMessage) => void): Promise<void> {\n    this.assertConnected();\n    this.subscriptions[subject] = this.connection.subscribe(subject, (msg: any): void => {\n      const data = typeof msg === \"string\" ? JSON.parse(msg) : msg;\n      this.log.debug(`Subscription for ${subject}: ${JSON.stringify(data)}`);\n      callback(data as CFCoreTypes.NodeMessage);\n    });\n  }\n\n  async unsubscribe(subject: string): Promise<void> {\n    this.assertConnected();\n    if (this.subscriptions[subject]) {\n      await this.connection.unsubscribe(this.subscriptions[subject]);\n      this.log.info(`Unsubscribed from ${subject}`);\n    } else {\n      this.log.warn(`Not subscribed to ${subject}, doing nothing`);\n    }\n  }\n\n  async flush(): Promise<void> {\n    this.assertConnected();\n    await this.connection!.flush();\n  }\n\n  ////////////////////////////////////////\n  // Private\n\n  private prependKey(subject: string): string {\n    return `${this.messagingServiceKey}.${subject}`;\n  }\n\n  private assertConnected(): void {\n    if (!this.connection) {\n      throw new Error(\"No connection exists, WsMessagingService is uninitialized.\");\n    }\n  }\n}\n","import { NatsMessagingService } from \"./nats\";\nimport { IMessagingService, MessagingConfig } from \"./types\";\nimport { WsMessagingService } from \"./ws\";\n\nexport class MessagingServiceFactory {\n  private serviceType: string;\n\n  constructor(private config: MessagingConfig) {\n    const { messagingUrl } = config as any;\n    if (!messagingUrl) {\n      throw new Error(`No messaging url provided. Config: ${JSON.stringify(config)}`);\n    }\n    if (typeof messagingUrl === \"string\") {\n      this.serviceType = messagingUrl.startsWith(\"nats://\") ? \"nats\" : \"ws\";\n    } else if (messagingUrl[0] && messagingUrl[0].startsWith(\"nats://\")) {\n      this.serviceType = \"nats\";\n    } else {\n      throw new Error(`Invalid Messaging Url: ${JSON.stringify(messagingUrl)}`);\n    }\n  }\n\n  connect(): void {\n    throw Error(\"Connect service using NatsMessagingService.connect()\");\n  }\n\n  createService(messagingServiceKey: string): IMessagingService {\n    return this.serviceType === \"ws\"\n      ? new WsMessagingService(this.config, messagingServiceKey)\n      : new NatsMessagingService(this.config, messagingServiceKey);\n  }\n}\n"],"names":["nats.Payload","nats.connect","wsNats.connect"],"mappings":"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"}