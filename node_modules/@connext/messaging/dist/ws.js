import * as wsNats from "websocket-nats";
import { Logger } from "./logger";
export class WsMessagingService {
    constructor(config, messagingServiceKey) {
        this.config = config;
        this.messagingServiceKey = messagingServiceKey;
        this.subscriptions = {};
        this.log = new Logger("WsMessagingService", config.logLevel);
        this.log.debug(`Created with config: ${JSON.stringify(config, null, 2)}`);
    }
    async connect() {
        this.connection = await wsNats.connect(this.config.messagingUrl);
    }
    async disconnect() {
        this.assertConnected();
        this.connection.close();
    }
    async onReceive(subject, callback) {
        this.assertConnected();
        this.subscriptions[subject] = this.connection.subscribe(this.prependKey(`${subject}.>`), (msg) => {
            const data = typeof msg === "string" ? JSON.parse(msg) : msg;
            this.log.debug(`Received message for ${subject}: ${JSON.stringify(data)}`);
            callback(data);
        });
    }
    async send(to, msg) {
        this.assertConnected();
        this.log.debug(`Sending message to ${to}: ${JSON.stringify(msg)}`);
        await this.connection.publish(this.prependKey(`${to}.${msg.from}`), JSON.stringify(msg));
    }
    async publish(subject, data) {
        this.assertConnected();
        this.log.debug(`Publishing ${subject}: ${JSON.stringify(data)}`);
        await this.connection.publish(subject, data);
    }
    async request(subject, timeout, data = {}) {
        this.assertConnected();
        this.log.debug(`Requesting ${subject} with data: ${JSON.stringify(data)}`);
        return new Promise((resolve, reject) => {
            this.connection.request(subject, JSON.stringify(data), { max: 1, timeout }, (response) => {
                this.log.debug(`Request for ${subject} returned: ${response}`);
                resolve({ data: JSON.parse(response) });
            });
        });
    }
    async subscribe(subject, callback) {
        this.assertConnected();
        this.subscriptions[subject] = this.connection.subscribe(subject, (msg) => {
            const data = typeof msg === "string" ? JSON.parse(msg) : msg;
            this.log.debug(`Subscription for ${subject}: ${JSON.stringify(data)}`);
            callback(data);
        });
    }
    async unsubscribe(subject) {
        this.assertConnected();
        if (this.subscriptions[subject]) {
            await this.connection.unsubscribe(this.subscriptions[subject]);
            this.log.info(`Unsubscribed from ${subject}`);
        }
        else {
            this.log.warn(`Not subscribed to ${subject}, doing nothing`);
        }
    }
    async flush() {
        this.assertConnected();
        await this.connection.flush();
    }
    prependKey(subject) {
        return `${this.messagingServiceKey}.${subject}`;
    }
    assertConnected() {
        if (!this.connection) {
            throw new Error("No connection exists, WsMessagingService is uninitialized.");
        }
    }
}
//# sourceMappingURL=ws.js.map