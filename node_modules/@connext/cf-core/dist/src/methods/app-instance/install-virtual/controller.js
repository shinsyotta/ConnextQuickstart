"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_server_1 = require("rpc-server");
const types_1 = require("../../../types");
const controller_1 = require("../../controller");
const operation_1 = require("./operation");
class InstallVirtualController extends controller_1.NodeController {
    constructor() {
        super(...arguments);
        this.executeMethod = super.executeMethod;
    }
    async getRequiredLockNames(requestHandler, params) {
        const { store, publicIdentifier, networkContext } = requestHandler;
        const { appInstanceId, intermediaryIdentifier } = params;
        const multisigAddressWithHub = await store.getMultisigAddressWithCounterparty([publicIdentifier, intermediaryIdentifier], networkContext.ProxyFactory, networkContext.MinimumViableMultisig);
        const proposal = await store.getAppInstanceProposal(appInstanceId);
        const { proposedByIdentifier, proposedToIdentifier } = proposal;
        const responding = proposedByIdentifier === publicIdentifier
            ? proposedToIdentifier
            : proposedByIdentifier;
        const multisigAddressWithResponding = await store.getMultisigAddressWithCounterparty([publicIdentifier, responding], networkContext.ProxyFactory, networkContext.MinimumViableMultisig);
        const multisigAddressBetweenHubAndResponding = await store.getMultisigAddressWithCounterparty([intermediaryIdentifier, responding], networkContext.ProxyFactory, networkContext.MinimumViableMultisig, networkContext.provider);
        return [
            multisigAddressWithHub,
            multisigAddressWithResponding,
            multisigAddressBetweenHubAndResponding
        ];
    }
    async beforeExecution(requestHandler, params) {
        const { store, publicIdentifier, networkContext } = requestHandler;
        const { intermediaryIdentifier } = params;
        if (!intermediaryIdentifier) {
            throw Error("Cannot install virtual app: you did not provide an intermediary.");
        }
        const multisigAddress = await store.getMultisigAddressWithCounterparty([publicIdentifier, intermediaryIdentifier], networkContext.ProxyFactory, networkContext.MinimumViableMultisig);
        const stateChannelWithIntermediary = await store.getStateChannel(multisigAddress);
        if (!stateChannelWithIntermediary) {
            throw Error("Cannot install virtual app: you do not have a channel with the intermediary provided.");
        }
        if (!stateChannelWithIntermediary.freeBalance) {
            throw Error("Cannot install virtual app: channel with intermediary has no free balance app instance installed.");
        }
    }
    async executeMethodImplementation(requestHandler, params) {
        const { store, protocolRunner } = requestHandler;
        const { appInstanceId } = params;
        await store.getAppInstanceProposal(appInstanceId);
        await operation_1.installVirtual(store, protocolRunner, params);
        return {
            appInstance: (await store.getAppInstance(appInstanceId)).toJson()
        };
    }
}
__decorate([
    rpc_server_1.jsonRpcMethod(types_1.CFCoreTypes.RpcMethodNames.chan_installVirtual),
    __metadata("design:type", Object)
], InstallVirtualController.prototype, "executeMethod", void 0);
exports.default = InstallVirtualController;
//# sourceMappingURL=controller.js.map