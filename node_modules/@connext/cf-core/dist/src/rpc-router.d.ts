import { Controller, JsonRpcResponse, Router, Rpc } from "rpc-server";
import { RequestHandler } from "./request-handler";
declare type AsyncCallback = (...args: any) => Promise<any>;
export default class RpcRouter extends Router {
    private readonly requestHandler;
    constructor({ controllers, requestHandler }: {
        controllers: typeof Controller[];
        requestHandler: RequestHandler;
    });
    dispatch(rpc: Rpc): Promise<JsonRpcResponse>;
    subscribe(event: string, callback: AsyncCallback): Promise<void>;
    subscribeOnce(event: string, callback: AsyncCallback): Promise<void>;
    unsubscribe(event: string, callback?: AsyncCallback): Promise<void>;
    emit(event: string, data: any, emitter?: string): Promise<void>;
    eventListenerCount(event: string): number;
}
export {};
//# sourceMappingURL=rpc-router.d.ts.map