import { BigNumber } from "ethers/utils";
import { Address, OutcomeType, SolidityValueType } from "./cf";
import { CFCoreChannel } from "./channel";
export declare const SupportedApplications: {
    CoinBalanceRefundApp: string;
    SimpleLinkedTransferApp: string;
    SimpleTransferApp: string;
    SimpleTwoPartySwapApp: string;
};
export declare type SupportedApplication = keyof typeof SupportedApplications;
export declare const SupportedNetworks: {
    ganache: string;
    goerli: string;
    homestead: string;
    kovan: string;
    rinkeby: string;
    ropsten: string;
};
export declare type SupportedNetwork = keyof typeof SupportedNetworks;
export declare type DefaultApp = {
    actionEncoding?: string;
    allowNodeInstall: boolean;
    appDefinitionAddress: string;
    name: SupportedApplication;
    network: SupportedNetwork;
    outcomeType: OutcomeType;
    stateEncoding: string;
};
export declare type AppRegistry = DefaultApp[];
export declare type App<T = string> = {
    id: number;
    channel: CFCoreChannel;
    appRegistry: DefaultApp;
    appId: number;
    xpubPartyA: string;
    xpubPartyB: string;
    depositA: T;
    depositB: T;
    intermediaries: string[];
    initialState: any;
    timeout: number;
    updates: AppUpdate[];
};
export declare type AppBigNumber = App<BigNumber>;
export declare type AppUpdate<T = string> = {
    id: number;
    app: App<T>;
    action: any;
    sigs: string[];
};
export declare type AppUpdateBigNumber = AppUpdate<BigNumber>;
export declare type CoinTransfer<T = string> = {
    amount: T;
    to: Address;
};
export declare type CoinTransferBigNumber = CoinTransfer<BigNumber>;
export declare type AppState<T = string> = SimpleTransferAppState<T> | SimpleLinkedTransferAppState<T> | SimpleSwapAppState<T>;
export declare type AppStateBigNumber = AppState<BigNumber>;
export declare type AppAction<T = string> = SimpleLinkedTransferAppAction | SolidityValueType;
export declare type AppActionBigNumber = AppAction<BigNumber> | SolidityValueType;
export declare type SimpleSwapAppState<T = string> = {
    coinTransfers: CoinTransfer<T>[][];
};
export declare type SimpleSwapAppStateBigNumber = SimpleSwapAppState<BigNumber>;
export declare type SimpleTransferAppState<T = string> = {
    coinTransfers: CoinTransfer<T>[];
};
export declare type SimpleTransferAppStateBigNumber = SimpleTransferAppState<BigNumber>;
export declare type SimpleLinkedTransferAppState<T = string> = {
    coinTransfers: CoinTransfer<T>[];
    linkedHash: string;
    amount: T;
    assetId: string;
    paymentId: string;
    preImage: string;
};
export declare type SimpleLinkedTransferAppStateBigNumber = SimpleLinkedTransferAppState<BigNumber>;
export declare type SimpleLinkedTransferAppAction = {
    preImage: string;
};
export declare type UnidirectionalTransferAppState<T = string> = {
    finalized: false;
    transfers: [CoinTransfer<T>, CoinTransfer<T>];
    stage: UnidirectionalTransferAppStage;
    turnNum: T;
};
export declare type UnidirectionalTransferAppStateBigNumber = UnidirectionalTransferAppState<BigNumber>;
export declare enum UnidirectionalTransferAppActionType {
    SEND_MONEY = 0,
    END_CHANNEL = 1
}
export declare type UnidirectionalTransferAppAction<T = string> = {
    actionType: UnidirectionalTransferAppActionType;
    amount: T;
};
export declare enum UnidirectionalTransferAppStage {
    POST_FUND = 0,
    MONEY_SENT = 1,
    CHANNEL_CLOSED = 2
}
export declare type UnidirectionalLinkedTransferAppState<T = string> = {
    stage: UnidirectionalLinkedTransferAppStage;
    transfers: [CoinTransfer<T>, CoinTransfer<T>];
    linkedHash: string;
    turnNum: T;
    finalized: false;
};
export declare type UnidirectionalLinkedTransferAppStateBigNumber = UnidirectionalLinkedTransferAppState<BigNumber>;
export declare type UnidirectionalLinkedTransferAppAction<T = string> = {
    amount: T;
    assetId: Address;
    paymentId: string;
    preImage: string;
};
export declare type UnidirectionalLinkedTransferAppActionBigNumber = UnidirectionalLinkedTransferAppAction<BigNumber>;
export declare enum UnidirectionalLinkedTransferAppStage {
    POST_FUND = 0,
    PAYMENT_CLAIMED = 1,
    CHANNEL_CLOSED = 2
}
export declare type CoinBalanceRefundAppState<T = string> = {
    multisig: string;
    recipient: string;
    threshold: T;
    tokenAddress: string;
};
export declare type CoinBalanceRefundAppStateBigNumber = CoinBalanceRefundAppState<BigNumber>;
//# sourceMappingURL=app.d.ts.map