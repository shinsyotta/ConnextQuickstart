"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@connext/types");
const dotenv_extended_1 = __importDefault(require("dotenv-extended"));
const ethers_1 = require("ethers");
const providers_1 = require("ethers/providers");
const utils_1 = require("ethers/utils");
const hdnode_1 = require("ethers/utils/hdnode");
const contracts_1 = require("./contracts");
const test_constants_jest_1 = require("./test-constants.jest");
dotenv_extended_1.default.load();
const env = {
    ETHPROVIDER_URL: process.env.ETHPROVIDER_URL || "http://localhost:8545",
    SUGAR_DADDY: process.env.SUGAR_DADDY ||
        "candy maple cake sugar pudding cream honey rich smooth crumble sweet treat",
};
const fundAddress = async (to, ethProvider) => {
    const sugarDaddy = ethers_1.Wallet.fromMnemonic(env.SUGAR_DADDY).connect(ethProvider);
    const tx = await sugarDaddy.sendTransaction({ to, value: utils_1.parseEther("1000") });
    if (!tx.hash)
        throw new Error(`Couldn't fund account ${to}`);
    await ethProvider.waitForTransaction(tx.hash);
};
async function globalSetup() {
    const ethProvider = new providers_1.JsonRpcProvider(env.ETHPROVIDER_URL);
    const network = await ethProvider.getNetwork();
    const fundedAccount = ethers_1.Wallet.createRandom().connect(ethProvider);
    const addresses = [test_constants_jest_1.A_EXTENDED_PRIVATE_KEY, test_constants_jest_1.B_EXTENDED_PRIVATE_KEY, test_constants_jest_1.C_EXTENDED_PRIVATE_KEY].map((xprv) => hdnode_1.fromExtendedKey(xprv).derivePath(`${types_1.CF_PATH}/0`).address);
    await fundAddress(addresses[0], ethProvider);
    await fundAddress(addresses[1], ethProvider);
    await fundAddress(addresses[2], ethProvider);
    await fundAddress(fundedAccount.address, ethProvider);
    global["fundedPrivateKey"] = fundedAccount.privateKey;
    global["ganacheUrl"] = env.ETHPROVIDER_URL;
    global["networkContext"] = await contracts_1.deployTestArtifactsToChain(fundedAccount);
}
exports.default = globalSetup;
//# sourceMappingURL=global-setup.jest.js.map