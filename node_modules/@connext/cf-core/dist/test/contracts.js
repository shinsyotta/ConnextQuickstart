"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AppWithAction_json_1 = __importDefault(require("@connext/cf-adjudicator-contracts/build/AppWithAction.json"));
exports.AppWithAction = AppWithAction_json_1.default;
const ChallengeRegistry_json_1 = __importDefault(require("@connext/cf-adjudicator-contracts/build/ChallengeRegistry.json"));
exports.ChallengeRegistry = ChallengeRegistry_json_1.default;
const CounterfactualApp_json_1 = __importDefault(require("@connext/cf-adjudicator-contracts/build/CounterfactualApp.json"));
exports.CounterfactualApp = CounterfactualApp_json_1.default;
const SimpleTransferApp_json_1 = __importDefault(require("@connext/cf-apps/build/SimpleTransferApp.json"));
const TicTacToeApp_json_1 = __importDefault(require("@connext/cf-apps/build/TicTacToeApp.json"));
const UnidirectionalLinkedTransferApp_json_1 = __importDefault(require("@connext/cf-apps/build/UnidirectionalLinkedTransferApp.json"));
const UnidirectionalTransferApp_json_1 = __importDefault(require("@connext/cf-apps/build/UnidirectionalTransferApp.json"));
const CoinBalanceRefundApp_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/CoinBalanceRefundApp.json"));
const ConditionalTransactionDelegateTarget_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/ConditionalTransactionDelegateTarget.json"));
exports.ConditionalTransactionDelegateTarget = ConditionalTransactionDelegateTarget_json_1.default;
const DolphinCoin_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/DolphinCoin.json"));
exports.DolphinCoin = DolphinCoin_json_1.default;
const ERC20_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/ERC20.json"));
exports.ERC20 = ERC20_json_1.default;
const IdentityApp_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/IdentityApp.json"));
exports.IdentityApp = IdentityApp_json_1.default;
const MinimumViableMultisig_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/MinimumViableMultisig.json"));
exports.MinimumViableMultisig = MinimumViableMultisig_json_1.default;
const MultiAssetMultiPartyCoinTransferInterpreter_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/MultiAssetMultiPartyCoinTransferInterpreter.json"));
const Proxy_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/Proxy.json"));
exports.Proxy = Proxy_json_1.default;
const ProxyFactory_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/ProxyFactory.json"));
exports.ProxyFactory = ProxyFactory_json_1.default;
const SingleAssetTwoPartyCoinTransferInterpreter_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/SingleAssetTwoPartyCoinTransferInterpreter.json"));
const TimeLockedPassThrough_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/TimeLockedPassThrough.json"));
const TwoPartyFixedOutcomeApp_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/TwoPartyFixedOutcomeApp.json"));
exports.TwoPartyFixedOutcomeApp = TwoPartyFixedOutcomeApp_json_1.default;
const TwoPartyFixedOutcomeFromVirtualAppInterpreter_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/TwoPartyFixedOutcomeFromVirtualAppInterpreter.json"));
const TwoPartyFixedOutcomeInterpreter_json_1 = __importDefault(require("@connext/cf-funding-protocol-contracts/build/TwoPartyFixedOutcomeInterpreter.json"));
const ethers_1 = require("ethers");
exports.deployTestArtifactsToChain = async (wallet) => {
    const coinBalanceRefundContract = await new ethers_1.ContractFactory(CoinBalanceRefundApp_json_1.default.abi, CoinBalanceRefundApp_json_1.default.evm.bytecode, wallet).deploy();
    const dolphinCoin = await new ethers_1.ContractFactory(DolphinCoin_json_1.default.abi, DolphinCoin_json_1.default.evm.bytecode, wallet).deploy();
    const identityApp = await new ethers_1.ContractFactory(IdentityApp_json_1.default.abi, IdentityApp_json_1.default.evm.bytecode, wallet).deploy();
    const mvmContract = await new ethers_1.ContractFactory(MinimumViableMultisig_json_1.default.abi, MinimumViableMultisig_json_1.default.evm.bytecode, wallet).deploy();
    const proxyFactoryContract = await new ethers_1.ContractFactory(ProxyFactory_json_1.default.abi, ProxyFactory_json_1.default.evm.bytecode, wallet).deploy();
    const coinTransferETHInterpreter = await new ethers_1.ContractFactory(MultiAssetMultiPartyCoinTransferInterpreter_json_1.default.abi, MultiAssetMultiPartyCoinTransferInterpreter_json_1.default.evm.bytecode, wallet).deploy();
    const twoPartyFixedOutcomeInterpreter = await new ethers_1.ContractFactory(TwoPartyFixedOutcomeInterpreter_json_1.default.abi, TwoPartyFixedOutcomeInterpreter_json_1.default.evm.bytecode, wallet).deploy();
    const challengeRegistry = await new ethers_1.ContractFactory(ChallengeRegistry_json_1.default.abi, ChallengeRegistry_json_1.default.evm.bytecode, wallet).deploy();
    const conditionalTransactionDelegateTarget = await new ethers_1.ContractFactory(ConditionalTransactionDelegateTarget_json_1.default.abi, ConditionalTransactionDelegateTarget_json_1.default.evm.bytecode, wallet).deploy();
    const twoPartyFixedOutcomeFromVirtualAppETHInterpreter = await new ethers_1.ContractFactory(TwoPartyFixedOutcomeFromVirtualAppInterpreter_json_1.default.abi, TwoPartyFixedOutcomeFromVirtualAppInterpreter_json_1.default.evm.bytecode, wallet).deploy();
    const tttContract = await new ethers_1.ContractFactory(TicTacToeApp_json_1.default.abi, TicTacToeApp_json_1.default.evm.bytecode, wallet).deploy();
    const transferContract = await new ethers_1.ContractFactory(UnidirectionalTransferApp_json_1.default.abi, UnidirectionalTransferApp_json_1.default.evm.bytecode, wallet).deploy();
    const simpleTransferContract = await new ethers_1.ContractFactory(SimpleTransferApp_json_1.default.abi, SimpleTransferApp_json_1.default.evm.bytecode, wallet).deploy();
    const linkContract = await new ethers_1.ContractFactory(UnidirectionalLinkedTransferApp_json_1.default.abi, UnidirectionalLinkedTransferApp_json_1.default.evm.bytecode, wallet).deploy();
    const timeLockedPassThrough = await new ethers_1.ContractFactory(TimeLockedPassThrough_json_1.default.abi, TimeLockedPassThrough_json_1.default.evm.bytecode, wallet).deploy();
    const singleAssetTwoPartyCoinTransferInterpreter = await new ethers_1.ContractFactory(SingleAssetTwoPartyCoinTransferInterpreter_json_1.default.abi, SingleAssetTwoPartyCoinTransferInterpreter_json_1.default.evm.bytecode, wallet).deploy();
    return {
        ChallengeRegistry: challengeRegistry.address,
        CoinBalanceRefundApp: coinBalanceRefundContract.address,
        ConditionalTransactionDelegateTarget: conditionalTransactionDelegateTarget.address,
        DolphinCoin: dolphinCoin.address,
        IdentityApp: identityApp.address,
        MinimumViableMultisig: mvmContract.address,
        MultiAssetMultiPartyCoinTransferInterpreter: coinTransferETHInterpreter.address,
        ProxyFactory: proxyFactoryContract.address,
        SimpleTransferApp: simpleTransferContract.address,
        SingleAssetTwoPartyCoinTransferInterpreter: singleAssetTwoPartyCoinTransferInterpreter.address,
        TicTacToeApp: tttContract.address,
        TimeLockedPassThrough: timeLockedPassThrough.address,
        TwoPartyFixedOutcomeFromVirtualAppInterpreter: twoPartyFixedOutcomeFromVirtualAppETHInterpreter.address,
        TwoPartyFixedOutcomeInterpreter: twoPartyFixedOutcomeInterpreter.address,
        UnidirectionalLinkedTransferApp: linkContract.address,
        UnidirectionalTransferApp: transferContract.address,
    };
};
//# sourceMappingURL=contracts.js.map