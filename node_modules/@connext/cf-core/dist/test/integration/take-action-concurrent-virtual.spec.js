"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/utils");
const bignumber_jest_matcher_1 = require("../machine/integration/bignumber-jest-matcher");
const setup_1 = require("./setup");
const tic_tac_toe_1 = require("./tic-tac-toe");
const utils_2 = require("./utils");
expect.extend({ toBeLt: bignumber_jest_matcher_1.toBeLt });
jest.setTimeout(15000);
const { TicTacToeApp } = global["networkContext"];
describe("Concurrently taking action on virtual apps without issue", () => {
    let multisigAddressAB;
    let multisigAddressBC;
    let nodeA;
    let nodeB;
    let nodeC;
    beforeEach(async () => {
        const context = await setup_1.setup(global, true);
        nodeA = context["A"].node;
        nodeB = context["B"].node;
        nodeC = context["C"].node;
        multisigAddressAB = await utils_2.createChannel(nodeA, nodeB);
        multisigAddressBC = await utils_2.createChannel(nodeB, nodeC);
        await utils_2.collateralizeChannel(multisigAddressAB, nodeA, nodeB, utils_1.parseEther("2"));
        await utils_2.collateralizeChannel(multisigAddressBC, nodeB, nodeC, utils_1.parseEther("2"));
    });
    it("can handle two concurrent TTT virtual app take actions", async (done) => {
        const INSTALLED_APPS = 2;
        const appIds = [];
        nodeA.on("INSTALL_VIRTUAL_EVENT", (msg) => {
            expect(msg.data.params.appInstanceId).toBeTruthy();
            appIds.push(msg.data.params.appInstanceId);
        });
        for (const i of Array(INSTALLED_APPS)) {
            await utils_2.installVirtualApp(nodeA, nodeB, nodeC, TicTacToeApp);
        }
        while (appIds.length !== INSTALLED_APPS) {
            await new Promise(resolve => setTimeout(resolve, 20));
        }
        let appsTakenActionOn = 0;
        nodeC.on("UPDATE_STATE_EVENT", () => {
            appsTakenActionOn += 1;
            if (appsTakenActionOn === 2)
                done();
        });
        const takeActionReq = (appId) => utils_2.constructTakeActionRpc(appId, tic_tac_toe_1.validAction);
        nodeA.rpcRouter.dispatch(takeActionReq(appIds[0]));
        nodeA.rpcRouter.dispatch(takeActionReq(appIds[1]));
    });
});
//# sourceMappingURL=take-action-concurrent-virtual.spec.js.map