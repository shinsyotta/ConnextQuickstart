import { ethers as eth } from 'ethers';
import { BN } from './lib';
import { Address, ChannelEventReason, ChannelState, ChannelStateBN, ConfirmPendingArgs, DepositArgs, DepositArgsBN, EmptyChannelArgs, ExchangeArgs, ExchangeArgsBN, Interface, InvalidationArgs, Payment, PaymentArgs, PaymentArgsBN, PaymentBN, PendingArgs, PendingExchangeArgs, Provider, SignedDepositRequestProposal, ThreadState, ThreadStateBN, TransactionReceipt, UnsignedChannelState, UnsignedChannelStateBN, UnsignedThreadState, UpdateRequest, VerboseChannelEventBN, WithdrawalArgs } from './types';
export declare class Validator {
    abi: Interface;
    hubAddress: Address;
    provider: Provider;
    private generateHandlers;
    private stateGenerator;
    private utils;
    constructor(hubAddress: Address, provider: any, abi: any);
    assertChannelSigner(channelState: ChannelState, signer?: 'user' | 'hub'): void;
    assertDepositRequestSigner(req: SignedDepositRequestProposal, signer: Address): void;
    assertThreadSigner(threadState: ThreadState): void;
    calculateChannelTotals(state: ChannelStateBN | UnsignedChannelStateBN, outOfChannel: PaymentBN): any;
    cantAffordFromBalance(state: ChannelStateBN, value: Partial<PaymentBN>, payor: 'hub' | 'user', currency?: 'token' | 'wei'): string | undefined;
    cantAffordFromBalance(state: ThreadStateBN, value: Partial<PaymentBN>, payor: 'sender', currency?: 'token' | 'wei'): string | undefined;
    channelPayment(prev: ChannelStateBN, args: PaymentArgsBN): string | undefined;
    closeThread(prev: ChannelStateBN, initialThreadStates: ThreadState[], args: ThreadStateBN): string | undefined;
    confirmPending(prev: ChannelStateBN, args: ConfirmPendingArgs): Promise<string | undefined>;
    emptyChannel(_prev: ChannelStateBN, args: EmptyChannelArgs): Promise<string | undefined>;
    exchange(prev: ChannelStateBN, args: ExchangeArgsBN): string | undefined;
    generateChannelPayment(prevStr: ChannelState, argsStr: PaymentArgs): UnsignedChannelState;
    generateChannelStateFromRequest(prev: ChannelState, request: UpdateRequest): Promise<UnsignedChannelState>;
    generateCloseThread(prevStr: ChannelState, initialThreadStates: ThreadState[], argsStr: ThreadState): UnsignedChannelState;
    generateConfirmPending(prevStr: ChannelState, args: ConfirmPendingArgs): Promise<UnsignedChannelState>;
    generateEmptyChannel(prevStr: ChannelState, args: EmptyChannelArgs): Promise<UnsignedChannelState>;
    invalidation(prev: ChannelStateBN, args: InvalidationArgs): any;
    generateExchange(prevStr: ChannelState, argsStr: ExchangeArgs): UnsignedChannelState;
    generateInvalidation(prevStr: ChannelState, argsStr: InvalidationArgs): any;
    generateOpenThread(prevStr: ChannelState, initialThreadStates: ThreadState[], argsStr: ThreadState): UnsignedChannelState;
    generateProposePending: (prevStr: ChannelState<string>, argsStr: PendingArgs<string>) => UnsignedChannelState<string>;
    generateProposePendingDeposit(prevStr: ChannelState, argsStr: DepositArgs): UnsignedChannelState;
    generateProposePendingExchange: (prevStr: ChannelState<string>, argsStr: PendingExchangeArgs<string>) => UnsignedChannelState<string>;
    generateProposePendingWithdrawal(prevStr: ChannelState, argsStr: WithdrawalArgs): UnsignedChannelState;
    generateThreadPayment(prevStr: ThreadState, argsStr: Payment): UnsignedThreadState;
    hasPendingOps(state: ChannelStateBN | UnsignedChannelStateBN): string | undefined;
    openThread(prev: ChannelStateBN, initialThreadStates: ThreadState[], args: ThreadStateBN): string | undefined;
    parseChannelEventTxReceipt(name: ChannelEventReason, txReceipt: TransactionReceipt, contractAddress: string): VerboseChannelEventBN[];
    parseDidUpdateChannelTxReceipt(txReceipt: TransactionReceipt): any;
    payment: (params: Payment<eth.utils.BigNumber>) => string | undefined;
    proposePending: (prev: ChannelState<eth.utils.BigNumber>, args: PendingArgs<eth.utils.BigNumber>) => string | undefined;
    proposePendingDeposit(prev: ChannelStateBN, args: DepositArgsBN): string | undefined;
    proposePendingExchange: (prev: ChannelState<eth.utils.BigNumber>, args: PendingExchangeArgs<eth.utils.BigNumber>) => string | undefined;
    proposePendingWithdrawal: (prev: ChannelState<eth.utils.BigNumber>, args: WithdrawalArgs<eth.utils.BigNumber>) => string | undefined;
    threadPayment(prev: ThreadStateBN, args: {
        amountToken: BN;
        amountWei: BN;
    }): string | undefined;
    validateAddress(adr: Address): undefined | string;
    withdrawalParams: (params: import("./types").WithdrawalParameters<eth.utils.BigNumber>) => string | undefined;
    private _pendingValidator;
    private checkThreadRootAndCount;
    private isValidInitialThreadState;
    private isValidStateTransition;
    private isValidStateTransitionRequest;
    private isValidThreadState;
}
