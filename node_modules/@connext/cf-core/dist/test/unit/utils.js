"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@connext/types");
const constants_1 = require("ethers/constants");
const utils_1 = require("ethers/utils");
const constants_2 = require("../../src/constants");
const xkeys_1 = require("../../src/machine/xkeys");
const models_1 = require("../../src/models");
function createAppInstanceProposalForTest(appInstanceId) {
    return {
        identityHash: appInstanceId,
        proposedByIdentifier: xkeys_1.computeRandomExtendedPrvKey(),
        proposedToIdentifier: xkeys_1.computeRandomExtendedPrvKey(),
        appDefinition: constants_1.AddressZero,
        abiEncodings: {
            stateEncoding: "tuple(address foo, uint256 bar)",
            actionEncoding: undefined
        },
        initiatorDeposit: "0x00",
        responderDeposit: "0x00",
        timeout: "0x01",
        initialState: {
            foo: constants_1.AddressZero,
            bar: 0
        },
        appSeqNo: 0,
        outcomeType: types_1.OutcomeType.TWO_PARTY_FIXED_OUTCOME,
        initiatorDepositTokenAddress: constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS,
        responderDepositTokenAddress: constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS
    };
}
exports.createAppInstanceProposalForTest = createAppInstanceProposalForTest;
function createAppInstanceForTest(stateChannel) {
    return new models_1.AppInstance(stateChannel
        ? stateChannel.getSigningKeysFor(stateChannel.numProposedApps)
        : [
            utils_1.getAddress(utils_1.hexlify(utils_1.randomBytes(20))),
            utils_1.getAddress(utils_1.hexlify(utils_1.randomBytes(20)))
        ], 0, {
        addr: utils_1.getAddress(utils_1.hexlify(utils_1.randomBytes(20))),
        stateEncoding: "tuple(address foo, uint256 bar)",
        actionEncoding: undefined
    }, false, stateChannel
        ? stateChannel.numProposedApps
        : Math.ceil(1000 * Math.random()), { foo: constants_1.AddressZero, bar: utils_1.bigNumberify(0) }, 0, Math.ceil(1000 * Math.random()), types_1.OutcomeType.TWO_PARTY_FIXED_OUTCOME, {
        playerAddrs: [constants_1.AddressZero, constants_1.AddressZero],
        amount: constants_1.Zero,
        tokenAddress: constants_1.AddressZero
    }, undefined, undefined);
}
exports.createAppInstanceForTest = createAppInstanceForTest;
//# sourceMappingURL=utils.js.map