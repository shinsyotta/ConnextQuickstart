import { Contract } from "ethers";
import { BaseProvider } from "ethers/providers";
import { AppIdentity, AppInstanceJson, AppInterface, MultiAssetMultiPartyCoinTransferInterpreterParams, OutcomeType, SingleAssetTwoPartyCoinTransferInterpreterParams, SolidityValueType, TwoPartyFixedOutcomeInterpreterParams } from "../types";
export declare class AppInstance {
    readonly participants: string[];
    readonly defaultTimeout: number;
    readonly appInterface: AppInterface;
    readonly isVirtualApp: boolean;
    readonly appSeqNo: number;
    readonly latestState: any;
    readonly latestVersionNumber: number;
    readonly latestTimeout: number;
    readonly outcomeType: OutcomeType;
    private readonly twoPartyOutcomeInterpreterParamsInternal?;
    private readonly multiAssetMultiPartyCoinTransferInterpreterParamsInternal?;
    private readonly singleAssetTwoPartyCoinTransferInterpreterParamsInternal?;
    constructor(participants: string[], defaultTimeout: number, appInterface: AppInterface, isVirtualApp: boolean, appSeqNo: number, latestState: any, latestVersionNumber: number, latestTimeout: number, outcomeType: OutcomeType, twoPartyOutcomeInterpreterParamsInternal?: TwoPartyFixedOutcomeInterpreterParams | undefined, multiAssetMultiPartyCoinTransferInterpreterParamsInternal?: MultiAssetMultiPartyCoinTransferInterpreterParams | undefined, singleAssetTwoPartyCoinTransferInterpreterParamsInternal?: SingleAssetTwoPartyCoinTransferInterpreterParams | undefined);
    readonly twoPartyOutcomeInterpreterParams: TwoPartyFixedOutcomeInterpreterParams;
    readonly multiAssetMultiPartyCoinTransferInterpreterParams: MultiAssetMultiPartyCoinTransferInterpreterParams;
    readonly singleAssetTwoPartyCoinTransferInterpreterParams: SingleAssetTwoPartyCoinTransferInterpreterParams;
    static fromJson(json: AppInstanceJson): AppInstance;
    toJson(): AppInstanceJson;
    readonly identityHash: string;
    readonly identity: AppIdentity;
    readonly hashOfLatestState: string;
    readonly encodedLatestState: string;
    readonly encodedInterpreterParams: string;
    readonly state: any;
    readonly versionNumber: number;
    readonly timeout: number;
    setState(newState: SolidityValueType, timeout?: number): AppInstance;
    computeOutcome(state: SolidityValueType, provider: BaseProvider): Promise<string>;
    computeOutcomeWithCurrentState(provider: BaseProvider): Promise<string>;
    computeStateTransition(action: SolidityValueType, provider: BaseProvider): Promise<SolidityValueType>;
    encodeAction(action: SolidityValueType): string;
    encodeState(state: SolidityValueType): string;
    decodeAppState(encodedSolidityValueType: string): SolidityValueType;
    toEthersContract(provider: BaseProvider): Contract;
}
//# sourceMappingURL=app-instance.d.ts.map