import { Signer } from "ethers";
import { BaseProvider } from "ethers/providers";
import EventEmitter from "eventemitter3";
import { ProtocolRunner } from "./machine";
import ProcessQueue from "./process-queue";
import RpcRouter from "./rpc-router";
import { Store } from "./store";
import { NetworkContext, CFCoreTypes, NodeEvent } from "./types";
export declare class RequestHandler {
    readonly publicIdentifier: string;
    readonly incoming: EventEmitter;
    readonly outgoing: EventEmitter;
    readonly storeService: CFCoreTypes.IStoreService;
    readonly messagingService: CFCoreTypes.IMessagingService;
    readonly protocolRunner: ProtocolRunner;
    readonly networkContext: NetworkContext;
    readonly provider: BaseProvider;
    readonly wallet: Signer;
    readonly blocksNeededForConfirmation: number;
    readonly processQueue: ProcessQueue;
    private readonly methods;
    private readonly events;
    store: Store;
    router: RpcRouter;
    constructor(publicIdentifier: string, incoming: EventEmitter, outgoing: EventEmitter, storeService: CFCoreTypes.IStoreService, messagingService: CFCoreTypes.IMessagingService, protocolRunner: ProtocolRunner, networkContext: NetworkContext, provider: BaseProvider, wallet: Signer, storeKeyPrefix: string, blocksNeededForConfirmation: number, processQueue: ProcessQueue);
    injectRouter(router: RpcRouter): void;
    callMethod(method: CFCoreTypes.MethodName, req: CFCoreTypes.MethodRequest): Promise<CFCoreTypes.MethodResponse>;
    private mapPublicApiMethods;
    private mapEventHandlers;
    callEvent(event: NodeEvent, msg: CFCoreTypes.NodeMessage): Promise<void>;
    isLegacyEvent(event: NodeEvent): Promise<boolean>;
    getSigner(): Promise<Signer>;
    getSignerAddress(): Promise<string>;
}
//# sourceMappingURL=request-handler.d.ts.map