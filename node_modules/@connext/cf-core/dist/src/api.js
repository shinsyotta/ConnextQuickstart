"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const handle_node_message_1 = require("./message-handling/handle-node-message");
const handle_protocol_message_1 = require("./message-handling/handle-protocol-message");
const methods_1 = require("./methods");
const rpc_router_1 = __importDefault(require("./rpc-router"));
const controllers = [
    methods_1.CreateChannelController,
    methods_1.DepositController,
    methods_1.InstallAppInstanceController,
    methods_1.InstallVirtualAppInstanceController,
    methods_1.ProposeInstallAppInstanceController,
    methods_1.RejectInstallController,
    methods_1.RescindDepositRightsController,
    methods_1.RequestDepositRightsController,
    methods_1.TakeActionController,
    methods_1.UninstallController,
    methods_1.UninstallVirtualController,
    methods_1.UpdateStateController,
    methods_1.WithdrawCommitmentController,
    methods_1.WithdrawController,
    methods_1.GetAllChannelAddressesController,
    methods_1.GetAppInstanceController,
    methods_1.GetAppInstanceStateController,
    methods_1.GetFreeBalanceStateController,
    methods_1.GetTokenIndexedFreeBalancesController,
    methods_1.GetInstalledAppInstancesController,
    methods_1.GetProposedAppInstanceController,
    methods_1.GetProposedAppInstancesController,
    methods_1.GetStateDepositHolderAddressController,
    methods_1.GetStateChannelController
];
exports.methodNameToImplementation = controllers.reduce((acc, controller) => {
    if (!controller.methodName) {
        return acc;
    }
    if (acc[controller.methodName]) {
        throw Error(`Fatal: Multiple controllers connected to ${controller.methodName}`);
    }
    const handler = new controller();
    acc[controller.methodName] = handler.executeMethod.bind(handler);
    return acc;
}, {});
exports.createRpcRouter = (requestHandler) => new rpc_router_1.default({ controllers, requestHandler });
exports.eventNameToImplementation = {
    ["PROTOCOL_MESSAGE_EVENT"]: handle_protocol_message_1.handleReceivedProtocolMessage,
    ["REJECT_INSTALL_EVENT"]: handle_node_message_1.handleRejectProposalMessage,
};
//# sourceMappingURL=api.js.map