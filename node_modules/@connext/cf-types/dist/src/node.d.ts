import { BigNumber, BigNumberish } from "ethers/utils";
import { JsonRpcNotification, JsonRpcResponse, Rpc } from "rpc-server";
import { OutcomeType } from ".";
import { AppABIEncodings, AppInstanceJson, AppInstanceProposal } from "./data-types";
import { SolidityValueType } from "./simple-types";
export interface IRpcNodeProvider {
    onMessage(callback: (message: JsonRpcResponse | JsonRpcNotification) => void): any;
    sendMessage(message: Rpc): any;
}
export declare namespace Node {
    type NodeMessage = {
        from: string;
        type: EventName;
    };
    type MinimalTransaction = {
        to: string;
        value: BigNumberish;
        data: string;
    };
    interface ServiceFactory {
        connect?(host: string, port: string): ServiceFactory;
        auth?(email: string, password: string): Promise<void>;
        createMessagingService?(messagingServiceKey: string): IMessagingService;
        createStoreService?(storeServiceKey: string): IStoreService;
    }
    interface IMessagingService {
        send(to: string, msg: Node.NodeMessage): Promise<void>;
        onReceive(address: string, callback: (msg: Node.NodeMessage) => void): any;
    }
    interface IStoreService {
        get(path: string): Promise<any>;
        set(pairs: {
            path: string;
            value: any;
        }[], allowDelete?: Boolean): Promise<void>;
        reset?(): Promise<void>;
    }
    interface IPrivateKeyGenerator {
        (s: string): Promise<string>;
    }
    interface ILockService {
        acquireLock(lockName: string, callback: (...args: any[]) => any, timeout: number): Promise<any>;
    }
    enum ErrorType {
        ERROR = "error"
    }
    enum MethodName {
        ACCEPT_STATE = "acceptState",
        GET_PROPOSED_APP_INSTANCE = "getProposedAppInstance"
    }
    enum RpcMethodName {
        CREATE_CHANNEL = "chan_create",
        DEPOSIT = "chan_deposit",
        DEPLOY_STATE_DEPOSIT_HOLDER = "chan_deployStateDepositHolder",
        GET_CHANNEL_ADDRESSES = "chan_getChannelAddresses",
        GET_APP_INSTANCE_DETAILS = "chan_getAppInstance",
        GET_APP_INSTANCES = "chan_getAppInstances",
        GET_STATE_DEPOSIT_HOLDER_ADDRESS = "chan_getStateDepositHolderAddress",
        GET_FREE_BALANCE_STATE = "chan_getFreeBalanceState",
        GET_TOKEN_INDEXED_FREE_BALANCE_STATES = "chan_getTokenIndexedFreeBalanceStates",
        GET_PROPOSED_APP_INSTANCES = "chan_getProposedAppInstances",
        GET_STATE = "chan_getState",
        GET_STATE_CHANNEL = "chan_getStateChannel",
        INSTALL = "chan_install",
        REQUEST_DEPOSIT_RIGHTS = "chan_requestDepositRights",
        INSTALL_VIRTUAL = "chan_installVirtual",
        PROPOSE_INSTALL = "chan_proposeInstall",
        REJECT_INSTALL = "chan_rejectInstall",
        UPDATE_STATE = "chan_updateState",
        TAKE_ACTION = "chan_takeAction",
        UNINSTALL = "chan_uninstall",
        UNINSTALL_VIRTUAL = "chan_uninstallVirtual",
        RESCIND_DEPOSIT_RIGHTS = "chan_rescindDepositRights",
        WITHDRAW = "chan_withdraw",
        WITHDRAW_COMMITMENT = "chan_withdrawCommitment"
    }
    const EventNames: {
        CREATE_CHANNEL_EVENT: string;
        DEPOSIT_CONFIRMED_EVENT: string;
        DEPOSIT_FAILED_EVENT: string;
        DEPOSIT_STARTED_EVENT: string;
        INSTALL_EVENT: string;
        INSTALL_VIRTUAL_EVENT: string;
        REJECT_INSTALL_EVENT: string;
        UNINSTALL_EVENT: string;
        UNINSTALL_VIRTUAL_EVENT: string;
        UPDATE_STATE_EVENT: string;
        WITHDRAWAL_CONFIRMED_EVENT: string;
        WITHDRAWAL_FAILED_EVENT: string;
        WITHDRAWAL_STARTED_EVENT: string;
        PROPOSE_INSTALL_EVENT: string;
        PROTOCOL_MESSAGE_EVENT: string;
    };
    type EventName = keyof typeof EventNames;
    type CreateChannelParams = {
        owners: string[];
    };
    type CreateChannelResult = {
        multisigAddress: string;
        owners: string[];
        counterpartyXpub: string;
    };
    type CreateChannelTransactionResult = {
        multisigAddress: string;
    };
    type CreateMultisigParams = {
        owners: string[];
    };
    type CreateMultisigResult = {
        multisigAddress: string;
    };
    type DeployStateDepositHolderParams = {
        multisigAddress: string;
        retryCount?: number;
    };
    type DeployStateDepositHolderResult = {
        transactionHash: string;
    };
    type DepositParams = {
        multisigAddress: string;
        amount: BigNumber;
        tokenAddress?: string;
    };
    type DepositResult = {
        multisigBalance: BigNumber;
        tokenAddress: string;
    };
    type RequestDepositRightsResult = {
        freeBalance: {
            [s: string]: BigNumber;
        };
        recipient: string;
        tokenAddress: string;
    };
    type GetAppInstanceDetailsParams = {
        appInstanceId: string;
    };
    type GetAppInstanceDetailsResult = {
        appInstance: AppInstanceJson;
    };
    type GetStateDepositHolderAddressParams = {
        owners: string[];
    };
    type GetStateDepositHolderAddressResult = {
        address: string;
    };
    type GetAppInstancesParams = {
        multisigAddress?: string;
    };
    type GetAppInstancesResult = {
        appInstances: AppInstanceJson[];
    };
    type GetChannelAddressesParams = {};
    type GetChannelAddressesResult = {
        multisigAddresses: string[];
    };
    type GetFreeBalanceStateParams = {
        multisigAddress: string;
        tokenAddress?: string;
    };
    type GetFreeBalanceStateResult = {
        [s: string]: BigNumber;
    };
    type GetTokenIndexedFreeBalanceStatesParams = {
        multisigAddress: string;
    };
    type GetTokenIndexedFreeBalanceStatesResult = {
        [tokenAddress: string]: {
            [s: string]: BigNumber;
        };
    };
    type GetProposedAppInstancesParams = {
        multisigAddress?: string;
    };
    type GetProposedAppInstancesResult = {
        appInstances: AppInstanceProposal[];
    };
    type GetProposedAppInstanceParams = {
        appInstanceId: string;
    };
    type GetProposedAppInstanceResult = {
        appInstance: AppInstanceProposal;
    };
    type GetStateParams = {
        appInstanceId: string;
    };
    type GetStateResult = {
        state: SolidityValueType;
    };
    type InstallParams = {
        appInstanceId: string;
    };
    type RequestDepositRightsParams = {
        multisigAddress: string;
        tokenAddress?: string;
    };
    type InstallResult = {
        appInstance: AppInstanceJson;
    };
    type InstallVirtualParams = InstallParams & {
        intermediaryIdentifier: string;
    };
    type InstallVirtualResult = InstallResult;
    type ProposeInstallParams = {
        appDefinition: string;
        abiEncodings: AppABIEncodings;
        initiatorDeposit: BigNumber;
        initiatorDepositTokenAddress?: string;
        responderDeposit: BigNumber;
        responderDepositTokenAddress?: string;
        timeout: BigNumber;
        initialState: SolidityValueType;
        proposedToIdentifier: string;
        outcomeType: OutcomeType;
        meta?: Object;
    };
    type ProposeInstallVirtualParams = ProposeInstallParams & {
        intermediaryIdentifier: string;
    };
    type ProposeInstallVirtualResult = ProposeInstallResult;
    type ProposeInstallResult = {
        appInstanceId: string;
    };
    type RejectInstallParams = {
        appInstanceId: string;
    };
    type RejectInstallResult = {};
    type TakeActionParams = {
        appInstanceId: string;
        action: SolidityValueType;
    };
    type TakeActionResult = {
        newState: SolidityValueType;
    };
    type UninstallParams = {
        appInstanceId: string;
    };
    type RescindDepositRightsParams = {
        multisigAddress: string;
        tokenAddress?: string;
    };
    type UninstallResult = {};
    type UninstallVirtualParams = UninstallParams & {
        intermediaryIdentifier: string;
    };
    type UninstallVirtualResult = UninstallResult;
    type UpdateStateParams = {
        appInstanceId: string;
        newState: SolidityValueType;
    };
    type UpdateStateResult = {
        newState: SolidityValueType;
    };
    type WithdrawParams = {
        multisigAddress: string;
        recipient?: string;
        amount: BigNumber;
        tokenAddress?: string;
    };
    type WithdrawResult = {
        recipient: string;
        txHash: string;
    };
    type WithdrawCommitmentParams = WithdrawParams;
    type WithdrawCommitmentResult = {
        transaction: MinimalTransaction;
    };
    type MethodParams = GetAppInstancesParams | GetProposedAppInstancesParams | ProposeInstallParams | ProposeInstallVirtualParams | RejectInstallParams | InstallParams | InstallVirtualParams | GetStateParams | GetAppInstanceDetailsParams | TakeActionParams | UninstallParams | CreateChannelParams | GetChannelAddressesParams | DeployStateDepositHolderParams;
    type MethodResult = GetAppInstancesResult | GetProposedAppInstancesResult | ProposeInstallResult | ProposeInstallVirtualResult | RejectInstallResult | InstallResult | InstallVirtualResult | GetStateResult | GetAppInstanceDetailsResult | TakeActionResult | UninstallResult | CreateChannelResult | GetChannelAddressesResult | DeployStateDepositHolderResult;
    type CreateMultisigEventData = {
        owners: string[];
        multisigAddress: string;
    };
    type InstallEventData = {
        appInstanceId: string;
    };
    type RejectInstallEventData = {
        appInstance: AppInstanceProposal;
    };
    type UninstallEventData = {
        appInstanceId: string;
    };
    type UpdateStateEventData = {
        appInstanceId: string;
        newState: SolidityValueType;
        action?: SolidityValueType;
    };
    type WithdrawEventData = {
        amount: BigNumber;
    };
    type EventData = InstallEventData | RejectInstallEventData | UpdateStateEventData | UninstallEventData | CreateMultisigEventData;
    type MethodMessage = {
        type: MethodName;
        requestId: string;
    };
    type MethodRequest = MethodMessage & {
        params: MethodParams;
    };
    type MethodResponse = MethodMessage & {
        result: MethodResult;
    };
    type Event = {
        type: EventName;
        data: EventData;
    };
    type Error = {
        type: ErrorType;
        requestId?: string;
        data: {
            errorName: string;
            message?: string;
            appInstanceId?: string;
            extra?: {
                [k: string]: string | number | boolean | object;
            };
        };
    };
    type Message = MethodRequest | MethodResponse | Event | Error;
}
//# sourceMappingURL=node.d.ts.map