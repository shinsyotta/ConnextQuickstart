"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const utils_1 = require("ethers/utils");
const constants_2 = require("../../src/constants");
const bignumber_jest_matcher_1 = require("../machine/integration/bignumber-jest-matcher");
const setup_1 = require("./setup");
const utils_2 = require("./utils");
expect.extend({ toBeLt: bignumber_jest_matcher_1.toBeLt });
jest.setTimeout(15000);
const { TicTacToeApp } = global["networkContext"];
describe("Concurrently installing virtual and regular applications without issue", () => {
    let multisigAddressAB;
    let multisigAddressBC;
    let nodeA;
    let nodeB;
    let nodeC;
    beforeEach(async () => {
        const context = await setup_1.setup(global, true);
        nodeA = context["A"].node;
        nodeB = context["B"].node;
        nodeC = context["C"].node;
        multisigAddressAB = await utils_2.createChannel(nodeA, nodeB);
        multisigAddressBC = await utils_2.createChannel(nodeB, nodeC);
        await utils_2.collateralizeChannel(multisigAddressAB, nodeA, nodeB, utils_1.parseEther("2"));
        await utils_2.collateralizeChannel(multisigAddressBC, nodeB, nodeC, utils_1.parseEther("2"));
    });
    it("can handle a virtual and regular concurrent TTT app install", async (done) => {
        let completedInstalls = 0;
        nodeB.on("PROPOSE_INSTALL_EVENT", (msg) => {
            utils_2.makeInstallCall(nodeB, msg.data.appInstanceId);
        });
        nodeC.on("PROPOSE_INSTALL_EVENT", (msg) => {
            utils_2.installTTTVirtual(nodeC, msg.data.appInstanceId, nodeB.publicIdentifier);
        });
        nodeA.on("INSTALL_EVENT", () => {
            completedInstalls += 1;
            if (completedInstalls === 2)
                done();
        });
        nodeA.on("INSTALL_VIRTUAL_EVENT", () => {
            completedInstalls += 1;
            if (completedInstalls === 2)
                done();
        });
        const proposeRpc = utils_2.makeProposeCall(nodeB, TicTacToeApp, undefined, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS);
        const makeVirtualProposalRpc = () => {
            const appContext = utils_2.getAppContext(TicTacToeApp);
            return utils_2.constructVirtualProposalRpc(nodeC.publicIdentifier, appContext.appDefinition, appContext.abiEncodings, appContext.initialState, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, constants_1.One, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS);
        };
        nodeA.rpcRouter.dispatch(proposeRpc);
        nodeA.rpcRouter.dispatch(makeVirtualProposalRpc());
    });
});
//# sourceMappingURL=install-concurrent-mixed.spec.js.map