"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@connext/types");
const constants_1 = require("ethers/constants");
const constants_2 = require("../../../../src/constants");
const bignumber_jest_matcher_1 = require("../bignumber-jest-matcher");
const test_runner_1 = require("./test-runner");
expect.extend({ toBeEq: bignumber_jest_matcher_1.toBeEq });
var TestFundingType;
(function (TestFundingType) {
    TestFundingType["ETH"] = "ETH";
    TestFundingType["ERC20"] = "ERC20";
    TestFundingType["SPLIT"] = "SPLIT";
})(TestFundingType = exports.TestFundingType || (exports.TestFundingType = {}));
async function runDirectInstallUninstallTest(outcomeType, testFundingType) {
    const tr = new test_runner_1.TestRunner();
    await tr.connectToGanache();
    await tr.setup();
    await tr.unsafeFund();
    if (testFundingType === TestFundingType.SPLIT) {
        await tr.installSplitDeposits(outcomeType, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, test_runner_1.TestRunner.TEST_TOKEN_ADDRESS);
        tr.assertFB(test_runner_1.Participant.A, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, constants_1.Zero);
        tr.assertFB(test_runner_1.Participant.B, test_runner_1.TestRunner.TEST_TOKEN_ADDRESS, constants_1.Zero);
        await tr.uninstall();
        tr.assertFB(test_runner_1.Participant.A, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, constants_1.Two);
        tr.assertFB(test_runner_1.Participant.B, test_runner_1.TestRunner.TEST_TOKEN_ADDRESS, constants_1.Zero);
    }
    else {
        const tokenAddress = {
            [TestFundingType.ETH]: constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS,
            [TestFundingType.ERC20]: test_runner_1.TestRunner.TEST_TOKEN_ADDRESS
        }[testFundingType];
        await tr.installEqualDeposits(outcomeType, tokenAddress);
        tr.assertFB(test_runner_1.Participant.A, tokenAddress, constants_1.Zero);
        tr.assertFB(test_runner_1.Participant.B, tokenAddress, constants_1.Zero);
        await tr.uninstall();
        tr.assertFB(test_runner_1.Participant.A, tokenAddress, constants_1.Two);
        tr.assertFB(test_runner_1.Participant.B, tokenAddress, constants_1.Zero);
    }
}
describe("Install-then-uninstall in a direct channel", () => {
    for (const outcomeType of [
        types_1.OutcomeType.TWO_PARTY_FIXED_OUTCOME,
        types_1.OutcomeType.SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER,
        types_1.OutcomeType.MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER
    ]) {
        for (const testFundingType of [
            TestFundingType.ETH,
            TestFundingType.ERC20,
            TestFundingType.SPLIT
        ]) {
            if (testFundingType === TestFundingType.SPLIT &&
                outcomeType !== types_1.OutcomeType.MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER) {
                continue;
            }
            it(`${outcomeType}/${testFundingType}`, async () => {
                await runDirectInstallUninstallTest(outcomeType, testFundingType);
            });
        }
    }
});
describe("Install-then-uninstall of a virtual app", () => {
    for (const outcomeType of [
        types_1.OutcomeType.TWO_PARTY_FIXED_OUTCOME,
        types_1.OutcomeType.SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER
    ]) {
        for (const tokenAddress of [
            constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS,
            test_runner_1.TestRunner.TEST_TOKEN_ADDRESS
        ]) {
            it(`${outcomeType}/${tokenAddress}`, async () => {
                const tr = new test_runner_1.TestRunner();
                await tr.connectToGanache();
                await tr.setup();
                await tr.unsafeFund();
                await tr.installVirtualEqualDeposits(outcomeType, tokenAddress);
                tr.assertFB(test_runner_1.Participant.A, tokenAddress, constants_1.Zero);
                tr.assertFB(test_runner_1.Participant.C, tokenAddress, constants_1.Zero);
                await tr.uninstallVirtual();
                tr.assertFB(test_runner_1.Participant.A, tokenAddress, constants_1.Two);
                tr.assertFB(test_runner_1.Participant.C, tokenAddress, constants_1.Zero);
            });
        }
    }
});
//# sourceMappingURL=install-uninstall.spec.js.map