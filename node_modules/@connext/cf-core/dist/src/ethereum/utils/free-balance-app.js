"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const freeBalanceAppStateEncoding = `tuple(address[] tokenAddresses, tuple(address to, uint256 amount)[][] balances, bytes32[] activeApps)`;
function getFreeBalanceAppInterface(addr) {
    return {
        actionEncoding: undefined,
        addr,
        stateEncoding: freeBalanceAppStateEncoding,
    };
}
exports.getFreeBalanceAppInterface = getFreeBalanceAppInterface;
function flipTokenIndexedBalances(tokenIndexedBalances) {
    return Object.entries(tokenIndexedBalances).reduce((returnValueAccumulator, [tokenAddress, balances]) => (Object.assign({}, returnValueAccumulator, { [tokenAddress]: flip(balances) })), {});
}
exports.flipTokenIndexedBalances = flipTokenIndexedBalances;
function flip(coinTransferMap) {
    return Object.entries(coinTransferMap).reduce((returnValueAccumulator, [to, amount]) => (Object.assign({}, returnValueAccumulator, { [to]: constants_1.Zero.sub(amount) })), {});
}
exports.flip = flip;
function merge(base, increments) {
    const ret = {};
    const s1 = new Set(Object.keys(base));
    const s2 = new Set(Object.keys(increments));
    for (const key of new Set([...s1, ...s2])) {
        ret[key] = (base[key] || constants_1.Zero).add(increments[key] || constants_1.Zero);
    }
    return ret;
}
exports.merge = merge;
//# sourceMappingURL=free-balance-app.js.map