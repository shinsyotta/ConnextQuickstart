import { BigNumber, Network } from "ethers/utils";
import { CFCoreTypes, NetworkContext } from "./cf";
import { CFCoreChannel } from "./channel";
export interface MessagingConfig {
    clusterId?: string;
    messagingUrl: string | string[];
    token?: string;
    logLevel: number;
}
export declare type ContractAddresses = NetworkContext & {
    Token: string;
    [SupportedApplication: string]: string;
};
export interface NodeConfig {
    nodePublicIdentifier: string;
    chainId: string;
    nodeUrl: string;
}
export declare type Transfer<T = string> = {
    id: number;
    amount: T;
    assetId: string;
    senderPublicIdentifier: string;
    receiverPublicIdentifier: string;
};
export declare type TransferBigNumber = Transfer<BigNumber>;
declare type successResponse = {
    status: "success";
};
declare type errorResponse = {
    status: "error";
    message: string;
};
export declare type NatsResponse = {
    data: string;
} & (errorResponse | successResponse);
export declare type GetConfigResponse = {
    ethNetwork: Network;
    contractAddresses: ContractAddresses;
    nodePublicIdentifier: string;
    messaging: MessagingConfig;
};
export declare type GetChannelResponse = CFCoreChannel;
export declare type CreateChannelResponse = {
    transactionHash: string;
};
export declare type RequestCollateralResponse = CFCoreTypes.DepositResult | undefined;
export {};
//# sourceMappingURL=node.d.ts.map