"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/utils");
const bignumber_jest_matcher_1 = require("../machine/integration/bignumber-jest-matcher");
const setup_1 = require("./setup");
const utils_2 = require("./utils");
expect.extend({ toBeLt: bignumber_jest_matcher_1.toBeLt });
jest.setTimeout(15000);
const { TicTacToeApp } = global["networkContext"];
describe("Concurrently installing virtual applications with same intermediary", () => {
    let multisigAddressAB;
    let multisigAddressBC;
    let nodeA;
    let nodeB;
    let nodeC;
    beforeEach(async () => {
        const context = await setup_1.setup(global, true);
        nodeA = context["A"].node;
        nodeB = context["B"].node;
        nodeC = context["C"].node;
        multisigAddressAB = await utils_2.createChannel(nodeA, nodeB);
        multisigAddressBC = await utils_2.createChannel(nodeB, nodeC);
        await utils_2.collateralizeChannel(multisigAddressAB, nodeA, nodeB, utils_1.parseEther("2"));
        await utils_2.collateralizeChannel(multisigAddressBC, nodeB, nodeC, utils_1.parseEther("2"));
    });
    it("can handle two TicTacToeApp proposals syncronously made", done => {
        let i = 0;
        nodeA.on("INSTALL_VIRTUAL_EVENT", () => {
            i += 1;
            if (i === 2)
                done();
        });
        for (const i of Array(2)) {
            utils_2.installVirtualApp(nodeA, nodeB, nodeC, TicTacToeApp);
        }
    });
    it("can handle two TicTacToeApp proposals asyncronously made", async (done) => {
        let i = 0;
        nodeA.on("INSTALL_VIRTUAL_EVENT", () => {
            i += 1;
            if (i === 2)
                done();
        });
        for (const i of Array(2)) {
            await utils_2.installVirtualApp(nodeA, nodeB, nodeC, TicTacToeApp);
        }
    });
});
//# sourceMappingURL=install-concurrent-virtual.spec.js.map