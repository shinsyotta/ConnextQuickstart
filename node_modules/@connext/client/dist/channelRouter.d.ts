import { BigNumber } from "ethers/utils";
import { CFCoreTypes, ChannelProviderConfig, RpcConnection, Store } from "./types";
export declare class ChannelRouter {
    private type;
    private connection;
    private wallet;
    private _config;
    private _multisigAddress;
    private _signerAddress;
    private store;
    private approvedStorePaths;
    constructor(connection: RpcConnection, config: ChannelProviderConfig, store?: Store, authKey?: any);
    readonly config: ChannelProviderConfig;
    multisigAddress: string | undefined;
    signerAddress: string | undefined;
    on: (event: "CREATE_CHANNEL_EVENT" | "DEPOSIT_CONFIRMED_EVENT" | "DEPOSIT_FAILED_EVENT" | "DEPOSIT_STARTED_EVENT" | "INSTALL_EVENT" | "INSTALL_VIRTUAL_EVENT" | "REJECT_INSTALL_EVENT" | "UNINSTALL_EVENT" | "UNINSTALL_VIRTUAL_EVENT" | "UPDATE_STATE_EVENT" | "WITHDRAWAL_CONFIRMED_EVENT" | "WITHDRAWAL_FAILED_EVENT" | "WITHDRAWAL_STARTED_EVENT" | "PROPOSE_INSTALL_EVENT" | "PROTOCOL_MESSAGE_EVENT" | CFCoreTypes.RpcMethodName, listener: (...args: any[]) => void) => any;
    once: (event: "CREATE_CHANNEL_EVENT" | "DEPOSIT_CONFIRMED_EVENT" | "DEPOSIT_FAILED_EVENT" | "DEPOSIT_STARTED_EVENT" | "INSTALL_EVENT" | "INSTALL_VIRTUAL_EVENT" | "REJECT_INSTALL_EVENT" | "UNINSTALL_EVENT" | "UNINSTALL_VIRTUAL_EVENT" | "UPDATE_STATE_EVENT" | "WITHDRAWAL_CONFIRMED_EVENT" | "WITHDRAWAL_FAILED_EVENT" | "WITHDRAWAL_STARTED_EVENT" | "PROPOSE_INSTALL_EVENT" | "PROTOCOL_MESSAGE_EVENT" | CFCoreTypes.RpcMethodName, listener: (...args: any[]) => void) => any;
    signMessage: (message: string) => Promise<string>;
    deposit: (amount: BigNumber, assetId: string, multisigAddress: string, notifyCounterparty?: boolean) => Promise<CFCoreTypes.DepositResult>;
    getStateChannel: () => Promise<{
        data: any;
    }>;
    getState: (appInstanceId: string) => Promise<CFCoreTypes.GetStateResult>;
    getAppInstances: (multisigAddress?: string) => Promise<CFCoreTypes.GetAppInstancesResult>;
    getFreeBalance: (assetId: string, multisigAddress: string) => Promise<CFCoreTypes.GetFreeBalanceStateResult>;
    getProposedAppInstances: (multisigAddress?: string) => Promise<CFCoreTypes.GetProposedAppInstancesResult>;
    getProposedAppInstance: (appInstanceId: string) => Promise<CFCoreTypes.GetProposedAppInstanceResult>;
    getAppInstanceDetails: (appInstanceId: string) => Promise<CFCoreTypes.GetAppInstanceDetailsResult>;
    getAppState: (appInstanceId: string) => Promise<CFCoreTypes.GetStateResult>;
    takeAction: (appInstanceId: string, action: import("@connext/types").AppAction<T>) => Promise<CFCoreTypes.TakeActionResult>;
    updateState: (appInstanceId: string, newState: any) => Promise<CFCoreTypes.UpdateStateResult>;
    proposeInstallApp: (params: CFCoreTypes.ProposeInstallParams) => Promise<CFCoreTypes.ProposeInstallResult>;
    installVirtualApp: (appInstanceId: string, intermediaryIdentifier: string) => Promise<CFCoreTypes.InstallResult>;
    installApp: (appInstanceId: string) => Promise<CFCoreTypes.InstallResult>;
    requestDepositRights: (assetId: string) => Promise<CFCoreTypes.RequestDepositRightsResult>;
    uninstallApp: (appInstanceId: string) => Promise<CFCoreTypes.UninstallResult>;
    rescindDepositRights: (params: Pick<import("@connext/types/dist/src/inputs").DepositParameters<string>, "assetId">) => Promise<CFCoreTypes.DepositResult>;
    uninstallVirtualApp: (appInstanceId: string, intermediary: string) => Promise<CFCoreTypes.UninstallResult>;
    rejectInstallApp: (appInstanceId: string) => Promise<CFCoreTypes.UninstallResult>;
    withdraw: (amount: BigNumber, assetId: string, recipient: string) => Promise<CFCoreTypes.WithdrawResult>;
    withdrawCommitment: (amount: BigNumber, assetId?: string, recipient?: string) => Promise<CFCoreTypes.WithdrawCommitmentResult>;
    get: (path: string) => Promise<any>;
    set: (pairs: {
        path: string;
        value: any;
    }[], allowDelete?: Boolean) => Promise<void>;
    restore: () => Promise<{
        path: string;
        value: any;
    }[]>;
    reset: () => Promise<void>;
    private isApprovedGetSetPath;
    private _send;
}
//# sourceMappingURL=channelRouter.d.ts.map