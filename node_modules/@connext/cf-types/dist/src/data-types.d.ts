import { BigNumber } from "ethers/utils";
import { AppInterface, SolidityValueType } from ".";
export declare type TwoPartyFixedOutcomeInterpreterParams = {
    playerAddrs: [string, string];
    amount: BigNumber;
    tokenAddress: string;
};
export declare type MultiAssetMultiPartyCoinTransferInterpreterParams = {
    limit: BigNumber[];
    tokenAddresses: string[];
};
export declare type SingleAssetTwoPartyCoinTransferInterpreterParams = {
    limit: BigNumber;
    tokenAddress: string;
};
export declare const multiAssetMultiPartyCoinTransferInterpreterParamsEncoding = "tuple(uint256[] limit, address[] tokenAddresses)";
export declare const singleAssetTwoPartyCoinTransferInterpreterParamsEncoding = "tuple(uint256 limit, address tokenAddress)";
export declare const twoPartyFixedOutcomeInterpreterParamsEncoding = "tuple(address[2] playerAddrs, uint256 amount)";
export declare const virtualAppAgreementEncoding = "tuple(uint256 capitalProvided, address capitalProvider, address virtualAppUser, address tokenAddress)";
export declare const multiAssetMultiPartyCoinTransferEncoding = "tuple(address to, uint256 amount)[][]";
export declare const coinBalanceRefundStateEncoding = "tuple(address recipient, address multisig, uint256 threshold, address tokenAddress)";
export declare type AppInstanceJson = {
    identityHash: string;
    multisigAddress: string;
    participants: string[];
    defaultTimeout: number;
    appInterface: AppInterface;
    isVirtualApp: boolean;
    appSeqNo: number;
    latestState: SolidityValueType;
    latestVersionNumber: number;
    latestTimeout: number;
    outcomeType: number;
    twoPartyOutcomeInterpreterParams?: {
        playerAddrs: [string, string];
        amount: {
            _hex: string;
        };
        tokenAddress: string;
    };
    multiAssetMultiPartyCoinTransferInterpreterParams?: {
        limit: {
            _hex: string;
        }[];
        tokenAddresses: string[];
    };
    singleAssetTwoPartyCoinTransferInterpreterParams?: {
        limit: {
            _hex: string;
        };
        tokenAddress: string;
    };
};
export declare type SingleAssetTwoPartyIntermediaryAgreement = {
    timeLockedPassThroughIdentityHash: string;
    capitalProvided: string;
    capitalProvider: string;
    virtualAppUser: string;
    tokenAddress: string;
};
export declare type StateChannelJSON = {
    readonly multisigAddress: string;
    readonly proxyFactoryAddress: string;
    readonly userNeuteredExtendedKeys: string[];
    readonly proposedAppInstances: [string, AppInstanceProposal][];
    readonly appInstances: [string, AppInstanceJson][];
    readonly singleAssetTwoPartyIntermediaryAgreements: [string, SingleAssetTwoPartyIntermediaryAgreement][];
    readonly freeBalanceAppInstance: AppInstanceJson | undefined;
    readonly monotonicNumProposedApps: number;
};
export declare type AppInstanceInfo = {
    identityHash: string;
    appDefinition: string;
    abiEncodings: AppABIEncodings;
    initiatorDeposit: BigNumber;
    initiatorDepositTokenAddress: string;
    responderDeposit: BigNumber;
    responderDepositTokenAddress: string;
    timeout: BigNumber;
    proposedByIdentifier: string;
    proposedToIdentifier: string;
    intermediaryIdentifier?: string;
    twoPartyOutcomeInterpreterParams?: TwoPartyFixedOutcomeInterpreterParams;
    multiAssetMultiPartyCoinTransferInterpreterParams?: MultiAssetMultiPartyCoinTransferInterpreterParams;
    singleAssetTwoPartyCoinTransferInterpreterParams?: SingleAssetTwoPartyCoinTransferInterpreterParams;
};
export declare type AppInstanceProposal = {
    abiEncodings: AppABIEncodings;
    appDefinition: string;
    appSeqNo: number;
    identityHash: string;
    initialState: SolidityValueType;
    initiatorDeposit: string;
    initiatorDepositTokenAddress: string;
    intermediaryIdentifier?: string;
    outcomeType: OutcomeType;
    proposedByIdentifier: string;
    proposedToIdentifier: string;
    responderDeposit: string;
    responderDepositTokenAddress: string;
    timeout: string;
    twoPartyOutcomeInterpreterParams?: TwoPartyFixedOutcomeInterpreterParams;
    multiAssetMultiPartyCoinTransferInterpreterParams?: MultiAssetMultiPartyCoinTransferInterpreterParams;
    singleAssetTwoPartyCoinTransferInterpreterParams?: SingleAssetTwoPartyCoinTransferInterpreterParams;
};
export declare type AppABIEncodings = {
    stateEncoding: string;
    actionEncoding: string | undefined;
};
export declare enum OutcomeType {
    TWO_PARTY_FIXED_OUTCOME = "TWO_PARTY_FIXED_OUTCOME",
    MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER = "MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER",
    SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER = "SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER"
}
export declare enum TwoPartyFixedOutcome {
    SEND_TO_ADDR_ONE = 0,
    SEND_TO_ADDR_TWO = 1,
    SPLIT_AND_SEND_TO_BOTH_ADDRS = 2
}
export declare type CoinBalanceRefundState = {
    recipient: string;
    multisig: string;
    threshold: BigNumber;
    tokenAddress: string;
};
//# sourceMappingURL=data-types.d.ts.map