"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const rpc_server_1 = require("rpc-server");
const constants_2 = require("../../../constants");
const machine_1 = require("../../../machine");
const types_1 = require("../../../types");
const controller_1 = require("../../controller");
const errors_1 = require("../../errors");
class ProposeInstallController extends controller_1.NodeController {
    constructor() {
        super(...arguments);
        this.executeMethod = super.executeMethod;
    }
    async getRequiredLockNames(requestHandler, params) {
        const { networkContext, publicIdentifier, store } = requestHandler;
        const { proposedToIdentifier } = params;
        const multisigAddress = await store.getMultisigAddressWithCounterparty([publicIdentifier, proposedToIdentifier], networkContext.ProxyFactory, networkContext.MinimumViableMultisig, networkContext.provider);
        return [multisigAddress];
    }
    async beforeExecution(requestHandler, params) {
        const { networkContext, publicIdentifier, store } = requestHandler;
        const { initialState } = params;
        if (!initialState) {
            throw Error(errors_1.NULL_INITIAL_STATE_FOR_PROPOSAL);
        }
        const { proposedToIdentifier, initiatorDeposit, responderDeposit, initiatorDepositTokenAddress: initiatorDepositTokenAddressParam, responderDepositTokenAddress: responderDepositTokenAddressParam } = params;
        const myIdentifier = publicIdentifier;
        const multisigAddress = await store.getMultisigAddressWithCounterparty([publicIdentifier, proposedToIdentifier], networkContext.ProxyFactory, networkContext.MinimumViableMultisig, networkContext.provider);
        const initiatorDepositTokenAddress = initiatorDepositTokenAddressParam || constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS;
        const responderDepositTokenAddress = responderDepositTokenAddressParam || constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS;
        const stateChannel = await store.getOrCreateStateChannelBetweenVirtualAppParticipants(multisigAddress, networkContext.ProxyFactory, myIdentifier, proposedToIdentifier);
        assertSufficientFundsWithinFreeBalance(stateChannel, myIdentifier, initiatorDepositTokenAddress, initiatorDeposit);
        assertSufficientFundsWithinFreeBalance(stateChannel, proposedToIdentifier, responderDepositTokenAddress, responderDeposit);
        params.initiatorDepositTokenAddress = initiatorDepositTokenAddress;
        params.responderDepositTokenAddress = responderDepositTokenAddress;
    }
    async executeMethodImplementation(requestHandler, params) {
        const { networkContext, protocolRunner, publicIdentifier, store } = requestHandler;
        const { proposedToIdentifier } = params;
        const multisigAddress = await store.getMultisigAddressWithCounterparty([publicIdentifier, proposedToIdentifier], networkContext.ProxyFactory, networkContext.MinimumViableMultisig, networkContext.provider);
        await protocolRunner.initiateProtocol(machine_1.Protocol.Propose, await store.getStateChannelsMap(), Object.assign({}, params, { multisigAddress, initiatorXpub: publicIdentifier, responderXpub: proposedToIdentifier }));
        return {
            appInstanceId: (await store.getStateChannel(multisigAddress)).mostRecentlyProposedAppInstance().identityHash
        };
    }
}
__decorate([
    rpc_server_1.jsonRpcMethod(types_1.CFCoreTypes.RpcMethodNames.chan_proposeInstall),
    __metadata("design:type", Function)
], ProposeInstallController.prototype, "executeMethod", void 0);
exports.default = ProposeInstallController;
function assertSufficientFundsWithinFreeBalance(channel, publicIdentifier, tokenAddress, depositAmount) {
    if (!channel.hasFreeBalance)
        return;
    const freeBalanceForToken = channel
        .getFreeBalanceClass()
        .getBalance(tokenAddress, machine_1.xkeyKthAddress(publicIdentifier, 0)) || constants_1.Zero;
    if (freeBalanceForToken.lt(depositAmount)) {
        throw Error(errors_1.INSUFFICIENT_FUNDS_IN_FREE_BALANCE_FOR_ASSET(publicIdentifier, channel.multisigAddress, tokenAddress, freeBalanceForToken, depositAmount));
    }
}
//# sourceMappingURL=controller.js.map