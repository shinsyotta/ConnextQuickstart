import { CFCoreTypes, NetworkContext } from "./cf";
import { Store } from "./client";
export declare type ChannelProvider = any;
export declare type ChannelProviderConfig = {
    freeBalanceAddress: string;
    multisigAddress?: string;
    natsClusterId?: string;
    natsToken?: string;
    nodeUrl: string;
    signerAddress: string;
    userPublicIdentifier: string;
};
export interface CFChannelProviderOptions {
    ethProvider: any;
    keyGen: CFCoreTypes.IPrivateKeyGenerator;
    lockService?: CFCoreTypes.ILockService;
    messaging: any;
    networkContext: NetworkContext;
    nodeConfig: any;
    nodeUrl: string;
    xpub: string;
    store: Store;
}
export declare type RpcConnection = ChannelProvider | any;
export declare const ConnextRpcMethods: {
    chan_config: string;
    chan_nodeAuth: string;
    chan_restoreState: string;
    chan_storeGet: string;
    chan_storeSet: string;
};
export declare type ConnextRpcMethod = keyof typeof ConnextRpcMethods;
export declare const ChannelProviderRpcMethods: {
    chan_config: string;
    chan_nodeAuth: string;
    chan_restoreState: string;
    chan_storeGet: string;
    chan_storeSet: string;
    chan_create: string;
    chan_deposit: string;
    chan_deployStateDepositHolder: string;
    chan_getChannelAddresses: string;
    chan_getAppInstance: string;
    chan_getAppInstances: string;
    chan_getStateDepositHolderAddress: string;
    chan_getFreeBalanceState: string;
    chan_getTokenIndexedFreeBalanceStates: string;
    chan_getProposedAppInstances: string;
    chan_getState: string;
    chan_getStateChannel: string;
    chan_install: string;
    chan_requestDepositRights: string;
    chan_installVirtual: string;
    chan_proposeInstall: string;
    chan_rejectInstall: string;
    chan_updateState: string;
    chan_takeAction: string;
    chan_uninstall: string;
    chan_uninstallVirtual: string;
    chan_rescindDepositRights: string;
    chan_withdraw: string;
    chan_withdrawCommitment: string;
};
export declare type ChannelProviderRpcMethod = ConnextRpcMethod | CFCoreTypes.RpcMethodName;
export declare type StorePair = {
    path: string;
    value: any;
};
export declare type KeyGen = (index: string) => Promise<string>;
//# sourceMappingURL=channelProvider.d.ts.map