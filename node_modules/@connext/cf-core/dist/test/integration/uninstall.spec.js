"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const constants_2 = require("../../src/constants");
const bignumber_jest_matcher_1 = require("../machine/integration/bignumber-jest-matcher");
const setup_1 = require("./setup");
const utils_1 = require("./utils");
expect.extend({ toBeEq: bignumber_jest_matcher_1.toBeEq });
const { TicTacToeApp } = global["networkContext"];
function assertUninstallMessage(senderId, appInstanceId, msg) {
    utils_1.assertNodeMessage(msg, {
        from: senderId,
        type: "UNINSTALL_EVENT",
        data: {
            appInstanceId
        },
    });
}
describe("Node A and B install apps of different outcome types, then uninstall them to test outcomes types and interpreters", () => {
    let nodeA;
    let nodeB;
    describe("Tests for different outcomes of the TwoPartyFixedOutcome type", () => {
        let appInstanceId;
        let multisigAddress;
        const depositAmount = constants_1.One;
        const initialState = {
            versionNumber: 0,
            winner: 2,
            board: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
        };
        beforeEach(async () => {
            const context = await setup_1.setup(global);
            nodeA = context["A"].node;
            nodeB = context["B"].node;
            multisigAddress = await utils_1.createChannel(nodeA, nodeB);
            const balancesBefore = await utils_1.getFreeBalanceState(nodeA, multisigAddress);
            expect(balancesBefore[nodeA.freeBalanceAddress]).toBeEq(constants_1.Zero);
            expect(balancesBefore[nodeB.freeBalanceAddress]).toBeEq(constants_1.Zero);
            await utils_1.collateralizeChannel(multisigAddress, nodeA, nodeB, depositAmount);
            const balancesAfter = await utils_1.getFreeBalanceState(nodeA, multisigAddress);
            expect(balancesAfter[nodeA.freeBalanceAddress]).toBeEq(depositAmount);
            expect(balancesAfter[nodeB.freeBalanceAddress]).toBeEq(depositAmount);
        });
        it("installs an app with the TwoPartyFixedOutcome outcome and expects Node A to win total", async (done) => {
            [appInstanceId] = await utils_1.installApp(nodeA, nodeB, TicTacToeApp, initialState, depositAmount, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, depositAmount, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS);
            nodeB.once("UNINSTALL_EVENT", async (msg) => {
                assertUninstallMessage(nodeA.publicIdentifier, appInstanceId, msg);
                const balancesSeenByB = await utils_1.getFreeBalanceState(nodeB, multisigAddress);
                expect(balancesSeenByB[nodeA.freeBalanceAddress]).toBeEq(constants_1.Two);
                expect(balancesSeenByB[nodeB.freeBalanceAddress]).toBeEq(constants_1.Zero);
                expect(await utils_1.getInstalledAppInstances(nodeB)).toEqual([]);
                done();
            });
            await nodeA.rpcRouter.dispatch(utils_1.constructUninstallRpc(appInstanceId));
            const balancesSeenByA = await utils_1.getFreeBalanceState(nodeA, multisigAddress);
            expect(balancesSeenByA[nodeA.freeBalanceAddress]).toBeEq(constants_1.Two);
            expect(balancesSeenByA[nodeB.freeBalanceAddress]).toBeEq(constants_1.Zero);
            expect(await utils_1.getInstalledAppInstances(nodeA)).toEqual([]);
        });
        it("installs an app with the TwoPartyFixedOutcome outcome and expects Node B to win total", async (done) => {
            initialState.winner = 1;
            [appInstanceId] = await utils_1.installApp(nodeA, nodeB, TicTacToeApp, initialState, depositAmount, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, depositAmount, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS);
            nodeB.once("UNINSTALL_EVENT", async (msg) => {
                assertUninstallMessage(nodeA.publicIdentifier, appInstanceId, msg);
                const balancesSeenByB = await utils_1.getFreeBalanceState(nodeB, multisigAddress);
                expect(balancesSeenByB[nodeB.freeBalanceAddress]).toBeEq(constants_1.Two);
                expect(balancesSeenByB[nodeA.freeBalanceAddress]).toBeEq(constants_1.Zero);
                expect(await utils_1.getInstalledAppInstances(nodeB)).toEqual([]);
                done();
            });
            await nodeA.rpcRouter.dispatch(utils_1.constructUninstallRpc(appInstanceId));
            const balancesSeenByA = await utils_1.getFreeBalanceState(nodeA, multisigAddress);
            expect(balancesSeenByA[nodeB.freeBalanceAddress]).toBeEq(constants_1.Two);
            expect(balancesSeenByA[nodeA.freeBalanceAddress]).toBeEq(constants_1.Zero);
            expect(await utils_1.getInstalledAppInstances(nodeA)).toEqual([]);
        });
        it("installs an app with the TwoPartyFixedOutcome outcome and expects the funds to be split between the nodes", async (done) => {
            initialState.winner = 3;
            [appInstanceId] = await utils_1.installApp(nodeA, nodeB, TicTacToeApp, initialState, depositAmount, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS, depositAmount, constants_2.CONVENTION_FOR_ETH_TOKEN_ADDRESS);
            nodeB.once("UNINSTALL_EVENT", async (msg) => {
                assertUninstallMessage(nodeA.publicIdentifier, appInstanceId, msg);
                const balancesSeenByB = await utils_1.getFreeBalanceState(nodeB, multisigAddress);
                expect(balancesSeenByB[nodeA.freeBalanceAddress]).toBeEq(depositAmount);
                expect(balancesSeenByB[nodeB.freeBalanceAddress]).toBeEq(depositAmount);
                expect(await utils_1.getInstalledAppInstances(nodeB)).toEqual([]);
                done();
            });
            await nodeA.rpcRouter.dispatch(utils_1.constructUninstallRpc(appInstanceId));
            const balancesSeenByA = await utils_1.getFreeBalanceState(nodeA, multisigAddress);
            expect(balancesSeenByA[nodeA.freeBalanceAddress]).toBeEq(depositAmount);
            expect(balancesSeenByA[nodeB.freeBalanceAddress]).toBeEq(depositAmount);
            expect(await utils_1.getInstalledAppInstances(nodeA)).toEqual([]);
        });
    });
});
//# sourceMappingURL=uninstall.spec.js.map