import { BaseProvider } from "ethers/providers";
import { BigNumber } from "ethers/utils";
import { StateChannel } from "../models";
import { AppInterface, NetworkContext, OutcomeType, SolidityValueType } from "../types";
import { Opcode, Protocol } from "./enums";
export declare type ProtocolExecutionFlow = {
    [x: number]: (context: Context) => AsyncIterableIterator<any[]>;
};
export declare type Middleware = {
    (args: any): any;
};
export declare type Instruction = Function | Opcode;
export interface Context {
    network: NetworkContext;
    stateChannelsMap: Map<string, StateChannel>;
    message: ProtocolMessage;
    provider: BaseProvider;
}
export declare type ProtocolMessage = {
    processID: string;
    protocol: Protocol;
    params?: ProtocolParameters;
    toXpub: string;
    seq: number;
    customData: {
        [key: string]: any;
    };
};
export declare type SetupProtocolParams = {
    initiatorXpub: string;
    responderXpub: string;
    multisigAddress: string;
};
declare type AppABIEncodings = {
    stateEncoding: string;
    actionEncoding: string | undefined;
};
export declare type ProposeInstallProtocolParams = {
    multisigAddress: string;
    initiatorXpub: string;
    responderXpub: string;
    appDefinition: string;
    abiEncodings: AppABIEncodings;
    initiatorDeposit: BigNumber;
    initiatorDepositTokenAddress?: string;
    responderDeposit: BigNumber;
    responderDepositTokenAddress?: string;
    timeout: BigNumber;
    initialState: SolidityValueType;
    outcomeType: OutcomeType;
    meta?: Object;
};
export declare type UpdateProtocolParams = {
    initiatorXpub: string;
    responderXpub: string;
    multisigAddress: string;
    appIdentityHash: string;
    newState: SolidityValueType;
};
export declare type TakeActionProtocolParams = {
    initiatorXpub: string;
    responderXpub: string;
    multisigAddress: string;
    appIdentityHash: string;
    action: SolidityValueType;
};
export declare type WithdrawProtocolParams = {
    initiatorXpub: string;
    responderXpub: string;
    multisigAddress: string;
    recipient: string;
    amount: BigNumber;
    tokenAddress: string;
};
export declare type InstallProtocolParams = {
    initiatorXpub: string;
    initiatorDepositTokenAddress: string;
    responderXpub: string;
    responderDepositTokenAddress: string;
    multisigAddress: string;
    initiatorBalanceDecrement: BigNumber;
    responderBalanceDecrement: BigNumber;
    participants: string[];
    initialState: SolidityValueType;
    appInterface: AppInterface;
    defaultTimeout: number;
    appSeqNo: number;
    outcomeType: OutcomeType;
    disableLimit: boolean;
};
export declare type UninstallProtocolParams = {
    appIdentityHash: string;
    initiatorXpub: string;
    responderXpub: string;
    multisigAddress: string;
    blockNumberToUseIfNecessary?: number;
};
export declare type InstallVirtualAppProtocolParams = {
    initiatorXpub: string;
    responderXpub: string;
    intermediaryXpub: string;
    defaultTimeout: number;
    appInterface: AppInterface;
    initialState: SolidityValueType;
    initiatorBalanceDecrement: BigNumber;
    responderBalanceDecrement: BigNumber;
    tokenAddress: string;
    appSeqNo: number;
    outcomeType: OutcomeType;
};
export declare type UninstallVirtualAppProtocolParams = {
    initiatorXpub: string;
    responderXpub: string;
    intermediaryXpub: string;
    targetAppIdentityHash: string;
    targetOutcome: string;
};
export declare type ProtocolParameters = SetupProtocolParams | ProposeInstallProtocolParams | UpdateProtocolParams | InstallProtocolParams | UninstallProtocolParams | WithdrawProtocolParams | InstallVirtualAppProtocolParams | UninstallVirtualAppProtocolParams;
export {};
//# sourceMappingURL=types.d.ts.map