"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_server_1 = require("rpc-server");
const constants_1 = require("../../../constants");
const types_1 = require("../../../types");
const controller_1 = require("../../controller");
class GetFreeBalanceController extends controller_1.NodeController {
    constructor() {
        super(...arguments);
        this.executeMethod = super.executeMethod;
    }
    async executeMethodImplementation(requestHandler, params) {
        const { store } = requestHandler;
        const { multisigAddress, tokenAddress: tokenAddressParam } = params;
        const tokenAddress = tokenAddressParam || constants_1.CONVENTION_FOR_ETH_TOKEN_ADDRESS;
        if (!multisigAddress) {
            throw Error("getFreeBalanceState method was given undefined multisigAddress");
        }
        const stateChannel = await store.getStateChannel(multisigAddress);
        return stateChannel.getFreeBalanceClass().withTokenAddress(tokenAddress);
    }
}
__decorate([
    rpc_server_1.jsonRpcMethod(types_1.CFCoreTypes.RpcMethodNames.chan_getFreeBalanceState),
    __metadata("design:type", Object)
], GetFreeBalanceController.prototype, "executeMethod", void 0);
exports.default = GetFreeBalanceController;
//# sourceMappingURL=controller.js.map