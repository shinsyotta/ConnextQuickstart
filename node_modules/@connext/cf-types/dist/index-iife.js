this.window = this.window || {};
this.window.types = (function (exports) {
  'use strict';

  const multiAssetMultiPartyCoinTransferInterpreterParamsEncoding = `tuple(uint256[] limit, address[] tokenAddresses)`;
  const singleAssetTwoPartyCoinTransferInterpreterParamsEncoding = `tuple(uint256 limit, address tokenAddress)`;
  const twoPartyFixedOutcomeInterpreterParamsEncoding = `tuple(address[2] playerAddrs, uint256 amount)`;
  const virtualAppAgreementEncoding = `tuple(uint256 capitalProvided, address capitalProvider, address virtualAppUser, address tokenAddress)`;
  const multiAssetMultiPartyCoinTransferEncoding = `tuple(address to, uint256 amount)[][]`;
  const coinBalanceRefundStateEncoding = `tuple(address recipient, address multisig, uint256 threshold, address tokenAddress)`;
  (function (OutcomeType) {
      OutcomeType["TWO_PARTY_FIXED_OUTCOME"] = "TWO_PARTY_FIXED_OUTCOME";
      OutcomeType["MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER"] = "MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER";
      OutcomeType["SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER"] = "SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER";
  })(exports.OutcomeType || (exports.OutcomeType = {}));
  (function (TwoPartyFixedOutcome) {
      TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_ONE"] = 0] = "SEND_TO_ADDR_ONE";
      TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_TWO"] = 1] = "SEND_TO_ADDR_TWO";
      TwoPartyFixedOutcome[TwoPartyFixedOutcome["SPLIT_AND_SEND_TO_BOTH_ADDRS"] = 2] = "SPLIT_AND_SEND_TO_BOTH_ADDRS";
  })(exports.TwoPartyFixedOutcome || (exports.TwoPartyFixedOutcome = {}));

  (function (Node) {
      let ErrorType;
      (function (ErrorType) {
          ErrorType["ERROR"] = "error";
      })(ErrorType = Node.ErrorType || (Node.ErrorType = {}));
      let MethodName;
      (function (MethodName) {
          MethodName["ACCEPT_STATE"] = "acceptState";
          MethodName["GET_PROPOSED_APP_INSTANCE"] = "getProposedAppInstance";
      })(MethodName = Node.MethodName || (Node.MethodName = {}));
      let RpcMethodName;
      (function (RpcMethodName) {
          RpcMethodName["CREATE_CHANNEL"] = "chan_create";
          RpcMethodName["DEPOSIT"] = "chan_deposit";
          RpcMethodName["DEPLOY_STATE_DEPOSIT_HOLDER"] = "chan_deployStateDepositHolder";
          RpcMethodName["GET_CHANNEL_ADDRESSES"] = "chan_getChannelAddresses";
          RpcMethodName["GET_APP_INSTANCE_DETAILS"] = "chan_getAppInstance";
          RpcMethodName["GET_APP_INSTANCES"] = "chan_getAppInstances";
          RpcMethodName["GET_STATE_DEPOSIT_HOLDER_ADDRESS"] = "chan_getStateDepositHolderAddress";
          RpcMethodName["GET_FREE_BALANCE_STATE"] = "chan_getFreeBalanceState";
          RpcMethodName["GET_TOKEN_INDEXED_FREE_BALANCE_STATES"] = "chan_getTokenIndexedFreeBalanceStates";
          RpcMethodName["GET_PROPOSED_APP_INSTANCES"] = "chan_getProposedAppInstances";
          RpcMethodName["GET_STATE"] = "chan_getState";
          RpcMethodName["GET_STATE_CHANNEL"] = "chan_getStateChannel";
          RpcMethodName["INSTALL"] = "chan_install";
          RpcMethodName["REQUEST_DEPOSIT_RIGHTS"] = "chan_requestDepositRights";
          RpcMethodName["INSTALL_VIRTUAL"] = "chan_installVirtual";
          RpcMethodName["PROPOSE_INSTALL"] = "chan_proposeInstall";
          RpcMethodName["REJECT_INSTALL"] = "chan_rejectInstall";
          RpcMethodName["UPDATE_STATE"] = "chan_updateState";
          RpcMethodName["TAKE_ACTION"] = "chan_takeAction";
          RpcMethodName["UNINSTALL"] = "chan_uninstall";
          RpcMethodName["UNINSTALL_VIRTUAL"] = "chan_uninstallVirtual";
          RpcMethodName["RESCIND_DEPOSIT_RIGHTS"] = "chan_rescindDepositRights";
          RpcMethodName["WITHDRAW"] = "chan_withdraw";
          RpcMethodName["WITHDRAW_COMMITMENT"] = "chan_withdrawCommitment";
      })(RpcMethodName = Node.RpcMethodName || (Node.RpcMethodName = {}));
      Node.EventNames = {
          CREATE_CHANNEL_EVENT: "CREATE_CHANNEL_EVENT",
          DEPOSIT_CONFIRMED_EVENT: "DEPOSIT_CONFIRMED_EVENT",
          DEPOSIT_FAILED_EVENT: "DEPOSIT_FAILED_EVENT",
          DEPOSIT_STARTED_EVENT: "DEPOSIT_STARTED_EVENT",
          INSTALL_EVENT: "INSTALL_EVENT",
          INSTALL_VIRTUAL_EVENT: "INSTALL_VIRTUAL_EVENT",
          REJECT_INSTALL_EVENT: "REJECT_INSTALL_EVENT",
          UNINSTALL_EVENT: "UNINSTALL_EVENT",
          UNINSTALL_VIRTUAL_EVENT: "UNINSTALL_VIRTUAL_EVENT",
          UPDATE_STATE_EVENT: "UPDATE_STATE_EVENT",
          WITHDRAWAL_CONFIRMED_EVENT: "WITHDRAWAL_CONFIRMED_EVENT",
          WITHDRAWAL_FAILED_EVENT: "WITHDRAWAL_FAILED_EVENT",
          WITHDRAWAL_STARTED_EVENT: "WITHDRAWAL_STARTED_EVENT",
          PROPOSE_INSTALL_EVENT: "PROPOSE_INSTALL_EVENT",
          PROTOCOL_MESSAGE_EVENT: "PROTOCOL_MESSAGE_EVENT"
      };
  })(exports.Node || (exports.Node = {}));

  const EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT = [
      "ChallengeRegistry",
      "ConditionalTransactionDelegateTarget",
      "CoinBalanceRefundApp",
      "MultiAssetMultiPartyCoinTransferInterpreter",
      "IdentityApp",
      "MinimumViableMultisig",
      "ProxyFactory",
      "SingleAssetTwoPartyCoinTransferInterpreter",
      "TimeLockedPassThrough",
      "TwoPartyFixedOutcomeInterpreter",
      "TwoPartyFixedOutcomeFromVirtualAppInterpreter"
  ];

  exports.EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT = EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT;
  exports.coinBalanceRefundStateEncoding = coinBalanceRefundStateEncoding;
  exports.multiAssetMultiPartyCoinTransferEncoding = multiAssetMultiPartyCoinTransferEncoding;
  exports.multiAssetMultiPartyCoinTransferInterpreterParamsEncoding = multiAssetMultiPartyCoinTransferInterpreterParamsEncoding;
  exports.singleAssetTwoPartyCoinTransferInterpreterParamsEncoding = singleAssetTwoPartyCoinTransferInterpreterParamsEncoding;
  exports.twoPartyFixedOutcomeInterpreterParamsEncoding = twoPartyFixedOutcomeInterpreterParamsEncoding;
  exports.virtualAppAgreementEncoding = virtualAppAgreementEncoding;

  return exports;

}({}));
