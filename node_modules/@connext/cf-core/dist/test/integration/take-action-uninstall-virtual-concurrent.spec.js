"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/utils");
const bignumber_jest_matcher_1 = require("../machine/integration/bignumber-jest-matcher");
const setup_1 = require("./setup");
const tic_tac_toe_1 = require("./tic-tac-toe");
const utils_2 = require("./utils");
expect.extend({ toBeLt: bignumber_jest_matcher_1.toBeLt });
jest.setTimeout(15000);
const { TicTacToeApp } = global["networkContext"];
describe("Concurrently taking action on regular app and uninstallling virtual app without issue", () => {
    let multisigAddressAB;
    let multisigAddressBC;
    let nodeA;
    let nodeB;
    let nodeC;
    let virtualId;
    let appId;
    beforeEach(async () => {
        const context = await setup_1.setup(global, true);
        nodeA = context["A"].node;
        nodeB = context["B"].node;
        nodeC = context["C"].node;
        multisigAddressAB = await utils_2.createChannel(nodeA, nodeB);
        multisigAddressBC = await utils_2.createChannel(nodeB, nodeC);
        await utils_2.collateralizeChannel(multisigAddressAB, nodeA, nodeB, utils_1.parseEther("2"));
        await utils_2.collateralizeChannel(multisigAddressBC, nodeB, nodeC, utils_1.parseEther("2"));
        virtualId = await utils_2.installVirtualApp(nodeA, nodeB, nodeC, TicTacToeApp);
        [appId] = await utils_2.installApp(nodeA, nodeB, TicTacToeApp);
    });
    it("can handle concurrent uninstall virtual and take action by the same node", async (done) => {
        let executedActions = 0;
        const incrementAndEnd = () => {
            executedActions += 1;
            if (executedActions === 2)
                done();
        };
        nodeC.on("UNINSTALL_VIRTUAL_EVENT", () => {
            incrementAndEnd();
        });
        nodeB.on("UPDATE_STATE_EVENT", async () => {
            incrementAndEnd();
        });
        const takeActionReq = (appId) => utils_2.constructTakeActionRpc(appId, tic_tac_toe_1.validAction);
        const uninstallReq = (appId) => utils_2.constructUninstallVirtualRpc(appId, nodeB.publicIdentifier);
        nodeB.rpcRouter.dispatch(takeActionReq(appId));
        nodeA.rpcRouter.dispatch(uninstallReq(virtualId));
    });
});
//# sourceMappingURL=take-action-uninstall-virtual-concurrent.spec.js.map