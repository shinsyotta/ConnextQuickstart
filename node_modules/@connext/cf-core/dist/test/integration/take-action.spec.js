"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const src_1 = require("../../src");
const setup_1 = require("./setup");
const tic_tac_toe_1 = require("./tic-tac-toe");
const utils_1 = require("./utils");
const { TicTacToeApp } = global["networkContext"];
function confirmMessages(initiator, responder, expectedData) {
    const expected = {
        from: initiator.publicIdentifier,
        type: "UPDATE_STATE_EVENT",
        data: expectedData,
    };
    responder.once("UPDATE_STATE_EVENT", (msg) => {
        utils_1.assertNodeMessage(msg, expected);
    });
}
describe("Node method follows spec - takeAction", () => {
    let nodeA;
    let nodeB;
    beforeAll(async () => {
        const context = await setup_1.setup(global);
        nodeA = context["A"].node;
        nodeB = context["B"].node;
    });
    describe("Node A and B install an AppInstance, Node A takes action, " +
        "Node B confirms receipt of state update", () => {
        it("sends takeAction with invalid appInstanceId", async () => {
            const takeActionReq = utils_1.constructTakeActionRpc("", tic_tac_toe_1.validAction);
            await expect(nodeA.rpcRouter.dispatch(takeActionReq)).rejects.toThrowError(src_1.NO_APP_INSTANCE_FOR_TAKE_ACTION);
        });
        it("can take action", async (done) => {
            await utils_1.createChannel(nodeA, nodeB);
            const [appInstanceId] = await utils_1.installApp(nodeA, nodeB, TicTacToeApp);
            const expectedNewState = {
                board: [[constants_1.One, constants_1.Zero, constants_1.Zero], [constants_1.Zero, constants_1.Zero, constants_1.Zero], [constants_1.Zero, constants_1.Zero, constants_1.Zero]],
                versionNumber: constants_1.One,
                winner: constants_1.Zero
            };
            nodeB.on("UPDATE_STATE_EVENT", async (msg) => {
                const { result: { result: { state } } } = await nodeB.rpcRouter.dispatch(utils_1.constructGetStateRpc(appInstanceId));
                expect(state).toEqual(expectedNewState);
                done();
            });
            const takeActionReq = utils_1.constructTakeActionRpc(appInstanceId, tic_tac_toe_1.validAction);
            confirmMessages(nodeA, nodeB, {
                newState: expectedNewState,
                appInstanceId,
                action: tic_tac_toe_1.validAction,
            });
            const { result: { result: { newState } } } = await nodeA.rpcRouter.dispatch(takeActionReq);
            await new Promise(resolve => {
                nodeA.once("UPDATE_STATE_EVENT", () => {
                    setTimeout(resolve, 2000);
                });
            });
            expect(newState).toEqual(expectedNewState);
        });
    });
});
//# sourceMappingURL=take-action.spec.js.map