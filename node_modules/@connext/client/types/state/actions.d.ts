import { ActionCreator } from 'typescript-fsa';
import { ChannelState, CustodialBalanceRow, ExchangeRateState, SyncResult, ThreadHistoryItem, ThreadState, UpdateRequest } from '../types';
import { ConnextState, IPendingRequestedDeposit, RuntimeState, SyncControllerState } from './store';
export declare type ActionCreatorWithHandler<T> = ActionCreator<T> & {
    handler(...args: any[]): any;
};
export declare type StateTransform<T> = (state: ConnextState, payload: T, old: any) => any;
export interface SetterActionOverloaded {
    <Payload>(attr: string, transform?: StateTransform<Payload>): ActionCreatorWithHandler<Payload>;
    <Payload>(attr: string, action: string, transform: StateTransform<Payload>): ActionCreatorWithHandler<Payload>;
}
export declare const setterAction: SetterActionOverloaded;
export declare const setExchangeRate: ActionCreatorWithHandler<ExchangeRateState>;
export declare const updateTransactionFields: ActionCreatorWithHandler<Partial<RuntimeState>>;
export declare const setSortedSyncResultsFromHub: ActionCreatorWithHandler<SyncResult<string>[]>;
export declare const dequeueSyncResultsFromHub: ActionCreatorWithHandler<SyncResult<string>>;
export declare const setChannelStatus: ActionCreatorWithHandler<"CS_CHAINSAW_ERROR" | "CS_CHANNEL_DISPUTE" | "CS_OPEN" | "CS_THREAD_DISPUTE">;
export declare const setLastThreadUpdateId: ActionCreatorWithHandler<number>;
export interface ISetChannelActionArgs {
    update: UpdateRequest;
    state: ChannelState;
}
export declare const setChannelAndUpdate: {
    (payload: ISetChannelActionArgs, meta?: {
        [key: string]: any;
    } | null | undefined): import("typescript-fsa").Action<ISetChannelActionArgs>;
    type: string;
    match: (action: import("typescript-fsa").AnyAction) => action is import("typescript-fsa").Action<ISetChannelActionArgs>;
};
export declare const setChannel: ActionCreatorWithHandler<ChannelState<string>>;
export declare const setLatestValidState: ActionCreatorWithHandler<ChannelState<string>>;
export declare const setSyncControllerState: ActionCreatorWithHandler<SyncControllerState>;
export declare const setRequestedDeposit: ActionCreatorWithHandler<IPendingRequestedDeposit | undefined>;
export declare const setThreadHistory: ActionCreatorWithHandler<ThreadHistoryItem[]>;
export declare const setActiveInitialThreadStates: ActionCreatorWithHandler<ThreadState<string>[]>;
export declare const setActiveThreads: ActionCreatorWithHandler<ThreadState<string>[]>;
export declare const setCustodialBalance: ActionCreatorWithHandler<CustodialBalanceRow<string>>;
export declare const setHubAddress: ActionCreatorWithHandler<string>;
