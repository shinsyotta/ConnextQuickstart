"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src");
const bignumber_jest_matcher_1 = require("../machine/integration/bignumber-jest-matcher");
const setup_1 = require("./setup");
const utils_1 = require("./utils");
expect.extend({ toBeLt: bignumber_jest_matcher_1.toBeLt });
const { TicTacToeApp } = global["networkContext"];
async function assertEqualProposedApps(nodeA, nodeB, expectedAppIds) {
    const proposedA = await utils_1.getProposedAppInstances(nodeA);
    const proposedB = await utils_1.getProposedAppInstances(nodeB);
    expect(proposedB.length).toEqual(proposedA.length);
    expect(proposedB.length).toEqual(expectedAppIds.length);
    expect(proposedA).toEqual(proposedB);
    for (const id of expectedAppIds) {
        const appA = await utils_1.getAppInstanceProposal(nodeA, id);
        const appB = await utils_1.getAppInstanceProposal(nodeB, id);
        expect(appA).toEqual(appB);
    }
}
describe("Node method follows spec - propose install", () => {
    let multisigAddress;
    let nodeA;
    let nodeB;
    describe("NodeA initiates proposal, nodeB approves, found in both stores", () => {
        beforeEach(async () => {
            const context = await setup_1.setup(global);
            nodeA = context["A"].node;
            nodeB = context["B"].node;
            multisigAddress = await utils_1.createChannel(nodeA, nodeB);
            await utils_1.collateralizeChannel(multisigAddress, nodeA, nodeB);
        });
        it("propose install an app with eth and a meta", async (done) => {
            const rpc = utils_1.makeProposeCall(nodeB, TicTacToeApp);
            const params = Object.assign({}, rpc.parameters, { meta: {
                    info: "Provided meta"
                } });
            const expectedMessageB = {
                data: {
                    params
                },
                from: nodeA.publicIdentifier,
                type: "PROPOSE_INSTALL_EVENT"
            };
            nodeB.once("PROPOSE_INSTALL_EVENT", async (msg) => {
                utils_1.assertNodeMessage(msg, expectedMessageB, ["data.appInstanceId"]);
                await assertEqualProposedApps(nodeA, nodeB, [msg.data.appInstanceId]);
                done();
            });
            await nodeA.rpcRouter.dispatch(Object.assign({}, rpc, { parameters: src_1.deBigNumberifyJson(params) }));
        });
    });
});
//# sourceMappingURL=propose.spec.js.map