import { Address, BN, ChannelRow, ChannelState, ChannelStateUpdate, CustodialBalanceRow, CustodialWithdrawalRow, EmailRequest, ExchangeRates, HubConfig, Payment, PaymentProfileConfig, PurchasePayment, PurchasePaymentHubResponse, PurchasePaymentRow, PurchaseRowWithPayments, SignedDepositRequestProposal, Sync, ThreadRow, ThreadState, ThreadStateUpdate, UpdateRequest, WithdrawalParameters } from './types';
import { Wallet } from './Wallet';
/*********************************
 ****** CONSTRUCTOR TYPES ********
 *********************************/
export interface IHubAPIClient {
    buy<PurchaseMetaType = any, PaymentMetaType = any>(meta: PurchaseMetaType, payments: Array<PurchasePayment<PaymentMetaType>>): Promise<PurchasePaymentHubResponse>;
    config(): Promise<HubConfig>;
    getActiveThreads(): Promise<ThreadState[]>;
    getAllThreads(): Promise<ThreadState[]>;
    getChannel(): Promise<ChannelRow>;
    getChannelByUser(user: Address): Promise<ChannelRow>;
    getChannelStateAtNonce(txCountGlobal: number): Promise<ChannelStateUpdate>;
    getCustodialBalance(): Promise<CustodialBalanceRow | undefined>;
    getExchangeRates(): Promise<ExchangeRates>;
    getIncomingThreads(): Promise<ThreadRow[]>;
    getLastThreadUpdateId(): Promise<number>;
    getLatestChannelStateAndUpdate(): Promise<{
        state: ChannelState;
        update: UpdateRequest;
    } | undefined>;
    getLatestStateNoPendingOps(): Promise<ChannelState | undefined>;
    getPaymentById(id: string): Promise<PurchaseRowWithPayments<object, string>>;
    getPaymentHistory(): Promise<PurchasePaymentRow[]>;
    getProfileConfig(): Promise<PaymentProfileConfig | undefined>;
    getThreadByParties(partyB: Address, userIsSender: boolean): Promise<ThreadRow>;
    getThreadInitialStates(): Promise<ThreadState[]>;
    redeem(secret: string, txCount: number, lastThreadUpdateId: number): Promise<PurchasePaymentHubResponse & {
        amount: Payment;
    }>;
    requestCollateral(txCountGlobal: number): Promise<Sync>;
    requestCustodialWithdrawal(amountToken: BN, recipient: Address): Promise<CustodialWithdrawalRow | undefined>;
    requestDeposit(deposit: SignedDepositRequestProposal, txCount: number, lastThreadUpdateId: number): Promise<Sync>;
    requestExchange(weiToSell: string, tokensToSell: string, txCountGlobal: number): Promise<Sync>;
    requestWithdrawal(withdrawal: WithdrawalParameters, txCountGlobal: number): Promise<Sync>;
    startProfileSession(): Promise<void>;
    sync(txCountGlobal: number, lastThreadUpdateId: number): Promise<Sync | undefined>;
    updateHub(updates: UpdateRequest[], lastThreadUpdateId: number): Promise<{
        error: string | undefined;
        updates: Sync;
    }>;
    updateThread(update: ThreadStateUpdate): Promise<ThreadStateUpdate>;
    sendEmail(email: EmailRequest): Promise<{
        message: string;
        id: string;
    }>;
}
export declare class HubAPIClient implements IHubAPIClient {
    private address;
    private hubUrl;
    private nonce;
    private signature;
    private wallet;
    private ws?;
    private log;
    constructor(hubUrl: string, wallet: Wallet, logLevel?: number);
    subscribe(callback: any): Promise<void>;
    sendEmail(email: EmailRequest): Promise<{
        message: string;
        id: string;
    }>;
    buy<PurchaseMetaType = any, PaymentMetaType = any>(meta: PurchaseMetaType, payments: Array<PurchasePayment<any, any>>): Promise<PurchasePaymentHubResponse>;
    config(): Promise<HubConfig>;
    getActiveThreads(): Promise<ThreadState[]>;
    getAllThreads(): Promise<ThreadState[]>;
    getChannel(): Promise<ChannelRow>;
    getChannelByUser(user: Address): Promise<ChannelRow>;
    getChannelStateAtNonce(txCountGlobal: number): Promise<ChannelStateUpdate>;
    getCustodialBalance(): Promise<CustodialBalanceRow | undefined>;
    getExchangeRates(): Promise<ExchangeRates>;
    getIncomingThreads(): Promise<ThreadRow[]>;
    getLastThreadUpdateId(): Promise<number>;
    getLatestChannelStateAndUpdate(): Promise<{
        state: ChannelState;
        update: UpdateRequest;
    } | undefined>;
    getLatestStateNoPendingOps(): Promise<ChannelState | undefined>;
    getPaymentById(id: string): Promise<PurchaseRowWithPayments<object, string>>;
    getPaymentHistory(): Promise<PurchasePaymentRow[]>;
    getProfileConfig(): Promise<PaymentProfileConfig | undefined>;
    getThreadByParties(partyB: Address, userIsSender: boolean): Promise<ThreadRow>;
    getThreadInitialStates(): Promise<ThreadState[]>;
    redeem(secret: string, txCount: number, lastThreadUpdateId: number): Promise<PurchasePaymentHubResponse & {
        amount: Payment;
    }>;
    requestCollateral(txCountGlobal: number): Promise<Sync>;
    requestCustodialWithdrawal(amountToken: BN, recipient: Address): Promise<CustodialWithdrawalRow | undefined>;
    requestDeposit(deposit: SignedDepositRequestProposal, txCount: number, lastThreadUpdateId: number): Promise<Sync>;
    requestExchange(weiToSell: string, tokensToSell: string, txCountGlobal: number): Promise<Sync>;
    requestWithdrawal(withdrawal: WithdrawalParameters, txCountGlobal: number): Promise<Sync>;
    startProfileSession(): Promise<void>;
    sync(txCountGlobal: number, lastThreadUpdateId: number): Promise<Sync | undefined>;
    updateHub(updates: UpdateRequest[], lastThreadUpdateId: number): Promise<{
        error: string | undefined;
        updates: Sync;
    }>;
    updateThread(update: ThreadStateUpdate): Promise<ThreadStateUpdate>;
    private authenticate;
    private get;
    private post;
    private send;
}
