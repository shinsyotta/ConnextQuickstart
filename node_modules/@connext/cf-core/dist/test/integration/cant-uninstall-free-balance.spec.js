"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src");
const models_1 = require("../../src/models");
const setup_1 = require("./setup");
const utils_1 = require("./utils");
describe("Confirms that a FreeBalance cannot be uninstalled", () => {
    let nodeA;
    let nodeB;
    beforeAll(async () => {
        const context = await setup_1.setup(global);
        nodeA = context["A"].node;
        nodeB = context["B"].node;
    });
    describe("Node A and B open channel, attempt to uninstall FreeBalance", () => {
        it("can't uninstall FreeBalance", async () => {
            const multisigAddress = await utils_1.createChannel(nodeA, nodeB);
            const channel = models_1.StateChannel.setupChannel(global["networkContext"].IdentityApp, global["networkContext"].ProxyFactory, multisigAddress, [nodeA.publicIdentifier, nodeB.publicIdentifier]);
            const fbUninstallReq = utils_1.constructUninstallRpc(channel.freeBalance.identityHash);
            try {
                await nodeA.rpcRouter.dispatch(fbUninstallReq);
            }
            catch (e) {
                expect(e.toString()).toMatch(src_1.CANNOT_UNINSTALL_FREE_BALANCE(multisigAddress));
            }
        });
    });
});
//# sourceMappingURL=cant-uninstall-free-balance.spec.js.map