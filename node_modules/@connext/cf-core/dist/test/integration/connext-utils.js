"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("ethers/constants");
const utils_1 = require("ethers/utils");
const simple_transfer_1 = require("./simple-transfer");
const utils_2 = require("./utils");
const { SimpleTransferApp, UnidirectionalLinkedTransferApp } = global["networkContext"];
async function makeSimpleTransfer(sender, intermediary, receiver, amount = constants_1.One) {
    const initialState = simple_transfer_1.initialSimpleTransferState(sender.freeBalanceAddress, receiver.freeBalanceAddress, amount);
    const appId = await utils_2.installVirtualApp(sender, intermediary, receiver, SimpleTransferApp, initialState);
    const senderApp = await utils_2.getAppInstance(sender, appId);
    const receiverApp = await utils_2.getAppInstance(receiver, appId);
    expect(senderApp).toEqual(receiverApp);
    await utils_2.uninstallVirtualApp(sender, receiver, intermediary.publicIdentifier, appId);
}
exports.makeSimpleTransfer = makeSimpleTransfer;
async function installLink(funder, redeemer, state, action) {
    const linkDef = UnidirectionalLinkedTransferApp;
    const res = await utils_2.installApp(funder, redeemer, linkDef, state, utils_1.bigNumberify(action.amount), action.assetId, constants_1.Zero, action.assetId);
    return res[0];
}
exports.installLink = installLink;
function assertLinkRedemption(app, amount) {
    expect(app.latestState.finalized).toEqual(true);
    expect(app.latestState.transfers[1][1]).toBeEq(amount);
    expect(app.latestState.transfers[0][1]).toBeEq(constants_1.Zero);
}
async function redeemLink(redeemer, funder, appId, action) {
    await utils_2.takeAppAction(redeemer, appId, action);
    const redeemerApp = await utils_2.getAppInstance(redeemer, appId);
    assertLinkRedemption(redeemerApp, action.amount);
    return await utils_2.uninstallApp(redeemer, funder, appId);
}
exports.redeemLink = redeemLink;
async function installAndRedeemLink(funder, intermediary, redeemer, stateAndAction) {
    const linkDef = UnidirectionalLinkedTransferApp;
    const hubApps = await utils_2.getApps(intermediary);
    const { state, action } = stateAndAction;
    const hasAddressInTransfers = (app, addr) => {
        return (app.latestState.transfers[0]
            .to === addr ||
            app.latestState.transfers[1]
                .to === addr);
    };
    const getMatchingHubApp = (apps) => {
        return apps.find(app => app.appInterface.addr === linkDef &&
            hasAddressInTransfers(app, funder.freeBalanceAddress) &&
            app.latestState.linkedHash ===
                state.linkedHash);
    };
    const matchedApp = getMatchingHubApp(hubApps);
    expect(matchedApp).toBeDefined();
    const redeemerAppId = await installLink(intermediary, redeemer, state, action);
    await redeemLink(redeemer, intermediary, redeemerAppId, action);
    await redeemLink(intermediary, funder, matchedApp.identityHash, action);
}
exports.installAndRedeemLink = installAndRedeemLink;
//# sourceMappingURL=connext-utils.js.map