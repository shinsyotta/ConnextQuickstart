import { BigNumber as ethersBig } from "ethers/utils";
export declare type BigNumber = ethersBig;
export declare const BigNumber: typeof ethersBig;
export declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export declare const ConnextEvents: {
    RECIEVE_TRANSFER_FAILED_EVENT: string;
    RECIEVE_TRANSFER_FINISHED_EVENT: string;
    RECIEVE_TRANSFER_STARTED_EVENT: string;
    CREATE_CHANNEL_EVENT: string;
    DEPOSIT_CONFIRMED_EVENT: string;
    DEPOSIT_FAILED_EVENT: string;
    DEPOSIT_STARTED_EVENT: string;
    INSTALL_EVENT: string;
    INSTALL_VIRTUAL_EVENT: string;
    REJECT_INSTALL_EVENT: string;
    UNINSTALL_EVENT: string;
    UNINSTALL_VIRTUAL_EVENT: string;
    UPDATE_STATE_EVENT: string;
    WITHDRAWAL_CONFIRMED_EVENT: string;
    WITHDRAWAL_FAILED_EVENT: string;
    WITHDRAWAL_STARTED_EVENT: string;
    PROPOSE_INSTALL_EVENT: string;
    PROTOCOL_MESSAGE_EVENT: string;
};
export declare type ConnextEvent = keyof typeof ConnextEvents;
export declare const ConnextNodeStorePrefix = "INDRA_NODE_CF_CORE";
export declare const ConnextClientStorePrefix = "INDRA_CLIENT_CF_CORE";
//# sourceMappingURL=basic.d.ts.map