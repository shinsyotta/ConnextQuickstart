"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_server_1 = require("rpc-server");
const constants_1 = require("../../../constants");
const machine_1 = require("../../../machine");
const types_1 = require("../../../types");
const utils_1 = require("../../../utils");
const controller_1 = require("../../controller");
const errors_1 = require("../../errors");
const operation_1 = require("./operation");
class WithdrawController extends controller_1.NodeController {
    constructor() {
        super(...arguments);
        this.executeMethod = super.executeMethod;
    }
    static async getRequiredLockNames(requestHandler, params) {
        const { store, publicIdentifier, networkContext } = requestHandler;
        const stateChannel = await store.getStateChannel(params.multisigAddress);
        const tokenAddress = params.tokenAddress || constants_1.CONVENTION_FOR_ETH_TOKEN_ADDRESS;
        if (stateChannel.hasBalanceRefundAppInstance(networkContext.CoinBalanceRefundApp, tokenAddress)) {
            throw Error(errors_1.CANNOT_WITHDRAW);
        }
        const senderBalance = stateChannel
            .getFreeBalanceClass()
            .getBalance(tokenAddress, stateChannel.getFreeBalanceAddrOf(publicIdentifier));
        if (senderBalance.lt(params.amount)) {
            throw Error(errors_1.INSUFFICIENT_FUNDS_TO_WITHDRAW(tokenAddress, params.amount, senderBalance));
        }
        return [params.multisigAddress];
    }
    async executeMethodImplementation(requestHandler, params) {
        const { store, provider, wallet, publicIdentifier, blocksNeededForConfirmation, outgoing } = requestHandler;
        const { multisigAddress, recipient } = params;
        params.recipient = recipient || machine_1.xkeyKthAddress(publicIdentifier, 0);
        await operation_1.runWithdrawProtocol(requestHandler, params);
        const commitment = await store.getWithdrawalCommitment(multisigAddress);
        if (!commitment) {
            throw Error("No withdrawal commitment found");
        }
        if ((await provider.getCode(multisigAddress)) === "0x") {
            throw Error("Multisig has not been deployed");
        }
        const tx = Object.assign({}, commitment, { gasPrice: await provider.getGasPrice(), gasLimit: 300000 });
        let txResponse;
        try {
            txResponse = await wallet.sendTransaction(tx);
            outgoing.emit(types_1.NODE_EVENTS.WITHDRAWAL_STARTED, {
                from: publicIdentifier,
                type: types_1.NODE_EVENTS.WITHDRAWAL_STARTED,
                data: {
                    params,
                    txHash: txResponse.hash
                }
            });
            const txReceipt = await provider.waitForTransaction(txResponse.hash, blocksNeededForConfirmation);
            outgoing.emit(types_1.NODE_EVENTS.WITHDRAWAL_CONFIRMED, {
                from: publicIdentifier,
                type: types_1.NODE_EVENTS.WITHDRAWAL_CONFIRMED,
                data: { txReceipt }
            });
        }
        catch (e) {
            outgoing.emit(types_1.NODE_EVENTS.WITHDRAWAL_FAILED, {
                from: publicIdentifier,
                type: types_1.NODE_EVENTS.WITHDRAWAL_FAILED,
                data: e.toString()
            });
            throw Error(`${errors_1.WITHDRAWAL_FAILED}: ${utils_1.prettyPrintObject(e)}`);
        }
        return {
            recipient: params.recipient,
            txHash: txResponse.hash
        };
    }
}
__decorate([
    rpc_server_1.jsonRpcMethod(types_1.Node.RpcMethodName.WITHDRAW),
    __metadata("design:type", Object)
], WithdrawController.prototype, "executeMethod", void 0);
exports.default = WithdrawController;
//# sourceMappingURL=controller.js.map