import { BigNumber } from "ethers/utils";
import { SimpleLinkedTransferAppState } from "./app";
import { Address, CFCoreTypes } from "./cf";
import { AssetAmount } from "./channel";
export declare type AllowedSwap = {
    from: string;
    to: string;
};
export declare type SwapRate = AllowedSwap & {
    rate: string;
};
export declare type DepositParameters<T = string> = Omit<AssetAmount<T>, "assetId"> & {
    assetId?: Address;
};
export declare type DepositParametersBigNumber = DepositParameters<BigNumber>;
export declare type RequestDepositRightsParameters = Omit<DepositParameters, "amount">;
export declare type RequestDepositRightsResponse = CFCoreTypes.RequestDepositRightsResult;
export declare type CheckDepositRightsParameters = RequestDepositRightsParameters;
export declare type CheckDepositRightsResponse<T = string> = {
    assetId: Address;
    multisigBalance: T;
    recipient: Address;
    threshold: T;
};
export declare type RescindDepositRightsParameters = RequestDepositRightsParameters;
export declare type RescindDepositRightsResponse = CFCoreTypes.DepositResult;
export declare type TransferParameters<T = string> = DepositParameters<T> & {
    recipient: Address;
    meta?: object;
};
export declare type TransferParametersBigNumber = TransferParameters<BigNumber>;
export interface SwapParameters<T = string> {
    amount: T;
    swapRate: string;
    toAssetId: Address;
    fromAssetId: Address;
}
export declare type SwapParametersBigNumber = SwapParameters<BigNumber>;
export declare type WithdrawParameters<T = string> = DepositParameters<T> & {
    userSubmitted?: boolean;
    recipient?: Address;
};
export declare type WithdrawParametersBigNumber = WithdrawParameters<BigNumber>;
export declare type ResolveLinkedTransferParameters<T = string> = Omit<LinkedTransferParameters<T>, "amount" | "assetId">;
export declare type ResolveLinkedTransferParametersBigNumber = ResolveLinkedTransferParameters<BigNumber>;
export declare type ResolveLinkedTransferToRecipientParameters<T = string> = Omit<ResolveLinkedTransferParameters<T>, "recipient" | "conditionType"> & {
    conditionType: "LINKED_TRANSFER_TO_RECIPIENT";
};
export declare type ResolveLinkedTransferToRecipientParametersBigNumber = ResolveLinkedTransferToRecipientParameters<BigNumber>;
export declare type ResolveConditionParameters<T = string> = ResolveLinkedTransferParameters<T> | ResolveLinkedTransferToRecipientParameters<T>;
export declare type ResolveLinkedTransferResponse = {
    freeBalance: CFCoreTypes.GetFreeBalanceStateResult;
    paymentId: string;
};
export declare type ResolveConditionResponse = ResolveLinkedTransferResponse;
export declare const TransferConditions: {
    LINKED_TRANSFER: string;
    LINKED_TRANSFER_TO_RECIPIENT: string;
};
export declare type TransferCondition = keyof typeof TransferConditions;
export declare type LinkedTransferParameters<T = string> = {
    conditionType: "LINKED_TRANSFER";
    amount: T;
    assetId?: Address;
    paymentId: string;
    preImage: string;
    meta?: object;
};
export declare type LinkedTransferParametersBigNumber = LinkedTransferParameters<BigNumber>;
export declare type LinkedTransferResponse = {
    paymentId: string;
    preImage: string;
    freeBalance: CFCoreTypes.GetFreeBalanceStateResult;
    meta?: object;
};
export declare type LinkedTransferToRecipientParameters<T = string> = Omit<LinkedTransferParameters<T>, "conditionType"> & {
    conditionType: "LINKED_TRANSFER_TO_RECIPIENT";
    recipient: string;
};
export declare type LinkedTransferToRecipientParametersBigNumber = LinkedTransferToRecipientParameters<BigNumber>;
export declare type LinkedTransferToRecipientResponse = LinkedTransferResponse & {
    recipient: string;
};
export declare type ConditionalTransferParameters<T = string> = LinkedTransferParameters<T> | LinkedTransferToRecipientParameters<T>;
export declare type ConditionalTransferParametersBigNumber = ConditionalTransferParameters<BigNumber>;
export declare type ConditionalTransferResponse = LinkedTransferResponse | LinkedTransferToRecipientResponse;
export declare type ConditionalTransferInitialState<T = string> = SimpleLinkedTransferAppState<T>;
export declare type ConditionalTransferInitialStateBigNumber = ConditionalTransferInitialState<BigNumber>;
//# sourceMappingURL=inputs.d.ts.map