const multiAssetMultiPartyCoinTransferInterpreterParamsEncoding = `tuple(uint256[] limit, address[] tokenAddresses)`;
const singleAssetTwoPartyCoinTransferInterpreterParamsEncoding = `tuple(uint256 limit, address tokenAddress)`;
const twoPartyFixedOutcomeInterpreterParamsEncoding = `tuple(address[2] playerAddrs, uint256 amount)`;
const virtualAppAgreementEncoding = `tuple(uint256 capitalProvided, address capitalProvider, address virtualAppUser, address tokenAddress)`;
const multiAssetMultiPartyCoinTransferEncoding = `tuple(address to, uint256 amount)[][]`;
const coinBalanceRefundStateEncoding = `tuple(address recipient, address multisig, uint256 threshold, address tokenAddress)`;
var OutcomeType;
(function (OutcomeType) {
    OutcomeType["TWO_PARTY_FIXED_OUTCOME"] = "TWO_PARTY_FIXED_OUTCOME";
    OutcomeType["MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER"] = "MULTI_ASSET_MULTI_PARTY_COIN_TRANSFER";
    OutcomeType["SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER"] = "SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER";
})(OutcomeType || (OutcomeType = {}));
var TwoPartyFixedOutcome;
(function (TwoPartyFixedOutcome) {
    TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_ONE"] = 0] = "SEND_TO_ADDR_ONE";
    TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_TWO"] = 1] = "SEND_TO_ADDR_TWO";
    TwoPartyFixedOutcome[TwoPartyFixedOutcome["SPLIT_AND_SEND_TO_BOTH_ADDRS"] = 2] = "SPLIT_AND_SEND_TO_BOTH_ADDRS";
})(TwoPartyFixedOutcome || (TwoPartyFixedOutcome = {}));

var Node;
(function (Node) {
    let ErrorType;
    (function (ErrorType) {
        ErrorType["ERROR"] = "error";
    })(ErrorType = Node.ErrorType || (Node.ErrorType = {}));
    let MethodName;
    (function (MethodName) {
        MethodName["ACCEPT_STATE"] = "acceptState";
        MethodName["GET_PROPOSED_APP_INSTANCE"] = "getProposedAppInstance";
    })(MethodName = Node.MethodName || (Node.MethodName = {}));
    let RpcMethodName;
    (function (RpcMethodName) {
        RpcMethodName["CREATE_CHANNEL"] = "chan_create";
        RpcMethodName["DEPOSIT"] = "chan_deposit";
        RpcMethodName["DEPLOY_STATE_DEPOSIT_HOLDER"] = "chan_deployStateDepositHolder";
        RpcMethodName["GET_CHANNEL_ADDRESSES"] = "chan_getChannelAddresses";
        RpcMethodName["GET_APP_INSTANCE_DETAILS"] = "chan_getAppInstance";
        RpcMethodName["GET_APP_INSTANCES"] = "chan_getAppInstances";
        RpcMethodName["GET_STATE_DEPOSIT_HOLDER_ADDRESS"] = "chan_getStateDepositHolderAddress";
        RpcMethodName["GET_FREE_BALANCE_STATE"] = "chan_getFreeBalanceState";
        RpcMethodName["GET_TOKEN_INDEXED_FREE_BALANCE_STATES"] = "chan_getTokenIndexedFreeBalanceStates";
        RpcMethodName["GET_PROPOSED_APP_INSTANCES"] = "chan_getProposedAppInstances";
        RpcMethodName["GET_STATE"] = "chan_getState";
        RpcMethodName["GET_STATE_CHANNEL"] = "chan_getStateChannel";
        RpcMethodName["INSTALL"] = "chan_install";
        RpcMethodName["REQUEST_DEPOSIT_RIGHTS"] = "chan_requestDepositRights";
        RpcMethodName["INSTALL_VIRTUAL"] = "chan_installVirtual";
        RpcMethodName["PROPOSE_INSTALL"] = "chan_proposeInstall";
        RpcMethodName["REJECT_INSTALL"] = "chan_rejectInstall";
        RpcMethodName["UPDATE_STATE"] = "chan_updateState";
        RpcMethodName["TAKE_ACTION"] = "chan_takeAction";
        RpcMethodName["UNINSTALL"] = "chan_uninstall";
        RpcMethodName["UNINSTALL_VIRTUAL"] = "chan_uninstallVirtual";
        RpcMethodName["RESCIND_DEPOSIT_RIGHTS"] = "chan_rescindDepositRights";
        RpcMethodName["WITHDRAW"] = "chan_withdraw";
        RpcMethodName["WITHDRAW_COMMITMENT"] = "chan_withdrawCommitment";
    })(RpcMethodName = Node.RpcMethodName || (Node.RpcMethodName = {}));
    let EventName;
    (function (EventName) {
        EventName["COUNTER_DEPOSIT_CONFIRMED"] = "counterDepositConfirmed";
        EventName["CREATE_CHANNEL"] = "createChannelEvent";
        EventName["DEPOSIT_CONFIRMED"] = "depositConfirmedEvent";
        EventName["DEPOSIT_FAILED"] = "depositFailed";
        EventName["DEPOSIT_STARTED"] = "depositStartedEvent";
        EventName["INSTALL"] = "installEvent";
        EventName["INSTALL_VIRTUAL"] = "installVirtualEvent";
        EventName["REJECT_INSTALL"] = "rejectInstallEvent";
        EventName["UNINSTALL"] = "uninstallEvent";
        EventName["UNINSTALL_VIRTUAL"] = "uninstallVirtualEvent";
        EventName["UPDATE_STATE"] = "updateStateEvent";
        EventName["WITHDRAWAL_CONFIRMED"] = "withdrawalConfirmedEvent";
        EventName["WITHDRAWAL_FAILED"] = "withdrawalFailed";
        EventName["WITHDRAWAL_STARTED"] = "withdrawalStartedEvent";
        EventName["PROPOSE_INSTALL"] = "proposeInstallEvent";
        EventName["PROTOCOL_MESSAGE_EVENT"] = "protocolMessageEvent";
        EventName["REJECT_INSTALL_VIRTUAL"] = "rejectInstallEvent";
    })(EventName = Node.EventName || (Node.EventName = {}));
})(Node || (Node = {}));

const EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT = [
    "ChallengeRegistry",
    "ConditionalTransactionDelegateTarget",
    "CoinBalanceRefundApp",
    "MultiAssetMultiPartyCoinTransferInterpreter",
    "IdentityApp",
    "MinimumViableMultisig",
    "ProxyFactory",
    "SingleAssetTwoPartyCoinTransferInterpreter",
    "TimeLockedPassThrough",
    "TwoPartyFixedOutcomeInterpreter",
    "TwoPartyFixedOutcomeFromVirtualAppInterpreter"
];

export { EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT, Node, OutcomeType, TwoPartyFixedOutcome, coinBalanceRefundStateEncoding, multiAssetMultiPartyCoinTransferEncoding, multiAssetMultiPartyCoinTransferInterpreterParamsEncoding, singleAssetTwoPartyCoinTransferInterpreterParamsEncoding, twoPartyFixedOutcomeInterpreterParamsEncoding, virtualAppAgreementEncoding };
