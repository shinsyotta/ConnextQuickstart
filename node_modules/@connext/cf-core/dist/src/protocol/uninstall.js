"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_1 = require("../ethereum");
const machine_1 = require("../machine");
const enums_1 = require("../machine/enums");
const get_outcome_increments_1 = require("./utils/get-outcome-increments");
const signature_forwarder_1 = require("./utils/signature-forwarder");
const signature_validator_1 = require("./utils/signature-validator");
const protocol = enums_1.Protocol.Uninstall;
const { OP_SIGN, IO_SEND, IO_SEND_AND_WAIT, PERSIST_STATE_CHANNEL, WRITE_COMMITMENT } = enums_1.Opcode;
exports.UNINSTALL_PROTOCOL = {
    0: function (context) {
        return __asyncGenerator(this, arguments, function* () {
            const { message, provider, stateChannelsMap, network } = context;
            const { params, processID } = message;
            const { responderXpub, appIdentityHash } = params;
            const responderAddress = machine_1.xkeyKthAddress(responderXpub, 0);
            const postProtocolStateChannel = yield __await(computeStateTransition(params, stateChannelsMap, provider));
            const uninstallCommitment = new ethereum_1.SetStateCommitment(network, postProtocolStateChannel.freeBalance.identity, postProtocolStateChannel.freeBalance.hashOfLatestState, postProtocolStateChannel.freeBalance.versionNumber, postProtocolStateChannel.freeBalance.timeout);
            const signature = yield yield __await([OP_SIGN, uninstallCommitment]);
            const { customData: { signature: responderSignature } } = yield yield __await([
                IO_SEND_AND_WAIT,
                {
                    protocol,
                    processID,
                    params,
                    toXpub: responderXpub,
                    customData: { signature },
                    seq: 1
                }
            ]);
            signature_validator_1.assertIsValidSignature(responderAddress, uninstallCommitment, responderSignature);
            const finalCommitment = uninstallCommitment.getSignedTransaction([
                signature,
                responderSignature
            ]);
            yield yield __await([WRITE_COMMITMENT, protocol, finalCommitment, appIdentityHash]);
            yield yield __await([PERSIST_STATE_CHANNEL, [postProtocolStateChannel]]);
            context.stateChannelsMap.set(postProtocolStateChannel.multisigAddress, postProtocolStateChannel);
        });
    },
    1: function (context) {
        return __asyncGenerator(this, arguments, function* () {
            const { message, provider, stateChannelsMap, network } = context;
            const { params, processID } = message;
            const { initiatorXpub, appIdentityHash } = params;
            const initiatorAddress = machine_1.xkeyKthAddress(initiatorXpub, 0);
            const postProtocolStateChannel = yield __await(computeStateTransition(params, stateChannelsMap, provider));
            const uninstallCommitment = new ethereum_1.SetStateCommitment(network, postProtocolStateChannel.freeBalance.identity, postProtocolStateChannel.freeBalance.hashOfLatestState, postProtocolStateChannel.freeBalance.versionNumber, postProtocolStateChannel.freeBalance.timeout);
            const initiatorSignature = context.message.customData.signature;
            signature_validator_1.assertIsValidSignature(initiatorAddress, uninstallCommitment, initiatorSignature);
            const responderSignature = yield yield __await([OP_SIGN, uninstallCommitment]);
            const finalCommitment = uninstallCommitment.getSignedTransaction([
                responderSignature,
                initiatorSignature
            ]);
            yield yield __await([WRITE_COMMITMENT, protocol, finalCommitment, appIdentityHash]);
            yield yield __await([PERSIST_STATE_CHANNEL, [postProtocolStateChannel]]);
            yield yield __await([
                IO_SEND,
                {
                    protocol,
                    processID,
                    toXpub: initiatorXpub,
                    seq: signature_forwarder_1.UNASSIGNED_SEQ_NO,
                    customData: {
                        signature: responderSignature
                    }
                }
            ]);
            context.stateChannelsMap.set(postProtocolStateChannel.multisigAddress, postProtocolStateChannel);
        });
    }
};
async function computeStateTransition(params, stateChannelsMap, provider) {
    const { appIdentityHash, multisigAddress, blockNumberToUseIfNecessary } = params;
    const stateChannel = stateChannelsMap.get(multisigAddress);
    return stateChannel.uninstallApp(appIdentityHash, await get_outcome_increments_1.computeTokenIndexedFreeBalanceIncrements(stateChannel.getAppInstance(appIdentityHash), provider, undefined, blockNumberToUseIfNecessary));
}
//# sourceMappingURL=uninstall.js.map