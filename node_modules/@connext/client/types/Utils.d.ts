import { ConnextState } from './state';
import { ChannelState, ExchangeRates, Payment, SignedDepositRequestProposal, ThreadState, UnsignedChannelState, UnsignedThreadState } from './types';
export declare class Utils {
    channelNumericFields: string[];
    getExchangeRates: (state: ConnextState) => ExchangeRates;
    getCustodialAndChannelBalance: (state: ConnextState) => Payment;
    createChannelStateHash(channelState: UnsignedChannelState): string;
    createDepositRequestProposalHash(req: Payment): string;
    createThreadStateHash(threadState: UnsignedThreadState): string;
    generateThreadProof(thread: UnsignedThreadState, threads: UnsignedThreadState[]): string;
    verifyThreadProof(proof: string, threads: UnsignedThreadState[]): boolean;
    generateThreadRootHash(threadInitialStates: ThreadState[]): string;
    hasPendingOps(stateAny: ChannelState<any>): boolean;
    recoverSigner(hash: string, sig: string, signer: string): string | undefined;
    recoverSignerFromChannelState(channelState: UnsignedChannelState, sig: string, expectedSigner: string): string | undefined;
    recoverSignerFromDepositRequest(args: SignedDepositRequestProposal, expectedSigner: string): string | undefined;
    recoverSignerFromThreadState(threadState: UnsignedThreadState, sig: string): string | undefined;
}
