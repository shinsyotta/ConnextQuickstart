import { AppInstanceJson } from "@connext/types";
import { BaseProvider } from "ethers/providers";
import { AppInstance, AppInstanceProposal, StateChannel } from "./models";
import { CFCoreTypes, SolidityValueType } from "./types";
export declare class Store {
    private readonly storeService;
    private readonly storeKeyPrefix;
    constructor(storeService: CFCoreTypes.IStoreService, storeKeyPrefix: string);
    static getMultisigAddressWithCounterpartyFromMap(stateChannelsMap: Map<string, StateChannel>, owners: string[], proxyFactoryAddress: string, minimumViableMultisigAddress: string, provider?: BaseProvider): Promise<string>;
    getMultisigAddressWithCounterparty(owners: string[], proxyFactoryAddress: string, minimumViableMultisigAddress: string, provider?: BaseProvider): Promise<string>;
    getStateChannelsMap(): Promise<Map<string, StateChannel>>;
    getStateChannel(multisigAddress: string): Promise<StateChannel>;
    hasStateChannel(multisigAddress: string): Promise<boolean>;
    getMultisigAddressFromAppInstance(appInstanceId: string): Promise<string>;
    saveStateChannel(stateChannel: StateChannel): Promise<void>;
    saveAppInstanceState(appInstanceId: string, newState: SolidityValueType): Promise<void>;
    getProposedAppInstances(multisigAddress?: string): Promise<AppInstanceProposal[]>;
    getAppInstances(multisigAddress?: string): Promise<AppInstanceJson[]>;
    getAppInstanceProposal(appInstanceId: string): Promise<AppInstanceProposal>;
    getChannelFromAppInstanceID(appInstanceId: string): Promise<StateChannel>;
    getWithdrawalCommitment(multisigAddress: string): Promise<CFCoreTypes.MinimalTransaction>;
    storeWithdrawalCommitment(multisigAddress: string, commitment: CFCoreTypes.MinimalTransaction): Promise<void>;
    setCommitment(args: any[], commitment: CFCoreTypes.MinimalTransaction): Promise<void>;
    getAppInstance(appInstanceId: string): Promise<AppInstance>;
    getOrCreateStateChannelBetweenVirtualAppParticipants(multisigAddress: string, proxyFactoryAddress: string, initiatorXpub: string, responderXpub: string): Promise<StateChannel>;
}
//# sourceMappingURL=store.d.ts.map