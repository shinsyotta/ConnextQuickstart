import { CurrencyType, ExchangeRates } from '../types';
import { BN } from './bn';
export interface ICurrencyFormatOptions {
    commas?: boolean;
    decimals?: number;
    withSymbol?: boolean;
}
export interface ICurrency<ThisType extends CurrencyType = any> {
    type: ThisType;
    amount: string;
}
export declare class Currency<ThisType extends CurrencyType = any> implements ICurrency<ThisType> {
    static DAI: (amount: string | number, getRates?: (() => ExchangeRates) | undefined) => Currency<any>;
    static DEI: (amount: string | number, getRates?: (() => ExchangeRates) | undefined) => Currency<any>;
    static ETH: (amount: string | number, getRates?: (() => ExchangeRates) | undefined) => Currency<any>;
    static FIN: (amount: string | number, getRates?: (() => ExchangeRates) | undefined) => Currency<any>;
    static WEI: (amount: string | number, getRates?: (() => ExchangeRates) | undefined) => Currency<any>;
    private typeToSymbol;
    private defaultOptions;
    private precision;
    private _amount;
    private _type;
    private exchangeRates?;
    constructor(type: ThisType, amount: number | string, exchangeRates?: () => ExchangeRates);
    readonly amount: string;
    readonly amountWad: BN;
    readonly currency: ICurrency;
    readonly symbol: string;
    readonly type: ThisType;
    floor(): string;
    format(_options?: ICurrencyFormatOptions): string;
    round(decimals?: number): string;
    toString(): string;
    getExchangeRate: (currency: "DAI" | "DEI" | "ETH" | "FIN" | "WEI") => string;
    to: (toType: "DAI" | "DEI" | "ETH" | "FIN" | "WEI") => Currency<any>;
    toDAI: () => Currency<any>;
    toDEI: () => Currency<any>;
    toETH: () => Currency<any>;
    toFIN: () => Currency<any>;
    toWEI: () => Currency<any>;
    private _convert;
    private toWad;
    private fromWad;
}
